
lm35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000006b4  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5f  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000891  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000610  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  0000269c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067f  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000332f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  7a:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	96 9a       	sbi	0x12, 6	; 18
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	96 98       	cbi	0x12, 6	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	94 9a       	sbi	0x12, 4	; 18
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	94 98       	cbi	0x12, 4	; 18
  9a:	95 98       	cbi	0x12, 5	; 18
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	c2 b3       	in	r28, 0x12	; 18
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	d2 bb       	out	0x12, r29	; 18
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	c2 bb       	out	0x12, r28	; 18
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	94 9a       	sbi	0x12, 4	; 18
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	94 98       	cbi	0x12, 4	; 18
  d2:	95 9a       	sbi	0x12, 5	; 18
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	81 bb       	out	0x11, r24	; 17
  da:	96 9a       	sbi	0x12, 6	; 18
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_read+0x16>
  de:	90 b3       	in	r25, 0x10	; 16
  e0:	96 98       	cbi	0x12, 6	; 18
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_read+0x1c>
  e4:	96 9a       	sbi	0x12, 6	; 18
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_read+0x20>
  e8:	20 b3       	in	r18, 0x10	; 16
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	89 2f       	mov	r24, r25
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	96 98       	cbi	0x12, 6	; 18
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_waitbusy+0xe>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 110:	08 95       	ret

00000112 <lcd_command>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <lcd_gotoxy>:
 126:	61 11       	cpse	r22, r1
 128:	04 c0       	rjmp	.+8      	; 0x132 <lcd_gotoxy+0xc>
 12a:	80 58       	subi	r24, 0x80	; 128
 12c:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 130:	08 95       	ret
 132:	80 54       	subi	r24, 0x40	; 64
 134:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 138:	08 95       	ret

0000013a <lcd_clrscr>:
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 140:	08 95       	ret

00000142 <lcd_putc>:
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 14a:	ca 30       	cpi	r28, 0x0A	; 10
 14c:	49 f4       	brne	.+18     	; 0x160 <lcd_putc+0x1e>
 14e:	80 34       	cpi	r24, 0x40	; 64
 150:	10 f0       	brcs	.+4      	; 0x156 <lcd_putc+0x14>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	01 c0       	rjmp	.+2      	; 0x158 <lcd_putc+0x16>
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 15e:	04 c0       	rjmp	.+8      	; 0x168 <lcd_putc+0x26>
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_puts>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	29 f0       	breq	.+10     	; 0x186 <lcd_puts+0x1a>
 17c:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_putc>
 180:	89 91       	ld	r24, Y+
 182:	81 11       	cpse	r24, r1
 184:	fb cf       	rjmp	.-10     	; 0x17c <lcd_puts+0x10>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 194:	81 b3       	in	r24, 0x11	; 17
 196:	8f 67       	ori	r24, 0x7F	; 127
 198:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	9a ef       	ldi	r25, 0xFA	; 250
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1a2:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1a4:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_toggle();
 1a6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d1 e0       	ldi	r29, 0x01	; 1
 1ba:	ce 01       	movw	r24, r28
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1ca:	90 98       	cbi	0x12, 0	; 18
    lcd_e_toggle();
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d0:	21 97       	sbiw	r28, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1e0:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1ea:	81 2f       	mov	r24, r17
 1ec:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>

}/* lcd_init */
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	08 95       	ret

000001f8 <adc_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "LCD/lcd.h"

void adc_init() {
	ADMUX = (1<<REFS0);
 1f8:	80 e4       	ldi	r24, 0x40	; 64
 1fa:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1fc:	87 e8       	ldi	r24, 0x87	; 135
 1fe:	86 b9       	out	0x06, r24	; 6
 200:	08 95       	ret

00000202 <adc_read>:
}

uint16_t adc_read(uint8_t ch) {
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
 202:	97 b1       	in	r25, 0x07	; 7
 204:	98 7f       	andi	r25, 0xF8	; 248
 206:	87 70       	andi	r24, 0x07	; 7
 208:	89 2b       	or	r24, r25
 20a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 20c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
 20e:	36 99       	sbic	0x06, 6	; 6
 210:	fe cf       	rjmp	.-4      	; 0x20e <adc_read+0xc>
	return (ADC);
 212:	84 b1       	in	r24, 0x04	; 4
 214:	95 b1       	in	r25, 0x05	; 5
}
 216:	08 95       	ret

00000218 <pwm_init>:

void pwm_init() {
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00);
 218:	8b e6       	ldi	r24, 0x6B	; 107
 21a:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1 << PB3);
 21c:	bb 9a       	sbi	0x17, 3	; 23
 21e:	08 95       	ret

00000220 <set_motor_speed>:
}

void set_motor_speed(uint8_t duty_cycle) {
	OCR0 = (duty_cycle * 255) / 100;
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	82 9f       	mul	r24, r18
 224:	c0 01       	movw	r24, r0
 226:	11 24       	eor	r1, r1
 228:	64 e6       	ldi	r22, 0x64	; 100
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__divmodhi4>
 230:	6c bf       	out	0x3c, r22	; 60
 232:	08 95       	ret

00000234 <main>:
}

int main() {
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2a 97       	sbiw	r28, 0x0a	; 10
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	87 bb       	out	0x17, r24	; 23
	uint16_t adc_result0;
	int temp;
	char buffer[10];
	uint8_t duty_cycle = 0;

	adc_init();
 24c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <adc_init>
	lcd_init(LCD_DISP_ON_CURSOR);
 250:	8e e0       	ldi	r24, 0x0E	; 14
 252:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
	pwm_init();
 256:	0e 94 0c 01 	call	0x218	; 0x218 <pwm_init>

	lcd_clrscr();
 25a:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_clrscr>
	lcd_gotoxy(0, 0);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x36>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x3c>
 270:	00 00       	nop
			} else if (temp >= 30 && temp < 35) {
			duty_cycle = 90;
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 90%");
			} else if (temp >= 35 && temp <= 40) {
			duty_cycle = 100;
 272:	14 e6       	ldi	r17, 0x64	; 100
	lcd_gotoxy(0, 0);

	_delay_ms(50);

	while (1) {
		adc_result0 = adc_read(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 01 01 	call	0x202	; 0x202 <adc_read>
		temp = adc_result0 / 2.01;
 27a:	bc 01       	movw	r22, r24
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__floatunsisf>
 284:	27 ed       	ldi	r18, 0xD7	; 215
 286:	33 ea       	ldi	r19, 0xA3	; 163
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e4       	ldi	r21, 0x40	; 64
 28c:	0e 94 ba 01 	call	0x374	; 0x374 <__divsf3>
 290:	0e 94 2c 02 	call	0x458	; 0x458 <__fixsfsi>
 294:	6b 01       	movw	r12, r22
 296:	7c 01       	movw	r14, r24

		lcd_clrscr();
 298:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_clrscr>
		lcd_gotoxy(0, 0);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
		itoa(temp, buffer, 10);
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	be 01       	movw	r22, r28
 2aa:	6f 5f       	subi	r22, 0xFF	; 255
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	c6 01       	movw	r24, r12
 2b0:	0e 94 18 03 	call	0x630	; 0x630 <itoa>
		lcd_puts("Temp=");
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_puts(buffer);
 2bc:	ce 01       	movw	r24, r28
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_gotoxy(7, 0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
		lcd_puts("C");
 2cc:	86 e6       	ldi	r24, 0x66	; 102
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>

		if (temp >= 20 && temp < 25) {
 2d4:	c6 01       	movw	r24, r12
 2d6:	44 97       	sbiw	r24, 0x14	; 20
 2d8:	05 97       	sbiw	r24, 0x05	; 5
 2da:	50 f4       	brcc	.+20     	; 0x2f0 <main+0xbc>
			duty_cycle = 50;
			lcd_gotoxy(0, 1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
			lcd_puts("Fan ON 50%");
 2e4:	88 e6       	ldi	r24, 0x68	; 104
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_puts(buffer);
		lcd_gotoxy(7, 0);
		lcd_puts("C");

		if (temp >= 20 && temp < 25) {
			duty_cycle = 50;
 2ec:	82 e3       	ldi	r24, 0x32	; 50
 2ee:	36 c0       	rjmp	.+108    	; 0x35c <main+0x128>
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 50%");
			} else if (temp >= 25 && temp < 30) {
 2f0:	c6 01       	movw	r24, r12
 2f2:	49 97       	sbiw	r24, 0x19	; 25
 2f4:	05 97       	sbiw	r24, 0x05	; 5
 2f6:	50 f4       	brcc	.+20     	; 0x30c <main+0xd8>
			duty_cycle = 70;
			lcd_gotoxy(0, 1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
			lcd_puts("Fan ON 70%");
 300:	83 e7       	ldi	r24, 0x73	; 115
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		if (temp >= 20 && temp < 25) {
			duty_cycle = 50;
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 50%");
			} else if (temp >= 25 && temp < 30) {
			duty_cycle = 70;
 308:	86 e4       	ldi	r24, 0x46	; 70
 30a:	28 c0       	rjmp	.+80     	; 0x35c <main+0x128>
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 70%");
			} else if (temp >= 30 && temp < 35) {
 30c:	c6 01       	movw	r24, r12
 30e:	4e 97       	sbiw	r24, 0x1e	; 30
 310:	05 97       	sbiw	r24, 0x05	; 5
 312:	50 f4       	brcc	.+20     	; 0x328 <main+0xf4>
			duty_cycle = 90;
			lcd_gotoxy(0, 1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
			lcd_puts("Fan ON 90%");
 31c:	8e e7       	ldi	r24, 0x7E	; 126
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			} else if (temp >= 25 && temp < 30) {
			duty_cycle = 70;
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 70%");
			} else if (temp >= 30 && temp < 35) {
			duty_cycle = 90;
 324:	8a e5       	ldi	r24, 0x5A	; 90
 326:	1a c0       	rjmp	.+52     	; 0x35c <main+0x128>
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 90%");
			} else if (temp >= 35 && temp <= 40) {
 328:	93 e2       	ldi	r25, 0x23	; 35
 32a:	c9 1a       	sub	r12, r25
 32c:	d1 08       	sbc	r13, r1
 32e:	26 e0       	ldi	r18, 0x06	; 6
 330:	c2 16       	cp	r12, r18
 332:	d1 04       	cpc	r13, r1
 334:	50 f4       	brcc	.+20     	; 0x34a <main+0x116>
			duty_cycle = 100;
			lcd_gotoxy(0, 1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
			lcd_puts("Fan ON 100%");
 33e:	89 e8       	ldi	r24, 0x89	; 137
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			} else if (temp >= 30 && temp < 35) {
			duty_cycle = 90;
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 90%");
			} else if (temp >= 35 && temp <= 40) {
			duty_cycle = 100;
 346:	81 2f       	mov	r24, r17
 348:	09 c0       	rjmp	.+18     	; 0x35c <main+0x128>
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 100%");
			} else {
			duty_cycle = 0;
			lcd_gotoxy(0, 1);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_gotoxy>
			lcd_puts("Fan OFF 0%");
 352:	85 e9       	ldi	r24, 0x95	; 149
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			} else if (temp >= 35 && temp <= 40) {
			duty_cycle = 100;
			lcd_gotoxy(0, 1);
			lcd_puts("Fan ON 100%");
			} else {
			duty_cycle = 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
			lcd_gotoxy(0, 1);
			lcd_puts("Fan OFF 0%");
		}

		set_motor_speed(duty_cycle);
 35c:	0e 94 10 01 	call	0x220	; 0x220 <set_motor_speed>
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	91 ee       	ldi	r25, 0xE1	; 225
 364:	24 e0       	ldi	r18, 0x04	; 4
 366:	81 50       	subi	r24, 0x01	; 1
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x132>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x13c>
 370:	00 00       	nop
 372:	80 cf       	rjmp	.-256    	; 0x274 <main+0x40>

00000374 <__divsf3>:
 374:	0e 94 ce 01 	call	0x39c	; 0x39c <__divsf3x>
 378:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_round>
 37c:	0e 94 af 02 	call	0x55e	; 0x55e <__fp_pscB>
 380:	58 f0       	brcs	.+22     	; 0x398 <__divsf3+0x24>
 382:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_pscA>
 386:	40 f0       	brcs	.+16     	; 0x398 <__divsf3+0x24>
 388:	29 f4       	brne	.+10     	; 0x394 <__divsf3+0x20>
 38a:	5f 3f       	cpi	r21, 0xFF	; 255
 38c:	29 f0       	breq	.+10     	; 0x398 <__divsf3+0x24>
 38e:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_inf>
 392:	51 11       	cpse	r21, r1
 394:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_szero>
 398:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_nan>

0000039c <__divsf3x>:
 39c:	0e 94 c7 02 	call	0x58e	; 0x58e <__fp_split3>
 3a0:	68 f3       	brcs	.-38     	; 0x37c <__divsf3+0x8>

000003a2 <__divsf3_pse>:
 3a2:	99 23       	and	r25, r25
 3a4:	b1 f3       	breq	.-20     	; 0x392 <__divsf3+0x1e>
 3a6:	55 23       	and	r21, r21
 3a8:	91 f3       	breq	.-28     	; 0x38e <__divsf3+0x1a>
 3aa:	95 1b       	sub	r25, r21
 3ac:	55 0b       	sbc	r21, r21
 3ae:	bb 27       	eor	r27, r27
 3b0:	aa 27       	eor	r26, r26
 3b2:	62 17       	cp	r22, r18
 3b4:	73 07       	cpc	r23, r19
 3b6:	84 07       	cpc	r24, r20
 3b8:	38 f0       	brcs	.+14     	; 0x3c8 <__divsf3_pse+0x26>
 3ba:	9f 5f       	subi	r25, 0xFF	; 255
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	44 1f       	adc	r20, r20
 3c4:	aa 1f       	adc	r26, r26
 3c6:	a9 f3       	breq	.-22     	; 0x3b2 <__divsf3_pse+0x10>
 3c8:	35 d0       	rcall	.+106    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3ca:	0e 2e       	mov	r0, r30
 3cc:	3a f0       	brmi	.+14     	; 0x3dc <__divsf3_pse+0x3a>
 3ce:	e0 e8       	ldi	r30, 0x80	; 128
 3d0:	32 d0       	rcall	.+100    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	50 40       	sbci	r21, 0x00	; 0
 3d6:	e6 95       	lsr	r30
 3d8:	00 1c       	adc	r0, r0
 3da:	ca f7       	brpl	.-14     	; 0x3ce <__divsf3_pse+0x2c>
 3dc:	2b d0       	rcall	.+86     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3de:	fe 2f       	mov	r31, r30
 3e0:	29 d0       	rcall	.+82     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	bb 1f       	adc	r27, r27
 3ea:	26 17       	cp	r18, r22
 3ec:	37 07       	cpc	r19, r23
 3ee:	48 07       	cpc	r20, r24
 3f0:	ab 07       	cpc	r26, r27
 3f2:	b0 e8       	ldi	r27, 0x80	; 128
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__divsf3_pse+0x56>
 3f6:	bb 0b       	sbc	r27, r27
 3f8:	80 2d       	mov	r24, r0
 3fa:	bf 01       	movw	r22, r30
 3fc:	ff 27       	eor	r31, r31
 3fe:	93 58       	subi	r25, 0x83	; 131
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	3a f0       	brmi	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	9e 3f       	cpi	r25, 0xFE	; 254
 406:	51 05       	cpc	r21, r1
 408:	78 f0       	brcs	.+30     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 40a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_inf>
 40e:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_szero>
 412:	5f 3f       	cpi	r21, 0xFF	; 255
 414:	e4 f3       	brlt	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	98 3e       	cpi	r25, 0xE8	; 232
 418:	d4 f3       	brlt	.-12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41a:	86 95       	lsr	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f7 95       	ror	r31
 424:	9f 5f       	subi	r25, 0xFF	; 255
 426:	c9 f7       	brne	.-14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 428:	88 0f       	add	r24, r24
 42a:	91 1d       	adc	r25, r1
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	97 f9       	bld	r25, 7
 432:	08 95       	ret
 434:	e1 e0       	ldi	r30, 0x01	; 1
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	bb 1f       	adc	r27, r27
 43e:	62 17       	cp	r22, r18
 440:	73 07       	cpc	r23, r19
 442:	84 07       	cpc	r24, r20
 444:	ba 07       	cpc	r27, r26
 446:	20 f0       	brcs	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 448:	62 1b       	sub	r22, r18
 44a:	73 0b       	sbc	r23, r19
 44c:	84 0b       	sbc	r24, r20
 44e:	ba 0b       	sbc	r27, r26
 450:	ee 1f       	adc	r30, r30
 452:	88 f7       	brcc	.-30     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 454:	e0 95       	com	r30
 456:	08 95       	ret

00000458 <__fixsfsi>:
 458:	0e 94 33 02 	call	0x466	; 0x466 <__fixunssfsi>
 45c:	68 94       	set
 45e:	b1 11       	cpse	r27, r1
 460:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_szero>
 464:	08 95       	ret

00000466 <__fixunssfsi>:
 466:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_splitA>
 46a:	88 f0       	brcs	.+34     	; 0x48e <__fixunssfsi+0x28>
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	98 f0       	brcs	.+38     	; 0x496 <__fixunssfsi+0x30>
 470:	b9 2f       	mov	r27, r25
 472:	99 27       	eor	r25, r25
 474:	b7 51       	subi	r27, 0x17	; 23
 476:	b0 f0       	brcs	.+44     	; 0x4a4 <__fixunssfsi+0x3e>
 478:	e1 f0       	breq	.+56     	; 0x4b2 <__fixunssfsi+0x4c>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a f0       	brmi	.+6      	; 0x48a <__fixunssfsi+0x24>
 484:	ba 95       	dec	r27
 486:	c9 f7       	brne	.-14     	; 0x47a <__fixunssfsi+0x14>
 488:	14 c0       	rjmp	.+40     	; 0x4b2 <__fixunssfsi+0x4c>
 48a:	b1 30       	cpi	r27, 0x01	; 1
 48c:	91 f0       	breq	.+36     	; 0x4b2 <__fixunssfsi+0x4c>
 48e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_zero>
 492:	b1 e0       	ldi	r27, 0x01	; 1
 494:	08 95       	ret
 496:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__fp_zero>
 49a:	67 2f       	mov	r22, r23
 49c:	78 2f       	mov	r23, r24
 49e:	88 27       	eor	r24, r24
 4a0:	b8 5f       	subi	r27, 0xF8	; 248
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <__fixunssfsi+0x4c>
 4a4:	b9 3f       	cpi	r27, 0xF9	; 249
 4a6:	cc f3       	brlt	.-14     	; 0x49a <__fixunssfsi+0x34>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b3 95       	inc	r27
 4b0:	d9 f7       	brne	.-10     	; 0x4a8 <__fixunssfsi+0x42>
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__fixunssfsi+0x5c>
 4b4:	90 95       	com	r25
 4b6:	80 95       	com	r24
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__floatunsisf>:
 4c4:	e8 94       	clt
 4c6:	09 c0       	rjmp	.+18     	; 0x4da <__floatsisf+0x12>

000004c8 <__floatsisf>:
 4c8:	97 fb       	bst	r25, 7
 4ca:	3e f4       	brtc	.+14     	; 0x4da <__floatsisf+0x12>
 4cc:	90 95       	com	r25
 4ce:	80 95       	com	r24
 4d0:	70 95       	com	r23
 4d2:	61 95       	neg	r22
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	8f 4f       	sbci	r24, 0xFF	; 255
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	99 23       	and	r25, r25
 4dc:	a9 f0       	breq	.+42     	; 0x508 <__floatsisf+0x40>
 4de:	f9 2f       	mov	r31, r25
 4e0:	96 e9       	ldi	r25, 0x96	; 150
 4e2:	bb 27       	eor	r27, r27
 4e4:	93 95       	inc	r25
 4e6:	f6 95       	lsr	r31
 4e8:	87 95       	ror	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b7 95       	ror	r27
 4f0:	f1 11       	cpse	r31, r1
 4f2:	f8 cf       	rjmp	.-16     	; 0x4e4 <__floatsisf+0x1c>
 4f4:	fa f4       	brpl	.+62     	; 0x534 <__floatsisf+0x6c>
 4f6:	bb 0f       	add	r27, r27
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__floatsisf+0x36>
 4fa:	60 ff       	sbrs	r22, 0
 4fc:	1b c0       	rjmp	.+54     	; 0x534 <__floatsisf+0x6c>
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	16 c0       	rjmp	.+44     	; 0x534 <__floatsisf+0x6c>
 508:	88 23       	and	r24, r24
 50a:	11 f0       	breq	.+4      	; 0x510 <__floatsisf+0x48>
 50c:	96 e9       	ldi	r25, 0x96	; 150
 50e:	11 c0       	rjmp	.+34     	; 0x532 <__floatsisf+0x6a>
 510:	77 23       	and	r23, r23
 512:	21 f0       	breq	.+8      	; 0x51c <__floatsisf+0x54>
 514:	9e e8       	ldi	r25, 0x8E	; 142
 516:	87 2f       	mov	r24, r23
 518:	76 2f       	mov	r23, r22
 51a:	05 c0       	rjmp	.+10     	; 0x526 <__floatsisf+0x5e>
 51c:	66 23       	and	r22, r22
 51e:	71 f0       	breq	.+28     	; 0x53c <__floatsisf+0x74>
 520:	96 e8       	ldi	r25, 0x86	; 134
 522:	86 2f       	mov	r24, r22
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	2a f0       	brmi	.+10     	; 0x534 <__floatsisf+0x6c>
 52a:	9a 95       	dec	r25
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	da f7       	brpl	.-10     	; 0x52a <__floatsisf+0x62>
 534:	88 0f       	add	r24, r24
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret

0000053e <__fp_inf>:
 53e:	97 f9       	bld	r25, 7
 540:	9f 67       	ori	r25, 0x7F	; 127
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	08 95       	ret

0000054a <__fp_nan>:
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	80 ec       	ldi	r24, 0xC0	; 192
 54e:	08 95       	ret

00000550 <__fp_pscA>:
 550:	00 24       	eor	r0, r0
 552:	0a 94       	dec	r0
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	18 06       	cpc	r1, r24
 55a:	09 06       	cpc	r0, r25
 55c:	08 95       	ret

0000055e <__fp_pscB>:
 55e:	00 24       	eor	r0, r0
 560:	0a 94       	dec	r0
 562:	12 16       	cp	r1, r18
 564:	13 06       	cpc	r1, r19
 566:	14 06       	cpc	r1, r20
 568:	05 06       	cpc	r0, r21
 56a:	08 95       	ret

0000056c <__fp_round>:
 56c:	09 2e       	mov	r0, r25
 56e:	03 94       	inc	r0
 570:	00 0c       	add	r0, r0
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0xc>
 574:	88 23       	and	r24, r24
 576:	52 f0       	brmi	.+20     	; 0x58c <__fp_round+0x20>
 578:	bb 0f       	add	r27, r27
 57a:	40 f4       	brcc	.+16     	; 0x58c <__fp_round+0x20>
 57c:	bf 2b       	or	r27, r31
 57e:	11 f4       	brne	.+4      	; 0x584 <__fp_round+0x18>
 580:	60 ff       	sbrs	r22, 0
 582:	04 c0       	rjmp	.+8      	; 0x58c <__fp_round+0x20>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	08 95       	ret

0000058e <__fp_split3>:
 58e:	57 fd       	sbrc	r21, 7
 590:	90 58       	subi	r25, 0x80	; 128
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	59 f0       	breq	.+22     	; 0x5ae <__fp_splitA+0x10>
 598:	5f 3f       	cpi	r21, 0xFF	; 255
 59a:	71 f0       	breq	.+28     	; 0x5b8 <__fp_splitA+0x1a>
 59c:	47 95       	ror	r20

0000059e <__fp_splitA>:
 59e:	88 0f       	add	r24, r24
 5a0:	97 fb       	bst	r25, 7
 5a2:	99 1f       	adc	r25, r25
 5a4:	61 f0       	breq	.+24     	; 0x5be <__fp_splitA+0x20>
 5a6:	9f 3f       	cpi	r25, 0xFF	; 255
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <__fp_splitA+0x2a>
 5aa:	87 95       	ror	r24
 5ac:	08 95       	ret
 5ae:	12 16       	cp	r1, r18
 5b0:	13 06       	cpc	r1, r19
 5b2:	14 06       	cpc	r1, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	f2 cf       	rjmp	.-28     	; 0x59c <__fp_split3+0xe>
 5b8:	46 95       	lsr	r20
 5ba:	f1 df       	rcall	.-30     	; 0x59e <__fp_splitA>
 5bc:	08 c0       	rjmp	.+16     	; 0x5ce <__fp_splitA+0x30>
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	18 06       	cpc	r1, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	f1 cf       	rjmp	.-30     	; 0x5aa <__fp_splitA+0xc>
 5c8:	86 95       	lsr	r24
 5ca:	71 05       	cpc	r23, r1
 5cc:	61 05       	cpc	r22, r1
 5ce:	08 94       	sec
 5d0:	08 95       	ret

000005d2 <__fp_zero>:
 5d2:	e8 94       	clt

000005d4 <__fp_szero>:
 5d4:	bb 27       	eor	r27, r27
 5d6:	66 27       	eor	r22, r22
 5d8:	77 27       	eor	r23, r23
 5da:	cb 01       	movw	r24, r22
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__divmodhi4>:
 5e0:	97 fb       	bst	r25, 7
 5e2:	07 2e       	mov	r0, r23
 5e4:	16 f4       	brtc	.+4      	; 0x5ea <__divmodhi4+0xa>
 5e6:	00 94       	com	r0
 5e8:	07 d0       	rcall	.+14     	; 0x5f8 <__divmodhi4_neg1>
 5ea:	77 fd       	sbrc	r23, 7
 5ec:	09 d0       	rcall	.+18     	; 0x600 <__divmodhi4_neg2>
 5ee:	0e 94 04 03 	call	0x608	; 0x608 <__udivmodhi4>
 5f2:	07 fc       	sbrc	r0, 7
 5f4:	05 d0       	rcall	.+10     	; 0x600 <__divmodhi4_neg2>
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__divmodhi4_exit>

000005f8 <__divmodhi4_neg1>:
 5f8:	90 95       	com	r25
 5fa:	81 95       	neg	r24
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__divmodhi4_neg2>:
 600:	70 95       	com	r23
 602:	61 95       	neg	r22
 604:	7f 4f       	sbci	r23, 0xFF	; 255

00000606 <__divmodhi4_exit>:
 606:	08 95       	ret

00000608 <__udivmodhi4>:
 608:	aa 1b       	sub	r26, r26
 60a:	bb 1b       	sub	r27, r27
 60c:	51 e1       	ldi	r21, 0x11	; 17
 60e:	07 c0       	rjmp	.+14     	; 0x61e <__udivmodhi4_ep>

00000610 <__udivmodhi4_loop>:
 610:	aa 1f       	adc	r26, r26
 612:	bb 1f       	adc	r27, r27
 614:	a6 17       	cp	r26, r22
 616:	b7 07       	cpc	r27, r23
 618:	10 f0       	brcs	.+4      	; 0x61e <__udivmodhi4_ep>
 61a:	a6 1b       	sub	r26, r22
 61c:	b7 0b       	sbc	r27, r23

0000061e <__udivmodhi4_ep>:
 61e:	88 1f       	adc	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	5a 95       	dec	r21
 624:	a9 f7       	brne	.-22     	; 0x610 <__udivmodhi4_loop>
 626:	80 95       	com	r24
 628:	90 95       	com	r25
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	08 95       	ret

00000630 <itoa>:
 630:	45 32       	cpi	r20, 0x25	; 37
 632:	51 05       	cpc	r21, r1
 634:	20 f4       	brcc	.+8      	; 0x63e <itoa+0xe>
 636:	42 30       	cpi	r20, 0x02	; 2
 638:	10 f0       	brcs	.+4      	; 0x63e <itoa+0xe>
 63a:	0c 94 23 03 	jmp	0x646	; 0x646 <__itoa_ncheck>
 63e:	fb 01       	movw	r30, r22
 640:	10 82       	st	Z, r1
 642:	cb 01       	movw	r24, r22
 644:	08 95       	ret

00000646 <__itoa_ncheck>:
 646:	bb 27       	eor	r27, r27
 648:	4a 30       	cpi	r20, 0x0A	; 10
 64a:	31 f4       	brne	.+12     	; 0x658 <__itoa_ncheck+0x12>
 64c:	99 23       	and	r25, r25
 64e:	22 f4       	brpl	.+8      	; 0x658 <__itoa_ncheck+0x12>
 650:	bd e2       	ldi	r27, 0x2D	; 45
 652:	90 95       	com	r25
 654:	81 95       	neg	r24
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__utoa_common>

0000065c <__utoa_ncheck>:
 65c:	bb 27       	eor	r27, r27

0000065e <__utoa_common>:
 65e:	fb 01       	movw	r30, r22
 660:	55 27       	eor	r21, r21
 662:	aa 27       	eor	r26, r26
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	aa 1f       	adc	r26, r26
 66a:	a4 17       	cp	r26, r20
 66c:	10 f0       	brcs	.+4      	; 0x672 <__utoa_common+0x14>
 66e:	a4 1b       	sub	r26, r20
 670:	83 95       	inc	r24
 672:	50 51       	subi	r21, 0x10	; 16
 674:	b9 f7       	brne	.-18     	; 0x664 <__utoa_common+0x6>
 676:	a0 5d       	subi	r26, 0xD0	; 208
 678:	aa 33       	cpi	r26, 0x3A	; 58
 67a:	08 f0       	brcs	.+2      	; 0x67e <__utoa_common+0x20>
 67c:	a9 5d       	subi	r26, 0xD9	; 217
 67e:	a1 93       	st	Z+, r26
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	79 f7       	brne	.-34     	; 0x662 <__utoa_common+0x4>
 684:	b1 11       	cpse	r27, r1
 686:	b1 93       	st	Z+, r27
 688:	11 92       	st	Z+, r1
 68a:	cb 01       	movw	r24, r22
 68c:	0c 94 48 03 	jmp	0x690	; 0x690 <strrev>

00000690 <strrev>:
 690:	dc 01       	movw	r26, r24
 692:	fc 01       	movw	r30, r24
 694:	67 2f       	mov	r22, r23
 696:	71 91       	ld	r23, Z+
 698:	77 23       	and	r23, r23
 69a:	e1 f7       	brne	.-8      	; 0x694 <strrev+0x4>
 69c:	32 97       	sbiw	r30, 0x02	; 2
 69e:	04 c0       	rjmp	.+8      	; 0x6a8 <strrev+0x18>
 6a0:	7c 91       	ld	r23, X
 6a2:	6d 93       	st	X+, r22
 6a4:	70 83       	st	Z, r23
 6a6:	62 91       	ld	r22, -Z
 6a8:	ae 17       	cp	r26, r30
 6aa:	bf 07       	cpc	r27, r31
 6ac:	c8 f3       	brcs	.-14     	; 0x6a0 <strrev+0x10>
 6ae:	08 95       	ret

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
