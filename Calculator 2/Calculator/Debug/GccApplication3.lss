
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000e14  00000e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bb6  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000967  00000000  00000000  00002bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b34  00000000  00000000  00003559  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006aa  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e72  00000000  00000000  00004966  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 03 	call	0x72c	; 0x72c <main>
  7a:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VidSetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_private.h"
#include "DIO_interface.h"
//setting pin direction
void DIO_VidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
	if(Copy_u8Direction==Input)
  82:	41 11       	cpse	r20, r1
  84:	38 c0       	rjmp	.+112    	; 0xf6 <DIO_VidSetPinDirection+0x74>
	{
		switch(Copy_u8Port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <DIO_VidSetPinDirection+0x2c>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_VidSetPinDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_VidSetPinDirection+0x44>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <DIO_VidSetPinDirection+0x5c>
  94:	08 95       	ret
		case Port_A: CLR_BIT(DDRA,Copy_u8Pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_VidSetPinDirection+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_VidSetPinDirection+0x1c>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
		break;
  ac:	08 95       	ret
		case Port_B: CLR_BIT(DDRB,Copy_u8Pin);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_VidSetPinDirection+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_VidSetPinDirection+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	87 bb       	out	0x17, r24	; 23
		break;
  c4:	08 95       	ret
		case Port_C: CLR_BIT(DDRC,Copy_u8Pin);
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_VidSetPinDirection+0x50>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_VidSetPinDirection+0x4c>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
		break;
  dc:	08 95       	ret
		case Port_D: CLR_BIT(DDRD,Copy_u8Pin);
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_VidSetPinDirection+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_VidSetPinDirection+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
		break;
  f4:	08 95       	ret
		}
	}
	else if(Copy_u8Direction==Output)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	99 f5       	brne	.+102    	; 0x160 <DIO_VidSetPinDirection+0xde>
	{
		switch(Copy_u8Port){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	89 f0       	breq	.+34     	; 0x120 <DIO_VidSetPinDirection+0x9e>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_VidSetPinDirection+0x88>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	c9 f0       	breq	.+50     	; 0x136 <DIO_VidSetPinDirection+0xb4>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	11 f1       	breq	.+68     	; 0x14c <DIO_VidSetPinDirection+0xca>
 108:	08 95       	ret
		case Port_A:SET_BIT(DDRA,Copy_u8Pin);
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_VidSetPinDirection+0x94>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_VidSetPinDirection+0x90>
 11a:	82 2b       	or	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
		break;
 11e:	08 95       	ret
		case Port_B:SET_BIT(DDRB,Copy_u8Pin);
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_VidSetPinDirection+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_VidSetPinDirection+0xa6>
 130:	82 2b       	or	r24, r18
 132:	87 bb       	out	0x17, r24	; 23
		break;
 134:	08 95       	ret
		case Port_C:SET_BIT(DDRC,Copy_u8Pin);
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_VidSetPinDirection+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_VidSetPinDirection+0xbc>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
		break;
 14a:	08 95       	ret
		case Port_D:SET_BIT(DDRD,Copy_u8Pin);
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VidSetPinDirection+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VidSetPinDirection+0xd2>
 15c:	82 2b       	or	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_VidSetPinValue>:
	}
}

//setting pin value
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8pin,u8 Copy_u8Value){
	if(Copy_u8Value==PinLow)
 162:	41 11       	cpse	r20, r1
 164:	38 c0       	rjmp	.+112    	; 0x1d6 <DIO_VidSetPinValue+0x74>
	{
		switch(Copy_u8Port){
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	91 f0       	breq	.+36     	; 0x18e <DIO_VidSetPinValue+0x2c>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_VidSetPinValue+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	d9 f0       	breq	.+54     	; 0x1a6 <DIO_VidSetPinValue+0x44>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	29 f1       	breq	.+74     	; 0x1be <DIO_VidSetPinValue+0x5c>
 174:	08 95       	ret
		case Port_A:CLR_BIT(PORTA,Copy_u8pin);
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_VidSetPinValue+0x20>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_VidSetPinValue+0x1c>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
		break;
 18c:	08 95       	ret
		case Port_B:CLR_BIT(PORTB,Copy_u8pin);
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_VidSetPinValue+0x38>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_VidSetPinValue+0x34>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	88 bb       	out	0x18, r24	; 24
		break;
 1a4:	08 95       	ret
		case Port_C:CLR_BIT(PORTC,Copy_u8pin);
 1a6:	25 b3       	in	r18, 0x15	; 21
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_VidSetPinValue+0x50>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_VidSetPinValue+0x4c>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	85 bb       	out	0x15, r24	; 21
		break;
 1bc:	08 95       	ret
		case Port_D:CLR_BIT(PORTD,Copy_u8pin);
 1be:	22 b3       	in	r18, 0x12	; 18
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_VidSetPinValue+0x68>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_VidSetPinValue+0x64>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
		break;
 1d4:	08 95       	ret
		}

	}
	else if(Copy_u8Value==PinHigh)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	99 f5       	brne	.+102    	; 0x240 <DIO_VidSetPinValue+0xde>
	{
		switch(Copy_u8Port){
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	89 f0       	breq	.+34     	; 0x200 <DIO_VidSetPinValue+0x9e>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_VidSetPinValue+0x88>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	c9 f0       	breq	.+50     	; 0x216 <DIO_VidSetPinValue+0xb4>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	11 f1       	breq	.+68     	; 0x22c <DIO_VidSetPinValue+0xca>
 1e8:	08 95       	ret
		case Port_A:SET_BIT(PORTA,Copy_u8pin);
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_VidSetPinValue+0x94>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_VidSetPinValue+0x90>
 1fa:	82 2b       	or	r24, r18
 1fc:	8b bb       	out	0x1b, r24	; 27
		break;
 1fe:	08 95       	ret
		case Port_B:SET_BIT(PORTB,Copy_u8pin);
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_VidSetPinValue+0xaa>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_VidSetPinValue+0xa6>
 210:	82 2b       	or	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
		break;
 214:	08 95       	ret
		case Port_C:SET_BIT(PORTC,Copy_u8pin);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_VidSetPinValue+0xc0>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_VidSetPinValue+0xbc>
 226:	82 2b       	or	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
		break;
 22a:	08 95       	ret
		case Port_D:SET_BIT(PORTD,Copy_u8pin);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_VidSetPinValue+0xd6>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_VidSetPinValue+0xd2>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_VidgetPinValue>:
}

//getting pin value
void DIO_VidgetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *pu8Data){

	switch(Copy_u8Port){
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	89 f0       	breq	.+34     	; 0x268 <DIO_VidgetPinValue+0x26>
 246:	28 f0       	brcs	.+10     	; 0x252 <DIO_VidgetPinValue+0x10>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	c9 f0       	breq	.+50     	; 0x27e <DIO_VidgetPinValue+0x3c>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	11 f1       	breq	.+68     	; 0x294 <DIO_VidgetPinValue+0x52>
 250:	08 95       	ret
	case Port_A:*pu8Data=GET_BIT(PINA,Copy_u8Pin);
 252:	89 b3       	in	r24, 0x19	; 25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_VidgetPinValue+0x1a>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_VidgetPinValue+0x16>
 260:	81 70       	andi	r24, 0x01	; 1
 262:	fa 01       	movw	r30, r20
 264:	80 83       	st	Z, r24
	break;
 266:	08 95       	ret
	case Port_B:*pu8Data=GET_BIT(PINB,Copy_u8Pin);
 268:	86 b3       	in	r24, 0x16	; 22
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_VidgetPinValue+0x30>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_VidgetPinValue+0x2c>
 276:	81 70       	andi	r24, 0x01	; 1
 278:	fa 01       	movw	r30, r20
 27a:	80 83       	st	Z, r24
	break;
 27c:	08 95       	ret
	case Port_C:*pu8Data=GET_BIT(PINC,Copy_u8Pin);
 27e:	83 b3       	in	r24, 0x13	; 19
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_VidgetPinValue+0x46>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_VidgetPinValue+0x42>
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	fa 01       	movw	r30, r20
 290:	80 83       	st	Z, r24
	break;
 292:	08 95       	ret
	case Port_D:*pu8Data=GET_BIT(PIND,Copy_u8Pin);
 294:	80 b3       	in	r24, 0x10	; 16
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_VidgetPinValue+0x5c>
 29a:	95 95       	asr	r25
 29c:	87 95       	ror	r24
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_VidgetPinValue+0x58>
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	fa 01       	movw	r30, r20
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret

000002aa <KPD_VidInit>:
#include <util/delay.h>

void KPD_VidInit(void)
{
	//Set Columns as Output
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_0,Output);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_1,Output);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_2,Output);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_3,Output);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	65 e0       	ldi	r22, 0x05	; 5
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	//Set Columns as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_0,PinHigh);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_1,PinHigh);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_2,PinHigh);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_3,PinHigh);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>

	//Set Row as Input
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_0,Input);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_1,Input);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	65 e0       	ldi	r22, 0x05	; 5
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_2,Input);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	66 e0       	ldi	r22, 0x06	; 6
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_3,Input);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	67 e0       	ldi	r22, 0x07	; 7
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	//Set Row as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_0,PinHigh);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_1,PinHigh);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_2,PinHigh);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	66 e0       	ldi	r22, 0x06	; 6
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_3,PinHigh);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	67 e0       	ldi	r22, 0x07	; 7
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 34a:	08 95       	ret

0000034c <Kpd_U8GetPressedKey>:



}
u8 Kpd_U8GetPressedKey(void)
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	42 c0       	rjmp	.+132    	; 0x3ea <Kpd_U8GetPressedKey+0x9e>
	{
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);
 366:	c0 2e       	mov	r12, r16
 368:	d1 2c       	mov	r13, r1
 36a:	f6 01       	movw	r30, r12
 36c:	ec 58       	subi	r30, 0x8C	; 140
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	60 81       	ld	r22, Z
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	2b c0       	rjmp	.+86     	; 0x3d4 <Kpd_U8GetPressedKey+0x88>
		{
			DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
 37e:	e1 2e       	mov	r14, r17
 380:	f1 2c       	mov	r15, r1
 382:	f7 01       	movw	r30, r14
 384:	e0 59       	subi	r30, 0x90	; 144
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	ae 01       	movw	r20, r28
 38a:	4f 5f       	subi	r20, 0xFF	; 255
 38c:	5f 4f       	sbci	r21, 0xFF	; 255
 38e:	60 81       	ld	r22, Z
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 21 01 	call	0x242	; 0x242 <DIO_VidgetPinValue>

			 /*****CHECK IF KEY IS PREESED*******/

			if(Local_u8_Pint_State==PinLow)
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	81 11       	cpse	r24, r1
 39a:	1b c0       	rjmp	.+54     	; 0x3d2 <Kpd_U8GetPressedKey+0x86>
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];
 39c:	c7 01       	movw	r24, r14
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	80 5a       	subi	r24, 0xA0	; 160
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	fc 01       	movw	r30, r24
 3ac:	ec 0d       	add	r30, r12
 3ae:	fd 1d       	adc	r31, r13
 3b0:	10 81       	ld	r17, Z

				while(Local_u8_Pint_State==PinLow)
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <Kpd_U8GetPressedKey+0x7c>
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
 3b4:	ae 01       	movw	r20, r28
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	f7 01       	movw	r30, r14
 3bc:	e0 59       	subi	r30, 0x90	; 144
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	60 81       	ld	r22, Z
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 21 01 	call	0x242	; 0x242 <DIO_VidgetPinValue>

			if(Local_u8_Pint_State==PinLow)
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];

				while(Local_u8_Pint_State==PinLow)
 3c8:	99 81       	ldd	r25, Y+1	; 0x01
 3ca:	99 23       	and	r25, r25
 3cc:	99 f3       	breq	.-26     	; 0x3b4 <Kpd_U8GetPressedKey+0x68>
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
				}
				return Local_u8_Pressed_Key;
 3ce:	81 2f       	mov	r24, r17
 3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <Kpd_U8GetPressedKey+0xa6>
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
 3d2:	1f 5f       	subi	r17, 0xFF	; 255
 3d4:	14 30       	cpi	r17, 0x04	; 4
 3d6:	98 f2       	brcs	.-90     	; 0x37e <Kpd_U8GetPressedKey+0x32>
				}
				return Local_u8_Pressed_Key;
			}
		}
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
 3d8:	f6 01       	movw	r30, r12
 3da:	ec 58       	subi	r30, 0x8C	; 140
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	60 81       	ld	r22, Z
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
 3e8:	0f 5f       	subi	r16, 0xFF	; 255
 3ea:	04 30       	cpi	r16, 0x04	; 4
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <Kpd_U8GetPressedKey+0xa4>
 3ee:	bb cf       	rjmp	.-138    	; 0x366 <Kpd_U8GetPressedKey+0x1a>
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);

	}

	return Local_u8_Pressed_Key;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
}
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	08 95       	ret

00000406 <LCD_VidSendCommand>:
}
void LCD_VidIntegerToString_XY(u16 data,u8 row, u8 column)
{
	LCD_VidMoveCursor(row,column);
	LCD_VidIntegerToString(data);
}
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 414:	00 00       	nop
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 420:	00 00       	nop
 422:	c4 fb       	bst	r28, 4
 424:	44 27       	eor	r20, r20
 426:	40 f9       	bld	r20, 0
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 430:	c5 fb       	bst	r28, 5
 432:	44 27       	eor	r20, r20
 434:	40 f9       	bld	r20, 0
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 43e:	c6 fb       	bst	r28, 6
 440:	44 27       	eor	r20, r20
 442:	40 f9       	bld	r20, 0
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 44c:	4c 2f       	mov	r20, r28
 44e:	44 1f       	adc	r20, r20
 450:	44 27       	eor	r20, r20
 452:	44 1f       	adc	r20, r20
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 45c:	89 ef       	ldi	r24, 0xF9	; 249
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LCD_VidSendCommand+0x5a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_VidSendCommand+0x60>
 466:	00 00       	nop
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 472:	00 00       	nop
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 47e:	00 00       	nop
 480:	4c 2f       	mov	r20, r28
 482:	41 70       	andi	r20, 0x01	; 1
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 48c:	c1 fb       	bst	r28, 1
 48e:	44 27       	eor	r20, r20
 490:	40 f9       	bld	r20, 0
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 49a:	c2 fb       	bst	r28, 2
 49c:	44 27       	eor	r20, r20
 49e:	40 f9       	bld	r20, 0
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4a8:	c3 fb       	bst	r28, 3
 4aa:	44 27       	eor	r20, r20
 4ac:	40 f9       	bld	r20, 0
 4ae:	66 e0       	ldi	r22, 0x06	; 6
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4b6:	89 ef       	ldi	r24, 0xF9	; 249
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_VidSendCommand+0xb4>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_VidSendCommand+0xba>
 4c0:	00 00       	nop
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4cc:	00 00       	nop
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <LCD_VidInit>:
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4e6:	87 e8       	ldi	r24, 0x87	; 135
 4e8:	93 e1       	ldi	r25, 0x13	; 19
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_VidInit+0x18>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_VidInit+0x1e>
 4f0:	00 00       	nop
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	66 e0       	ldi	r22, 0x06	; 6
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 51a:	87 e8       	ldi	r24, 0x87	; 135
 51c:	93 e1       	ldi	r25, 0x13	; 19
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_VidInit+0x4c>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_VidInit+0x52>
 524:	00 00       	nop
 526:	83 e3       	ldi	r24, 0x33	; 51
 528:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 52c:	82 e3       	ldi	r24, 0x32	; 50
 52e:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 532:	88 e2       	ldi	r24, 0x28	; 40
 534:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 538:	8c e0       	ldi	r24, 0x0C	; 12
 53a:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 544:	08 95       	ret

00000546 <LCD_VidSendChar>:
 546:	cf 93       	push	r28
 548:	c8 2f       	mov	r28, r24
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 554:	00 00       	nop
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 560:	00 00       	nop
 562:	c4 fb       	bst	r28, 4
 564:	44 27       	eor	r20, r20
 566:	40 f9       	bld	r20, 0
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 570:	c5 fb       	bst	r28, 5
 572:	44 27       	eor	r20, r20
 574:	40 f9       	bld	r20, 0
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 57e:	c6 fb       	bst	r28, 6
 580:	44 27       	eor	r20, r20
 582:	40 f9       	bld	r20, 0
 584:	65 e0       	ldi	r22, 0x05	; 5
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 58c:	4c 2f       	mov	r20, r28
 58e:	44 1f       	adc	r20, r20
 590:	44 27       	eor	r20, r20
 592:	44 1f       	adc	r20, r20
 594:	66 e0       	ldi	r22, 0x06	; 6
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 59c:	89 ef       	ldi	r24, 0xF9	; 249
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_VidSendChar+0x5a>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_VidSendChar+0x60>
 5a6:	00 00       	nop
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5b2:	00 00       	nop
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5be:	00 00       	nop
 5c0:	4c 2f       	mov	r20, r28
 5c2:	41 70       	andi	r20, 0x01	; 1
 5c4:	63 e0       	ldi	r22, 0x03	; 3
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5cc:	c1 fb       	bst	r28, 1
 5ce:	44 27       	eor	r20, r20
 5d0:	40 f9       	bld	r20, 0
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5da:	c2 fb       	bst	r28, 2
 5dc:	44 27       	eor	r20, r20
 5de:	40 f9       	bld	r20, 0
 5e0:	65 e0       	ldi	r22, 0x05	; 5
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5e8:	c3 fb       	bst	r28, 3
 5ea:	44 27       	eor	r20, r20
 5ec:	40 f9       	bld	r20, 0
 5ee:	66 e0       	ldi	r22, 0x06	; 6
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5f6:	89 ef       	ldi	r24, 0xF9	; 249
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_VidSendChar+0xb4>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_VidSendChar+0xba>
 600:	00 00       	nop
 602:	40 e0       	ldi	r20, 0x00	; 0
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 60c:	00 00       	nop
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <LCD_VidSendString>:
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	8c 01       	movw	r16, r24
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	03 c0       	rjmp	.+6      	; 0x624 <LCD_VidSendString+0x12>
 61e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
 622:	cf 5f       	subi	r28, 0xFF	; 255
 624:	f8 01       	movw	r30, r16
 626:	ec 0f       	add	r30, r28
 628:	f1 1d       	adc	r31, r1
 62a:	80 81       	ld	r24, Z
 62c:	81 11       	cpse	r24, r1
 62e:	f7 cf       	rjmp	.-18     	; 0x61e <LCD_VidSendString+0xc>
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <LCD_VidIntegerToString>:
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	60 97       	sbiw	r28, 0x10	; 16
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	de bf       	out	0x3e, r29	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	cd bf       	out	0x3d, r28	; 61
 64c:	4a e0       	ldi	r20, 0x0A	; 10
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	be 01       	movw	r22, r28
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	0e 94 c8 06 	call	0xd90	; 0xd90 <itoa>
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 662:	60 96       	adiw	r28, 0x10	; 16
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <LCD_VidMoveCursor>:
 674:	88 23       	and	r24, r24
 676:	29 f0       	breq	.+10     	; 0x682 <LCD_VidMoveCursor+0xe>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	21 f4       	brne	.+8      	; 0x684 <LCD_VidMoveCursor+0x10>
 67c:	90 e4       	ldi	r25, 0x40	; 64
 67e:	96 0f       	add	r25, r22
 680:	01 c0       	rjmp	.+2      	; 0x684 <LCD_VidMoveCursor+0x10>
 682:	96 2f       	mov	r25, r22
 684:	89 2f       	mov	r24, r25
 686:	80 68       	ori	r24, 0x80	; 128
 688:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 68c:	08 95       	ret

0000068e <LCD_VidSendString_XY>:
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	86 2f       	mov	r24, r22
 696:	64 2f       	mov	r22, r20
 698:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_VidMoveCursor>
 69c:	ce 01       	movw	r24, r28
 69e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <LCD_VidClearScreen>:
void LCD_VidClearScreen()
{
	LCD_VidSendCommand(0x01);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 6ae:	08 95       	ret

000006b0 <LCD_VidSendFloat>:
}
void LCD_VidSendFloat(f32 data)
{
 6b0:	8f 92       	push	r8
 6b2:	9f 92       	push	r9
 6b4:	af 92       	push	r10
 6b6:	bf 92       	push	r11
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	4b 01       	movw	r8, r22
 6c6:	5c 01       	movw	r10, r24
	s16 _dot,dot_;
	_dot = data;
 6c8:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
 6cc:	6b 01       	movw	r12, r22
 6ce:	7c 01       	movw	r14, r24
	dot_ = (data- _dot)*1000;  //1000 For accuracy
 6d0:	07 2e       	mov	r0, r23
 6d2:	00 0c       	add	r0, r0
 6d4:	88 0b       	sbc	r24, r24
 6d6:	99 0b       	sbc	r25, r25
 6d8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 6dc:	9b 01       	movw	r18, r22
 6de:	ac 01       	movw	r20, r24
 6e0:	c5 01       	movw	r24, r10
 6e2:	b4 01       	movw	r22, r8
 6e4:	0e 94 8f 04 	call	0x91e	; 0x91e <__subsf3>
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	4a e7       	ldi	r20, 0x7A	; 122
 6ee:	54 e4       	ldi	r21, 0x44	; 68
 6f0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 6f4:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixsfsi>
 6f8:	4b 01       	movw	r8, r22
 6fa:	5c 01       	movw	r10, r24
 6fc:	eb 01       	movw	r28, r22
	LCD_VidIntegerToString(_dot);
 6fe:	c6 01       	movw	r24, r12
 700:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_VidIntegerToString>
	if(dot_>0)
 704:	1c 16       	cp	r1, r28
 706:	1d 06       	cpc	r1, r29
 708:	34 f4       	brge	.+12     	; 0x716 <LCD_VidSendFloat+0x66>
	{
		LCD_VidSendChar('.');
 70a:	8e e2       	ldi	r24, 0x2E	; 46
 70c:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
		LCD_VidIntegerToString(dot_);
 710:	c4 01       	movw	r24, r8
 712:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_VidIntegerToString>
	else
	{

	}

}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	bf 90       	pop	r11
 724:	af 90       	pop	r10
 726:	9f 90       	pop	r9
 728:	8f 90       	pop	r8
 72a:	08 95       	ret

0000072c <main>:
#include "KPD_interface.h"
#include "LCD_interface.h"

int main()
{
	LCD_VidInit();
 72c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VidInit>
	KPD_VidInit();
 730:	0e 94 55 01 	call	0x2aa	; 0x2aa <KPD_VidInit>
	LCD_VidSendString_XY("WELCOME", 0, 4);
 734:	44 e0       	ldi	r20, 0x04	; 4
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	88 e7       	ldi	r24, 0x78	; 120
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_VidSendString_XY>
	LCD_VidSendString_XY("CALCULATOR", 1, 3);
 740:	43 e0       	ldi	r20, 0x03	; 3
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	80 e8       	ldi	r24, 0x80	; 128
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_VidSendString_XY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74c:	83 ed       	ldi	r24, 0xD3	; 211
 74e:	90 e3       	ldi	r25, 0x30	; 48
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <main+0x24>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x2a>
 756:	00 00       	nop
	_delay_ms(50);
	LCD_VidClearScreen();
 758:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>

	u8 PressedKey,Operator = '\0';
	f32 Num1 = 0, Num2 = 0, Res;
 75c:	81 2c       	mov	r8, r1
 75e:	91 2c       	mov	r9, r1
 760:	54 01       	movw	r10, r8
 762:	00 e0       	ldi	r16, 0x00	; 0
 764:	10 e0       	ldi	r17, 0x00	; 0
 766:	d0 e0       	ldi	r29, 0x00	; 0
 768:	71 2c       	mov	r7, r1
	LCD_VidSendString_XY("WELCOME", 0, 4);
	LCD_VidSendString_XY("CALCULATOR", 1, 3);
	_delay_ms(50);
	LCD_VidClearScreen();

	u8 PressedKey,Operator = '\0';
 76a:	e1 2c       	mov	r14, r1
	f32 Num1 = 0, Num2 = 0, Res;

	while (1)
	{
		PressedKey = Kpd_U8GetPressedKey();
 76c:	0e 94 a6 01 	call	0x34c	; 0x34c <Kpd_U8GetPressedKey>
 770:	c8 2f       	mov	r28, r24

		if (PressedKey >= '0' && PressedKey <= '9')
 772:	80 ed       	ldi	r24, 0xD0	; 208
 774:	8c 0f       	add	r24, r28
 776:	8a 30       	cpi	r24, 0x0A	; 10
 778:	08 f0       	brcs	.+2      	; 0x77c <main+0x50>
 77a:	43 c0       	rjmp	.+134    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			LCD_VidSendChar(PressedKey);
 77c:	8c 2f       	mov	r24, r28
 77e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			if (Operator == '\0')
 782:	e1 10       	cpse	r14, r1
 784:	21 c0       	rjmp	.+66     	; 0x7c8 <main+0x9c>
			{
				Num1 = Num1 * 10 + (PressedKey - '0');
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	40 e2       	ldi	r20, 0x20	; 32
 78c:	51 e4       	ldi	r21, 0x41	; 65
 78e:	60 2f       	mov	r22, r16
 790:	71 2f       	mov	r23, r17
 792:	8d 2f       	mov	r24, r29
 794:	97 2d       	mov	r25, r7
 796:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 79a:	2b 01       	movw	r4, r22
 79c:	3c 01       	movw	r6, r24
 79e:	6c 2f       	mov	r22, r28
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	60 53       	subi	r22, 0x30	; 48
 7a4:	71 09       	sbc	r23, r1
 7a6:	07 2e       	mov	r0, r23
 7a8:	00 0c       	add	r0, r0
 7aa:	88 0b       	sbc	r24, r24
 7ac:	99 0b       	sbc	r25, r25
 7ae:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
 7b6:	c3 01       	movw	r24, r6
 7b8:	b2 01       	movw	r22, r4
 7ba:	0e 94 90 04 	call	0x920	; 0x920 <__addsf3>
 7be:	06 2f       	mov	r16, r22
 7c0:	17 2f       	mov	r17, r23
 7c2:	d8 2f       	mov	r29, r24
 7c4:	79 2e       	mov	r7, r25
 7c6:	d2 cf       	rjmp	.-92     	; 0x76c <main+0x40>
			}
			else
			{
				Num2 = Num2 * 10 + (PressedKey - '0');
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	40 e2       	ldi	r20, 0x20	; 32
 7ce:	51 e4       	ldi	r21, 0x41	; 65
 7d0:	c5 01       	movw	r24, r10
 7d2:	b4 01       	movw	r22, r8
 7d4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 7d8:	4b 01       	movw	r8, r22
 7da:	5c 01       	movw	r10, r24
 7dc:	6c 2f       	mov	r22, r28
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 53       	subi	r22, 0x30	; 48
 7e2:	71 09       	sbc	r23, r1
 7e4:	07 2e       	mov	r0, r23
 7e6:	00 0c       	add	r0, r0
 7e8:	88 0b       	sbc	r24, r24
 7ea:	99 0b       	sbc	r25, r25
 7ec:	0e 94 ab 05 	call	0xb56	; 0xb56 <__floatsisf>
 7f0:	9b 01       	movw	r18, r22
 7f2:	ac 01       	movw	r20, r24
 7f4:	c5 01       	movw	r24, r10
 7f6:	b4 01       	movw	r22, r8
 7f8:	0e 94 90 04 	call	0x920	; 0x920 <__addsf3>
 7fc:	4b 01       	movw	r8, r22
 7fe:	5c 01       	movw	r10, r24
 800:	b5 cf       	rjmp	.-150    	; 0x76c <main+0x40>
			}
		}
		else if (PressedKey == '+' || PressedKey == '-' || PressedKey == '*' || PressedKey == '/')
 802:	cb 32       	cpi	r28, 0x2B	; 43
 804:	31 f0       	breq	.+12     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 806:	cd 32       	cpi	r28, 0x2D	; 45
 808:	21 f0       	breq	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	ca 32       	cpi	r28, 0x2A	; 42
 80c:	11 f0       	breq	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	cf 32       	cpi	r28, 0x2F	; 47
 810:	29 f4       	brne	.+10     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		{
			LCD_VidSendChar(PressedKey);
 812:	8c 2f       	mov	r24, r28
 814:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			Operator = PressedKey;
 818:	ec 2e       	mov	r14, r28
 81a:	a8 cf       	rjmp	.-176    	; 0x76c <main+0x40>
		}
		else if (PressedKey == '=')
 81c:	cd 33       	cpi	r28, 0x3D	; 61
 81e:	09 f0       	breq	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 820:	70 c0       	rjmp	.+224    	; 0x902 <__stack+0xa3>
		{
			LCD_VidSendChar(PressedKey);
 822:	8c 2f       	mov	r24, r28
 824:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			switch (Operator)
 828:	9b e2       	ldi	r25, 0x2B	; 43
 82a:	e9 16       	cp	r14, r25
 82c:	69 f0       	breq	.+26     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 82e:	9e 15       	cp	r25, r14
 830:	20 f0       	brcs	.+8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 832:	8a e2       	ldi	r24, 0x2A	; 42
 834:	e8 16       	cp	r14, r24
 836:	11 f1       	breq	.+68     	; 0x87c <__stack+0x1d>
 838:	4b c0       	rjmp	.+150    	; 0x8d0 <__stack+0x71>
 83a:	9d e2       	ldi	r25, 0x2D	; 45
 83c:	e9 16       	cp	r14, r25
 83e:	89 f0       	breq	.+34     	; 0x862 <__stack+0x3>
 840:	8f e2       	ldi	r24, 0x2F	; 47
 842:	e8 16       	cp	r14, r24
 844:	41 f1       	breq	.+80     	; 0x896 <__stack+0x37>
 846:	44 c0       	rjmp	.+136    	; 0x8d0 <__stack+0x71>
			{
				case '+':
					Res = Num1 + Num2;
 848:	a5 01       	movw	r20, r10
 84a:	94 01       	movw	r18, r8
 84c:	60 2f       	mov	r22, r16
 84e:	71 2f       	mov	r23, r17
 850:	8d 2f       	mov	r24, r29
 852:	97 2d       	mov	r25, r7
 854:	0e 94 90 04 	call	0x920	; 0x920 <__addsf3>
 858:	06 2f       	mov	r16, r22
 85a:	17 2f       	mov	r17, r23
 85c:	d8 2f       	mov	r29, r24
 85e:	79 2e       	mov	r7, r25
					break;
 860:	41 c0       	rjmp	.+130    	; 0x8e4 <__stack+0x85>
				case '-':
					Res = Num1 - Num2;
 862:	a5 01       	movw	r20, r10
 864:	94 01       	movw	r18, r8
 866:	60 2f       	mov	r22, r16
 868:	71 2f       	mov	r23, r17
 86a:	8d 2f       	mov	r24, r29
 86c:	97 2d       	mov	r25, r7
 86e:	0e 94 8f 04 	call	0x91e	; 0x91e <__subsf3>
 872:	06 2f       	mov	r16, r22
 874:	17 2f       	mov	r17, r23
 876:	d8 2f       	mov	r29, r24
 878:	79 2e       	mov	r7, r25
					break;
 87a:	34 c0       	rjmp	.+104    	; 0x8e4 <__stack+0x85>
				case '*':
					Res = Num1 * Num2;
 87c:	a5 01       	movw	r20, r10
 87e:	94 01       	movw	r18, r8
 880:	60 2f       	mov	r22, r16
 882:	71 2f       	mov	r23, r17
 884:	8d 2f       	mov	r24, r29
 886:	97 2d       	mov	r25, r7
 888:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 88c:	06 2f       	mov	r16, r22
 88e:	17 2f       	mov	r17, r23
 890:	d8 2f       	mov	r29, r24
 892:	79 2e       	mov	r7, r25
					break;
 894:	27 c0       	rjmp	.+78     	; 0x8e4 <__stack+0x85>
				case '/':
					if (Num2 != 0)
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	a9 01       	movw	r20, r18
 89c:	c5 01       	movw	r24, r10
 89e:	b4 01       	movw	r22, r8
 8a0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__cmpsf2>
 8a4:	88 23       	and	r24, r24
 8a6:	69 f0       	breq	.+26     	; 0x8c2 <__stack+0x63>
					{
						Res = Num1 / Num2;
 8a8:	a5 01       	movw	r20, r10
 8aa:	94 01       	movw	r18, r8
 8ac:	60 2f       	mov	r22, r16
 8ae:	71 2f       	mov	r23, r17
 8b0:	8d 2f       	mov	r24, r29
 8b2:	97 2d       	mov	r25, r7
 8b4:	0e 94 01 05 	call	0xa02	; 0xa02 <__divsf3>
 8b8:	06 2f       	mov	r16, r22
 8ba:	17 2f       	mov	r17, r23
 8bc:	d8 2f       	mov	r29, r24
 8be:	79 2e       	mov	r7, r25
					{
						LCD_VidClearScreen();
						LCD_VidSendString("Division By Zero");
						continue;
					}
					break;
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__stack+0x85>
					{
						Res = Num1 / Num2;
					}
					else
					{
						LCD_VidClearScreen();
 8c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
						LCD_VidSendString("Division By Zero");
 8c6:	8b e8       	ldi	r24, 0x8B	; 139
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
						continue;
 8ce:	4e cf       	rjmp	.-356    	; 0x76c <main+0x40>
					}
					break;
				default:
					LCD_VidClearScreen();
 8d0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
					LCD_VidSendString("Invalid Operator!");
 8d4:	8c e9       	ldi	r24, 0x9C	; 156
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 8dc:	0d 2d       	mov	r16, r13
 8de:	1c 2d       	mov	r17, r12
 8e0:	df 2d       	mov	r29, r15
 8e2:	73 2c       	mov	r7, r3
			}

			LCD_VidSendFloat(Res);
 8e4:	60 2f       	mov	r22, r16
 8e6:	71 2f       	mov	r23, r17
 8e8:	8d 2f       	mov	r24, r29
 8ea:	97 2d       	mov	r25, r7
 8ec:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_VidSendFloat>
 8f0:	d0 2e       	mov	r13, r16
 8f2:	c1 2e       	mov	r12, r17
 8f4:	fd 2e       	mov	r15, r29
 8f6:	37 2c       	mov	r3, r7
			Num1 = Res;
			Num2 = 0;
 8f8:	81 2c       	mov	r8, r1
 8fa:	91 2c       	mov	r9, r1
 8fc:	54 01       	movw	r10, r8
			Operator = '\0';
 8fe:	e1 2c       	mov	r14, r1
 900:	35 cf       	rjmp	.-406    	; 0x76c <main+0x40>
		}
		else if (PressedKey == 'C')
 902:	c3 34       	cpi	r28, 0x43	; 67
 904:	09 f0       	breq	.+2      	; 0x908 <__stack+0xa9>
 906:	32 cf       	rjmp	.-412    	; 0x76c <main+0x40>
		{
			LCD_VidClearScreen();
 908:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
			Num1 = 0;
			Num2 = 0;
 90c:	81 2c       	mov	r8, r1
 90e:	91 2c       	mov	r9, r1
 910:	54 01       	movw	r10, r8
			Operator = '\0';
		}
		else if (PressedKey == 'C')
		{
			LCD_VidClearScreen();
			Num1 = 0;
 912:	00 e0       	ldi	r16, 0x00	; 0
 914:	10 e0       	ldi	r17, 0x00	; 0
 916:	d0 e0       	ldi	r29, 0x00	; 0
 918:	71 2c       	mov	r7, r1
			Num2 = 0;
			Operator = '\0';
 91a:	e1 2c       	mov	r14, r1
 91c:	27 cf       	rjmp	.-434    	; 0x76c <main+0x40>

0000091e <__subsf3>:
 91e:	50 58       	subi	r21, 0x80	; 128

00000920 <__addsf3>:
 920:	bb 27       	eor	r27, r27
 922:	aa 27       	eor	r26, r26
 924:	0e 94 a7 04 	call	0x94e	; 0x94e <__addsf3x>
 928:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_round>
 92c:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_pscA>
 930:	38 f0       	brcs	.+14     	; 0x940 <__addsf3+0x20>
 932:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscB>
 936:	20 f0       	brcs	.+8      	; 0x940 <__addsf3+0x20>
 938:	39 f4       	brne	.+14     	; 0x948 <__addsf3+0x28>
 93a:	9f 3f       	cpi	r25, 0xFF	; 255
 93c:	19 f4       	brne	.+6      	; 0x944 <__addsf3+0x24>
 93e:	26 f4       	brtc	.+8      	; 0x948 <__addsf3+0x28>
 940:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_nan>
 944:	0e f4       	brtc	.+2      	; 0x948 <__addsf3+0x28>
 946:	e0 95       	com	r30
 948:	e7 fb       	bst	r30, 7
 94a:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_inf>

0000094e <__addsf3x>:
 94e:	e9 2f       	mov	r30, r25
 950:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_split3>
 954:	58 f3       	brcs	.-42     	; 0x92c <__addsf3+0xc>
 956:	ba 17       	cp	r27, r26
 958:	62 07       	cpc	r22, r18
 95a:	73 07       	cpc	r23, r19
 95c:	84 07       	cpc	r24, r20
 95e:	95 07       	cpc	r25, r21
 960:	20 f0       	brcs	.+8      	; 0x96a <__addsf3x+0x1c>
 962:	79 f4       	brne	.+30     	; 0x982 <__addsf3x+0x34>
 964:	a6 f5       	brtc	.+104    	; 0x9ce <__addsf3x+0x80>
 966:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_zero>
 96a:	0e f4       	brtc	.+2      	; 0x96e <__addsf3x+0x20>
 96c:	e0 95       	com	r30
 96e:	0b 2e       	mov	r0, r27
 970:	ba 2f       	mov	r27, r26
 972:	a0 2d       	mov	r26, r0
 974:	0b 01       	movw	r0, r22
 976:	b9 01       	movw	r22, r18
 978:	90 01       	movw	r18, r0
 97a:	0c 01       	movw	r0, r24
 97c:	ca 01       	movw	r24, r20
 97e:	a0 01       	movw	r20, r0
 980:	11 24       	eor	r1, r1
 982:	ff 27       	eor	r31, r31
 984:	59 1b       	sub	r21, r25
 986:	99 f0       	breq	.+38     	; 0x9ae <__addsf3x+0x60>
 988:	59 3f       	cpi	r21, 0xF9	; 249
 98a:	50 f4       	brcc	.+20     	; 0x9a0 <__addsf3x+0x52>
 98c:	50 3e       	cpi	r21, 0xE0	; 224
 98e:	68 f1       	brcs	.+90     	; 0x9ea <__addsf3x+0x9c>
 990:	1a 16       	cp	r1, r26
 992:	f0 40       	sbci	r31, 0x00	; 0
 994:	a2 2f       	mov	r26, r18
 996:	23 2f       	mov	r18, r19
 998:	34 2f       	mov	r19, r20
 99a:	44 27       	eor	r20, r20
 99c:	58 5f       	subi	r21, 0xF8	; 248
 99e:	f3 cf       	rjmp	.-26     	; 0x986 <__addsf3x+0x38>
 9a0:	46 95       	lsr	r20
 9a2:	37 95       	ror	r19
 9a4:	27 95       	ror	r18
 9a6:	a7 95       	ror	r26
 9a8:	f0 40       	sbci	r31, 0x00	; 0
 9aa:	53 95       	inc	r21
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__addsf3x+0x52>
 9ae:	7e f4       	brtc	.+30     	; 0x9ce <__addsf3x+0x80>
 9b0:	1f 16       	cp	r1, r31
 9b2:	ba 0b       	sbc	r27, r26
 9b4:	62 0b       	sbc	r22, r18
 9b6:	73 0b       	sbc	r23, r19
 9b8:	84 0b       	sbc	r24, r20
 9ba:	ba f0       	brmi	.+46     	; 0x9ea <__addsf3x+0x9c>
 9bc:	91 50       	subi	r25, 0x01	; 1
 9be:	a1 f0       	breq	.+40     	; 0x9e8 <__addsf3x+0x9a>
 9c0:	ff 0f       	add	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	c2 f7       	brpl	.-16     	; 0x9bc <__addsf3x+0x6e>
 9cc:	0e c0       	rjmp	.+28     	; 0x9ea <__addsf3x+0x9c>
 9ce:	ba 0f       	add	r27, r26
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 1f       	adc	r23, r19
 9d4:	84 1f       	adc	r24, r20
 9d6:	48 f4       	brcc	.+18     	; 0x9ea <__addsf3x+0x9c>
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	9e 3f       	cpi	r25, 0xFE	; 254
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <__addsf3x+0x9a>
 9e6:	b0 cf       	rjmp	.-160    	; 0x948 <__addsf3+0x28>
 9e8:	93 95       	inc	r25
 9ea:	88 0f       	add	r24, r24
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__addsf3x+0xa2>
 9ee:	99 27       	eor	r25, r25
 9f0:	ee 0f       	add	r30, r30
 9f2:	97 95       	ror	r25
 9f4:	87 95       	ror	r24
 9f6:	08 95       	ret

000009f8 <__cmpsf2>:
 9f8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_cmp>
 9fc:	08 f4       	brcc	.+2      	; 0xa00 <__cmpsf2+0x8>
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	08 95       	ret

00000a02 <__divsf3>:
 a02:	0e 94 15 05 	call	0xa2a	; 0xa2a <__divsf3x>
 a06:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_round>
 a0a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscB>
 a0e:	58 f0       	brcs	.+22     	; 0xa26 <__divsf3+0x24>
 a10:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_pscA>
 a14:	40 f0       	brcs	.+16     	; 0xa26 <__divsf3+0x24>
 a16:	29 f4       	brne	.+10     	; 0xa22 <__divsf3+0x20>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	29 f0       	breq	.+10     	; 0xa26 <__divsf3+0x24>
 a1c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_inf>
 a20:	51 11       	cpse	r21, r1
 a22:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_szero>
 a26:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_nan>

00000a2a <__divsf3x>:
 a2a:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_split3>
 a2e:	68 f3       	brcs	.-38     	; 0xa0a <__divsf3+0x8>

00000a30 <__divsf3_pse>:
 a30:	99 23       	and	r25, r25
 a32:	b1 f3       	breq	.-20     	; 0xa20 <__divsf3+0x1e>
 a34:	55 23       	and	r21, r21
 a36:	91 f3       	breq	.-28     	; 0xa1c <__divsf3+0x1a>
 a38:	95 1b       	sub	r25, r21
 a3a:	55 0b       	sbc	r21, r21
 a3c:	bb 27       	eor	r27, r27
 a3e:	aa 27       	eor	r26, r26
 a40:	62 17       	cp	r22, r18
 a42:	73 07       	cpc	r23, r19
 a44:	84 07       	cpc	r24, r20
 a46:	38 f0       	brcs	.+14     	; 0xa56 <__divsf3_pse+0x26>
 a48:	9f 5f       	subi	r25, 0xFF	; 255
 a4a:	5f 4f       	sbci	r21, 0xFF	; 255
 a4c:	22 0f       	add	r18, r18
 a4e:	33 1f       	adc	r19, r19
 a50:	44 1f       	adc	r20, r20
 a52:	aa 1f       	adc	r26, r26
 a54:	a9 f3       	breq	.-22     	; 0xa40 <__divsf3_pse+0x10>
 a56:	35 d0       	rcall	.+106    	; 0xac2 <__divsf3_pse+0x92>
 a58:	0e 2e       	mov	r0, r30
 a5a:	3a f0       	brmi	.+14     	; 0xa6a <__divsf3_pse+0x3a>
 a5c:	e0 e8       	ldi	r30, 0x80	; 128
 a5e:	32 d0       	rcall	.+100    	; 0xac4 <__divsf3_pse+0x94>
 a60:	91 50       	subi	r25, 0x01	; 1
 a62:	50 40       	sbci	r21, 0x00	; 0
 a64:	e6 95       	lsr	r30
 a66:	00 1c       	adc	r0, r0
 a68:	ca f7       	brpl	.-14     	; 0xa5c <__divsf3_pse+0x2c>
 a6a:	2b d0       	rcall	.+86     	; 0xac2 <__divsf3_pse+0x92>
 a6c:	fe 2f       	mov	r31, r30
 a6e:	29 d0       	rcall	.+82     	; 0xac2 <__divsf3_pse+0x92>
 a70:	66 0f       	add	r22, r22
 a72:	77 1f       	adc	r23, r23
 a74:	88 1f       	adc	r24, r24
 a76:	bb 1f       	adc	r27, r27
 a78:	26 17       	cp	r18, r22
 a7a:	37 07       	cpc	r19, r23
 a7c:	48 07       	cpc	r20, r24
 a7e:	ab 07       	cpc	r26, r27
 a80:	b0 e8       	ldi	r27, 0x80	; 128
 a82:	09 f0       	breq	.+2      	; 0xa86 <__divsf3_pse+0x56>
 a84:	bb 0b       	sbc	r27, r27
 a86:	80 2d       	mov	r24, r0
 a88:	bf 01       	movw	r22, r30
 a8a:	ff 27       	eor	r31, r31
 a8c:	93 58       	subi	r25, 0x83	; 131
 a8e:	5f 4f       	sbci	r21, 0xFF	; 255
 a90:	3a f0       	brmi	.+14     	; 0xaa0 <__divsf3_pse+0x70>
 a92:	9e 3f       	cpi	r25, 0xFE	; 254
 a94:	51 05       	cpc	r21, r1
 a96:	78 f0       	brcs	.+30     	; 0xab6 <__divsf3_pse+0x86>
 a98:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_inf>
 a9c:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_szero>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	e4 f3       	brlt	.-8      	; 0xa9c <__divsf3_pse+0x6c>
 aa4:	98 3e       	cpi	r25, 0xE8	; 232
 aa6:	d4 f3       	brlt	.-12     	; 0xa9c <__divsf3_pse+0x6c>
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	f7 95       	ror	r31
 ab2:	9f 5f       	subi	r25, 0xFF	; 255
 ab4:	c9 f7       	brne	.-14     	; 0xaa8 <__divsf3_pse+0x78>
 ab6:	88 0f       	add	r24, r24
 ab8:	91 1d       	adc	r25, r1
 aba:	96 95       	lsr	r25
 abc:	87 95       	ror	r24
 abe:	97 f9       	bld	r25, 7
 ac0:	08 95       	ret
 ac2:	e1 e0       	ldi	r30, 0x01	; 1
 ac4:	66 0f       	add	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	bb 1f       	adc	r27, r27
 acc:	62 17       	cp	r22, r18
 ace:	73 07       	cpc	r23, r19
 ad0:	84 07       	cpc	r24, r20
 ad2:	ba 07       	cpc	r27, r26
 ad4:	20 f0       	brcs	.+8      	; 0xade <__divsf3_pse+0xae>
 ad6:	62 1b       	sub	r22, r18
 ad8:	73 0b       	sbc	r23, r19
 ada:	84 0b       	sbc	r24, r20
 adc:	ba 0b       	sbc	r27, r26
 ade:	ee 1f       	adc	r30, r30
 ae0:	88 f7       	brcc	.-30     	; 0xac4 <__divsf3_pse+0x94>
 ae2:	e0 95       	com	r30
 ae4:	08 95       	ret

00000ae6 <__fixsfsi>:
 ae6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixunssfsi>
 aea:	68 94       	set
 aec:	b1 11       	cpse	r27, r1
 aee:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_szero>
 af2:	08 95       	ret

00000af4 <__fixunssfsi>:
 af4:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_splitA>
 af8:	88 f0       	brcs	.+34     	; 0xb1c <__fixunssfsi+0x28>
 afa:	9f 57       	subi	r25, 0x7F	; 127
 afc:	98 f0       	brcs	.+38     	; 0xb24 <__fixunssfsi+0x30>
 afe:	b9 2f       	mov	r27, r25
 b00:	99 27       	eor	r25, r25
 b02:	b7 51       	subi	r27, 0x17	; 23
 b04:	b0 f0       	brcs	.+44     	; 0xb32 <__fixunssfsi+0x3e>
 b06:	e1 f0       	breq	.+56     	; 0xb40 <__fixunssfsi+0x4c>
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	1a f0       	brmi	.+6      	; 0xb18 <__fixunssfsi+0x24>
 b12:	ba 95       	dec	r27
 b14:	c9 f7       	brne	.-14     	; 0xb08 <__fixunssfsi+0x14>
 b16:	14 c0       	rjmp	.+40     	; 0xb40 <__fixunssfsi+0x4c>
 b18:	b1 30       	cpi	r27, 0x01	; 1
 b1a:	91 f0       	breq	.+36     	; 0xb40 <__fixunssfsi+0x4c>
 b1c:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_zero>
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	08 95       	ret
 b24:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__fp_zero>
 b28:	67 2f       	mov	r22, r23
 b2a:	78 2f       	mov	r23, r24
 b2c:	88 27       	eor	r24, r24
 b2e:	b8 5f       	subi	r27, 0xF8	; 248
 b30:	39 f0       	breq	.+14     	; 0xb40 <__fixunssfsi+0x4c>
 b32:	b9 3f       	cpi	r27, 0xF9	; 249
 b34:	cc f3       	brlt	.-14     	; 0xb28 <__fixunssfsi+0x34>
 b36:	86 95       	lsr	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b3 95       	inc	r27
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <__fixunssfsi+0x42>
 b40:	3e f4       	brtc	.+14     	; 0xb50 <__fixunssfsi+0x5c>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <__floatunsisf>:
 b52:	e8 94       	clt
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <__floatsisf+0x12>

00000b56 <__floatsisf>:
 b56:	97 fb       	bst	r25, 7
 b58:	3e f4       	brtc	.+14     	; 0xb68 <__floatsisf+0x12>
 b5a:	90 95       	com	r25
 b5c:	80 95       	com	r24
 b5e:	70 95       	com	r23
 b60:	61 95       	neg	r22
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	99 23       	and	r25, r25
 b6a:	a9 f0       	breq	.+42     	; 0xb96 <__floatsisf+0x40>
 b6c:	f9 2f       	mov	r31, r25
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	bb 27       	eor	r27, r27
 b72:	93 95       	inc	r25
 b74:	f6 95       	lsr	r31
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	f1 11       	cpse	r31, r1
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <__floatsisf+0x1c>
 b82:	fa f4       	brpl	.+62     	; 0xbc2 <__floatsisf+0x6c>
 b84:	bb 0f       	add	r27, r27
 b86:	11 f4       	brne	.+4      	; 0xb8c <__floatsisf+0x36>
 b88:	60 ff       	sbrs	r22, 0
 b8a:	1b c0       	rjmp	.+54     	; 0xbc2 <__floatsisf+0x6c>
 b8c:	6f 5f       	subi	r22, 0xFF	; 255
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <__floatsisf+0x6c>
 b96:	88 23       	and	r24, r24
 b98:	11 f0       	breq	.+4      	; 0xb9e <__floatsisf+0x48>
 b9a:	96 e9       	ldi	r25, 0x96	; 150
 b9c:	11 c0       	rjmp	.+34     	; 0xbc0 <__floatsisf+0x6a>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatsisf+0x54>
 ba2:	9e e8       	ldi	r25, 0x8E	; 142
 ba4:	87 2f       	mov	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__floatsisf+0x5e>
 baa:	66 23       	and	r22, r22
 bac:	71 f0       	breq	.+28     	; 0xbca <__floatsisf+0x74>
 bae:	96 e8       	ldi	r25, 0x86	; 134
 bb0:	86 2f       	mov	r24, r22
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	60 e0       	ldi	r22, 0x00	; 0
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <__floatsisf+0x6c>
 bb8:	9a 95       	dec	r25
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <__floatsisf+0x62>
 bc2:	88 0f       	add	r24, r24
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__fp_cmp>:
 bcc:	99 0f       	add	r25, r25
 bce:	00 08       	sbc	r0, r0
 bd0:	55 0f       	add	r21, r21
 bd2:	aa 0b       	sbc	r26, r26
 bd4:	e0 e8       	ldi	r30, 0x80	; 128
 bd6:	fe ef       	ldi	r31, 0xFE	; 254
 bd8:	16 16       	cp	r1, r22
 bda:	17 06       	cpc	r1, r23
 bdc:	e8 07       	cpc	r30, r24
 bde:	f9 07       	cpc	r31, r25
 be0:	c0 f0       	brcs	.+48     	; 0xc12 <__fp_cmp+0x46>
 be2:	12 16       	cp	r1, r18
 be4:	13 06       	cpc	r1, r19
 be6:	e4 07       	cpc	r30, r20
 be8:	f5 07       	cpc	r31, r21
 bea:	98 f0       	brcs	.+38     	; 0xc12 <__fp_cmp+0x46>
 bec:	62 1b       	sub	r22, r18
 bee:	73 0b       	sbc	r23, r19
 bf0:	84 0b       	sbc	r24, r20
 bf2:	95 0b       	sbc	r25, r21
 bf4:	39 f4       	brne	.+14     	; 0xc04 <__fp_cmp+0x38>
 bf6:	0a 26       	eor	r0, r26
 bf8:	61 f0       	breq	.+24     	; 0xc12 <__fp_cmp+0x46>
 bfa:	23 2b       	or	r18, r19
 bfc:	24 2b       	or	r18, r20
 bfe:	25 2b       	or	r18, r21
 c00:	21 f4       	brne	.+8      	; 0xc0a <__fp_cmp+0x3e>
 c02:	08 95       	ret
 c04:	0a 26       	eor	r0, r26
 c06:	09 f4       	brne	.+2      	; 0xc0a <__fp_cmp+0x3e>
 c08:	a1 40       	sbci	r26, 0x01	; 1
 c0a:	a6 95       	lsr	r26
 c0c:	8f ef       	ldi	r24, 0xFF	; 255
 c0e:	81 1d       	adc	r24, r1
 c10:	81 1d       	adc	r24, r1
 c12:	08 95       	ret

00000c14 <__fp_inf>:
 c14:	97 f9       	bld	r25, 7
 c16:	9f 67       	ori	r25, 0x7F	; 127
 c18:	80 e8       	ldi	r24, 0x80	; 128
 c1a:	70 e0       	ldi	r23, 0x00	; 0
 c1c:	60 e0       	ldi	r22, 0x00	; 0
 c1e:	08 95       	ret

00000c20 <__fp_nan>:
 c20:	9f ef       	ldi	r25, 0xFF	; 255
 c22:	80 ec       	ldi	r24, 0xC0	; 192
 c24:	08 95       	ret

00000c26 <__fp_pscA>:
 c26:	00 24       	eor	r0, r0
 c28:	0a 94       	dec	r0
 c2a:	16 16       	cp	r1, r22
 c2c:	17 06       	cpc	r1, r23
 c2e:	18 06       	cpc	r1, r24
 c30:	09 06       	cpc	r0, r25
 c32:	08 95       	ret

00000c34 <__fp_pscB>:
 c34:	00 24       	eor	r0, r0
 c36:	0a 94       	dec	r0
 c38:	12 16       	cp	r1, r18
 c3a:	13 06       	cpc	r1, r19
 c3c:	14 06       	cpc	r1, r20
 c3e:	05 06       	cpc	r0, r21
 c40:	08 95       	ret

00000c42 <__fp_round>:
 c42:	09 2e       	mov	r0, r25
 c44:	03 94       	inc	r0
 c46:	00 0c       	add	r0, r0
 c48:	11 f4       	brne	.+4      	; 0xc4e <__fp_round+0xc>
 c4a:	88 23       	and	r24, r24
 c4c:	52 f0       	brmi	.+20     	; 0xc62 <__fp_round+0x20>
 c4e:	bb 0f       	add	r27, r27
 c50:	40 f4       	brcc	.+16     	; 0xc62 <__fp_round+0x20>
 c52:	bf 2b       	or	r27, r31
 c54:	11 f4       	brne	.+4      	; 0xc5a <__fp_round+0x18>
 c56:	60 ff       	sbrs	r22, 0
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <__fp_round+0x20>
 c5a:	6f 5f       	subi	r22, 0xFF	; 255
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255
 c5e:	8f 4f       	sbci	r24, 0xFF	; 255
 c60:	9f 4f       	sbci	r25, 0xFF	; 255
 c62:	08 95       	ret

00000c64 <__fp_split3>:
 c64:	57 fd       	sbrc	r21, 7
 c66:	90 58       	subi	r25, 0x80	; 128
 c68:	44 0f       	add	r20, r20
 c6a:	55 1f       	adc	r21, r21
 c6c:	59 f0       	breq	.+22     	; 0xc84 <__fp_splitA+0x10>
 c6e:	5f 3f       	cpi	r21, 0xFF	; 255
 c70:	71 f0       	breq	.+28     	; 0xc8e <__fp_splitA+0x1a>
 c72:	47 95       	ror	r20

00000c74 <__fp_splitA>:
 c74:	88 0f       	add	r24, r24
 c76:	97 fb       	bst	r25, 7
 c78:	99 1f       	adc	r25, r25
 c7a:	61 f0       	breq	.+24     	; 0xc94 <__fp_splitA+0x20>
 c7c:	9f 3f       	cpi	r25, 0xFF	; 255
 c7e:	79 f0       	breq	.+30     	; 0xc9e <__fp_splitA+0x2a>
 c80:	87 95       	ror	r24
 c82:	08 95       	ret
 c84:	12 16       	cp	r1, r18
 c86:	13 06       	cpc	r1, r19
 c88:	14 06       	cpc	r1, r20
 c8a:	55 1f       	adc	r21, r21
 c8c:	f2 cf       	rjmp	.-28     	; 0xc72 <__fp_split3+0xe>
 c8e:	46 95       	lsr	r20
 c90:	f1 df       	rcall	.-30     	; 0xc74 <__fp_splitA>
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <__fp_splitA+0x30>
 c94:	16 16       	cp	r1, r22
 c96:	17 06       	cpc	r1, r23
 c98:	18 06       	cpc	r1, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	f1 cf       	rjmp	.-30     	; 0xc80 <__fp_splitA+0xc>
 c9e:	86 95       	lsr	r24
 ca0:	71 05       	cpc	r23, r1
 ca2:	61 05       	cpc	r22, r1
 ca4:	08 94       	sec
 ca6:	08 95       	ret

00000ca8 <__fp_zero>:
 ca8:	e8 94       	clt

00000caa <__fp_szero>:
 caa:	bb 27       	eor	r27, r27
 cac:	66 27       	eor	r22, r22
 cae:	77 27       	eor	r23, r23
 cb0:	cb 01       	movw	r24, r22
 cb2:	97 f9       	bld	r25, 7
 cb4:	08 95       	ret

00000cb6 <__mulsf3>:
 cb6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3x>
 cba:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_round>
 cbe:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_pscA>
 cc2:	38 f0       	brcs	.+14     	; 0xcd2 <__mulsf3+0x1c>
 cc4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscB>
 cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__mulsf3+0x1c>
 cca:	95 23       	and	r25, r21
 ccc:	11 f0       	breq	.+4      	; 0xcd2 <__mulsf3+0x1c>
 cce:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_inf>
 cd2:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_nan>
 cd6:	11 24       	eor	r1, r1
 cd8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_szero>

00000cdc <__mulsf3x>:
 cdc:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_split3>
 ce0:	70 f3       	brcs	.-36     	; 0xcbe <__mulsf3+0x8>

00000ce2 <__mulsf3_pse>:
 ce2:	95 9f       	mul	r25, r21
 ce4:	c1 f3       	breq	.-16     	; 0xcd6 <__mulsf3+0x20>
 ce6:	95 0f       	add	r25, r21
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	55 1f       	adc	r21, r21
 cec:	62 9f       	mul	r22, r18
 cee:	f0 01       	movw	r30, r0
 cf0:	72 9f       	mul	r23, r18
 cf2:	bb 27       	eor	r27, r27
 cf4:	f0 0d       	add	r31, r0
 cf6:	b1 1d       	adc	r27, r1
 cf8:	63 9f       	mul	r22, r19
 cfa:	aa 27       	eor	r26, r26
 cfc:	f0 0d       	add	r31, r0
 cfe:	b1 1d       	adc	r27, r1
 d00:	aa 1f       	adc	r26, r26
 d02:	64 9f       	mul	r22, r20
 d04:	66 27       	eor	r22, r22
 d06:	b0 0d       	add	r27, r0
 d08:	a1 1d       	adc	r26, r1
 d0a:	66 1f       	adc	r22, r22
 d0c:	82 9f       	mul	r24, r18
 d0e:	22 27       	eor	r18, r18
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	62 1f       	adc	r22, r18
 d16:	73 9f       	mul	r23, r19
 d18:	b0 0d       	add	r27, r0
 d1a:	a1 1d       	adc	r26, r1
 d1c:	62 1f       	adc	r22, r18
 d1e:	83 9f       	mul	r24, r19
 d20:	a0 0d       	add	r26, r0
 d22:	61 1d       	adc	r22, r1
 d24:	22 1f       	adc	r18, r18
 d26:	74 9f       	mul	r23, r20
 d28:	33 27       	eor	r19, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	23 1f       	adc	r18, r19
 d30:	84 9f       	mul	r24, r20
 d32:	60 0d       	add	r22, r0
 d34:	21 1d       	adc	r18, r1
 d36:	82 2f       	mov	r24, r18
 d38:	76 2f       	mov	r23, r22
 d3a:	6a 2f       	mov	r22, r26
 d3c:	11 24       	eor	r1, r1
 d3e:	9f 57       	subi	r25, 0x7F	; 127
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	9a f0       	brmi	.+38     	; 0xd6a <__mulsf3_pse+0x88>
 d44:	f1 f0       	breq	.+60     	; 0xd82 <__mulsf3_pse+0xa0>
 d46:	88 23       	and	r24, r24
 d48:	4a f0       	brmi	.+18     	; 0xd5c <__mulsf3_pse+0x7a>
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	bb 1f       	adc	r27, r27
 d50:	66 1f       	adc	r22, r22
 d52:	77 1f       	adc	r23, r23
 d54:	88 1f       	adc	r24, r24
 d56:	91 50       	subi	r25, 0x01	; 1
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	a9 f7       	brne	.-22     	; 0xd46 <__mulsf3_pse+0x64>
 d5c:	9e 3f       	cpi	r25, 0xFE	; 254
 d5e:	51 05       	cpc	r21, r1
 d60:	80 f0       	brcs	.+32     	; 0xd82 <__mulsf3_pse+0xa0>
 d62:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_inf>
 d66:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_szero>
 d6a:	5f 3f       	cpi	r21, 0xFF	; 255
 d6c:	e4 f3       	brlt	.-8      	; 0xd66 <__mulsf3_pse+0x84>
 d6e:	98 3e       	cpi	r25, 0xE8	; 232
 d70:	d4 f3       	brlt	.-12     	; 0xd66 <__mulsf3_pse+0x84>
 d72:	86 95       	lsr	r24
 d74:	77 95       	ror	r23
 d76:	67 95       	ror	r22
 d78:	b7 95       	ror	r27
 d7a:	f7 95       	ror	r31
 d7c:	e7 95       	ror	r30
 d7e:	9f 5f       	subi	r25, 0xFF	; 255
 d80:	c1 f7       	brne	.-16     	; 0xd72 <__mulsf3_pse+0x90>
 d82:	fe 2b       	or	r31, r30
 d84:	88 0f       	add	r24, r24
 d86:	91 1d       	adc	r25, r1
 d88:	96 95       	lsr	r25
 d8a:	87 95       	ror	r24
 d8c:	97 f9       	bld	r25, 7
 d8e:	08 95       	ret

00000d90 <itoa>:
 d90:	45 32       	cpi	r20, 0x25	; 37
 d92:	51 05       	cpc	r21, r1
 d94:	20 f4       	brcc	.+8      	; 0xd9e <itoa+0xe>
 d96:	42 30       	cpi	r20, 0x02	; 2
 d98:	10 f0       	brcs	.+4      	; 0xd9e <itoa+0xe>
 d9a:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__itoa_ncheck>
 d9e:	fb 01       	movw	r30, r22
 da0:	10 82       	st	Z, r1
 da2:	cb 01       	movw	r24, r22
 da4:	08 95       	ret

00000da6 <__itoa_ncheck>:
 da6:	bb 27       	eor	r27, r27
 da8:	4a 30       	cpi	r20, 0x0A	; 10
 daa:	31 f4       	brne	.+12     	; 0xdb8 <__itoa_ncheck+0x12>
 dac:	99 23       	and	r25, r25
 dae:	22 f4       	brpl	.+8      	; 0xdb8 <__itoa_ncheck+0x12>
 db0:	bd e2       	ldi	r27, 0x2D	; 45
 db2:	90 95       	com	r25
 db4:	81 95       	neg	r24
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__utoa_common>

00000dbc <__utoa_ncheck>:
 dbc:	bb 27       	eor	r27, r27

00000dbe <__utoa_common>:
 dbe:	fb 01       	movw	r30, r22
 dc0:	55 27       	eor	r21, r21
 dc2:	aa 27       	eor	r26, r26
 dc4:	88 0f       	add	r24, r24
 dc6:	99 1f       	adc	r25, r25
 dc8:	aa 1f       	adc	r26, r26
 dca:	a4 17       	cp	r26, r20
 dcc:	10 f0       	brcs	.+4      	; 0xdd2 <__utoa_common+0x14>
 dce:	a4 1b       	sub	r26, r20
 dd0:	83 95       	inc	r24
 dd2:	50 51       	subi	r21, 0x10	; 16
 dd4:	b9 f7       	brne	.-18     	; 0xdc4 <__utoa_common+0x6>
 dd6:	a0 5d       	subi	r26, 0xD0	; 208
 dd8:	aa 33       	cpi	r26, 0x3A	; 58
 dda:	08 f0       	brcs	.+2      	; 0xdde <__utoa_common+0x20>
 ddc:	a9 5d       	subi	r26, 0xD9	; 217
 dde:	a1 93       	st	Z+, r26
 de0:	00 97       	sbiw	r24, 0x00	; 0
 de2:	79 f7       	brne	.-34     	; 0xdc2 <__utoa_common+0x4>
 de4:	b1 11       	cpse	r27, r1
 de6:	b1 93       	st	Z+, r27
 de8:	11 92       	st	Z+, r1
 dea:	cb 01       	movw	r24, r22
 dec:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <strrev>

00000df0 <strrev>:
 df0:	dc 01       	movw	r26, r24
 df2:	fc 01       	movw	r30, r24
 df4:	67 2f       	mov	r22, r23
 df6:	71 91       	ld	r23, Z+
 df8:	77 23       	and	r23, r23
 dfa:	e1 f7       	brne	.-8      	; 0xdf4 <strrev+0x4>
 dfc:	32 97       	sbiw	r30, 0x02	; 2
 dfe:	04 c0       	rjmp	.+8      	; 0xe08 <strrev+0x18>
 e00:	7c 91       	ld	r23, X
 e02:	6d 93       	st	X+, r22
 e04:	70 83       	st	Z, r23
 e06:	62 91       	ld	r22, -Z
 e08:	ae 17       	cp	r26, r30
 e0a:	bf 07       	cpc	r27, r31
 e0c:	c8 f3       	brcs	.-14     	; 0xe00 <strrev+0x10>
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
