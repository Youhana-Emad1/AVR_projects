
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000e1e  00000e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbf  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000967  00000000  00000000  00002c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b36  00000000  00000000  0000356a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  000040a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000656  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e74  00000000  00000000  00004922  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00005796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 96 03 	call	0x72c	; 0x72c <main>
  7a:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VidSetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_private.h"
#include "DIO_interface.h"
//setting pin direction
void DIO_VidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
	if(Copy_u8Direction==Input)
  82:	41 11       	cpse	r20, r1
  84:	38 c0       	rjmp	.+112    	; 0xf6 <DIO_VidSetPinDirection+0x74>
	{
		switch(Copy_u8Port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <DIO_VidSetPinDirection+0x2c>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_VidSetPinDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_VidSetPinDirection+0x44>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <DIO_VidSetPinDirection+0x5c>
  94:	08 95       	ret
		case Port_A: CLR_BIT(DDRA,Copy_u8Pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_VidSetPinDirection+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_VidSetPinDirection+0x1c>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
		break;
  ac:	08 95       	ret
		case Port_B: CLR_BIT(DDRB,Copy_u8Pin);
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_VidSetPinDirection+0x38>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_VidSetPinDirection+0x34>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	87 bb       	out	0x17, r24	; 23
		break;
  c4:	08 95       	ret
		case Port_C: CLR_BIT(DDRC,Copy_u8Pin);
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_VidSetPinDirection+0x50>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_VidSetPinDirection+0x4c>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
		break;
  dc:	08 95       	ret
		case Port_D: CLR_BIT(DDRD,Copy_u8Pin);
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_VidSetPinDirection+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_VidSetPinDirection+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
		break;
  f4:	08 95       	ret
		}
	}
	else if(Copy_u8Direction==Output)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	99 f5       	brne	.+102    	; 0x160 <DIO_VidSetPinDirection+0xde>
	{
		switch(Copy_u8Port){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	89 f0       	breq	.+34     	; 0x120 <DIO_VidSetPinDirection+0x9e>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_VidSetPinDirection+0x88>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	c9 f0       	breq	.+50     	; 0x136 <DIO_VidSetPinDirection+0xb4>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	11 f1       	breq	.+68     	; 0x14c <DIO_VidSetPinDirection+0xca>
 108:	08 95       	ret
		case Port_A:SET_BIT(DDRA,Copy_u8Pin);
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_VidSetPinDirection+0x94>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_VidSetPinDirection+0x90>
 11a:	82 2b       	or	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
		break;
 11e:	08 95       	ret
		case Port_B:SET_BIT(DDRB,Copy_u8Pin);
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_VidSetPinDirection+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_VidSetPinDirection+0xa6>
 130:	82 2b       	or	r24, r18
 132:	87 bb       	out	0x17, r24	; 23
		break;
 134:	08 95       	ret
		case Port_C:SET_BIT(DDRC,Copy_u8Pin);
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_VidSetPinDirection+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_VidSetPinDirection+0xbc>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
		break;
 14a:	08 95       	ret
		case Port_D:SET_BIT(DDRD,Copy_u8Pin);
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VidSetPinDirection+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VidSetPinDirection+0xd2>
 15c:	82 2b       	or	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_VidSetPinValue>:
	}
}

//setting pin value
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8pin,u8 Copy_u8Value){
	if(Copy_u8Value==PinLow)
 162:	41 11       	cpse	r20, r1
 164:	38 c0       	rjmp	.+112    	; 0x1d6 <DIO_VidSetPinValue+0x74>
	{
		switch(Copy_u8Port){
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	91 f0       	breq	.+36     	; 0x18e <DIO_VidSetPinValue+0x2c>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_VidSetPinValue+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	d9 f0       	breq	.+54     	; 0x1a6 <DIO_VidSetPinValue+0x44>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	29 f1       	breq	.+74     	; 0x1be <DIO_VidSetPinValue+0x5c>
 174:	08 95       	ret
		case Port_A:CLR_BIT(PORTA,Copy_u8pin);
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_VidSetPinValue+0x20>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_VidSetPinValue+0x1c>
 186:	80 95       	com	r24
 188:	82 23       	and	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
		break;
 18c:	08 95       	ret
		case Port_B:CLR_BIT(PORTB,Copy_u8pin);
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_VidSetPinValue+0x38>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_VidSetPinValue+0x34>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	88 bb       	out	0x18, r24	; 24
		break;
 1a4:	08 95       	ret
		case Port_C:CLR_BIT(PORTC,Copy_u8pin);
 1a6:	25 b3       	in	r18, 0x15	; 21
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_VidSetPinValue+0x50>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_VidSetPinValue+0x4c>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	85 bb       	out	0x15, r24	; 21
		break;
 1bc:	08 95       	ret
		case Port_D:CLR_BIT(PORTD,Copy_u8pin);
 1be:	22 b3       	in	r18, 0x12	; 18
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_VidSetPinValue+0x68>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_VidSetPinValue+0x64>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
		break;
 1d4:	08 95       	ret
		}

	}
	else if(Copy_u8Value==PinHigh)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	99 f5       	brne	.+102    	; 0x240 <DIO_VidSetPinValue+0xde>
	{
		switch(Copy_u8Port){
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	89 f0       	breq	.+34     	; 0x200 <DIO_VidSetPinValue+0x9e>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_VidSetPinValue+0x88>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	c9 f0       	breq	.+50     	; 0x216 <DIO_VidSetPinValue+0xb4>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	11 f1       	breq	.+68     	; 0x22c <DIO_VidSetPinValue+0xca>
 1e8:	08 95       	ret
		case Port_A:SET_BIT(PORTA,Copy_u8pin);
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_VidSetPinValue+0x94>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_VidSetPinValue+0x90>
 1fa:	82 2b       	or	r24, r18
 1fc:	8b bb       	out	0x1b, r24	; 27
		break;
 1fe:	08 95       	ret
		case Port_B:SET_BIT(PORTB,Copy_u8pin);
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_VidSetPinValue+0xaa>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_VidSetPinValue+0xa6>
 210:	82 2b       	or	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
		break;
 214:	08 95       	ret
		case Port_C:SET_BIT(PORTC,Copy_u8pin);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_VidSetPinValue+0xc0>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_VidSetPinValue+0xbc>
 226:	82 2b       	or	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
		break;
 22a:	08 95       	ret
		case Port_D:SET_BIT(PORTD,Copy_u8pin);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_VidSetPinValue+0xd6>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_VidSetPinValue+0xd2>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_VidgetPinValue>:
}

//getting pin value
void DIO_VidgetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *pu8Data){

	switch(Copy_u8Port){
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	89 f0       	breq	.+34     	; 0x268 <DIO_VidgetPinValue+0x26>
 246:	28 f0       	brcs	.+10     	; 0x252 <DIO_VidgetPinValue+0x10>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	c9 f0       	breq	.+50     	; 0x27e <DIO_VidgetPinValue+0x3c>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	11 f1       	breq	.+68     	; 0x294 <DIO_VidgetPinValue+0x52>
 250:	08 95       	ret
	case Port_A:*pu8Data=GET_BIT(PINA,Copy_u8Pin);
 252:	89 b3       	in	r24, 0x19	; 25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_VidgetPinValue+0x1a>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_VidgetPinValue+0x16>
 260:	81 70       	andi	r24, 0x01	; 1
 262:	fa 01       	movw	r30, r20
 264:	80 83       	st	Z, r24
	break;
 266:	08 95       	ret
	case Port_B:*pu8Data=GET_BIT(PINB,Copy_u8Pin);
 268:	86 b3       	in	r24, 0x16	; 22
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_VidgetPinValue+0x30>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_VidgetPinValue+0x2c>
 276:	81 70       	andi	r24, 0x01	; 1
 278:	fa 01       	movw	r30, r20
 27a:	80 83       	st	Z, r24
	break;
 27c:	08 95       	ret
	case Port_C:*pu8Data=GET_BIT(PINC,Copy_u8Pin);
 27e:	83 b3       	in	r24, 0x13	; 19
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_VidgetPinValue+0x46>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_VidgetPinValue+0x42>
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	fa 01       	movw	r30, r20
 290:	80 83       	st	Z, r24
	break;
 292:	08 95       	ret
	case Port_D:*pu8Data=GET_BIT(PIND,Copy_u8Pin);
 294:	80 b3       	in	r24, 0x10	; 16
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_VidgetPinValue+0x5c>
 29a:	95 95       	asr	r25
 29c:	87 95       	ror	r24
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_VidgetPinValue+0x58>
 2a2:	81 70       	andi	r24, 0x01	; 1
 2a4:	fa 01       	movw	r30, r20
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret

000002aa <KPD_VidInit>:
#include <util/delay.h>

void KPD_VidInit(void)
{
	//Set Columns as Output
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_0,Output);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_1,Output);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_2,Output);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_3,Output);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	//Set Columns as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_0,PinHigh);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_1,PinHigh);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_2,PinHigh);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_3,PinHigh);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>

	//Set Row as Input
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_0,Input);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_1,Input);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_2,Input);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_3,Input);
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
	//Set Row as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_0,PinHigh);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_1,PinHigh);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_2,PinHigh);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_3,PinHigh);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	64 e0       	ldi	r22, 0x04	; 4
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 34a:	08 95       	ret

0000034c <Kpd_U8GetPressedKey>:



}
u8 Kpd_U8GetPressedKey(void)
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	42 c0       	rjmp	.+132    	; 0x3ea <Kpd_U8GetPressedKey+0x9e>
	{
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);
 366:	c0 2e       	mov	r12, r16
 368:	d1 2c       	mov	r13, r1
 36a:	f6 01       	movw	r30, r12
 36c:	ec 58       	subi	r30, 0x8C	; 140
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	60 81       	ld	r22, Z
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	2b c0       	rjmp	.+86     	; 0x3d4 <Kpd_U8GetPressedKey+0x88>
		{
			DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
 37e:	e1 2e       	mov	r14, r17
 380:	f1 2c       	mov	r15, r1
 382:	f7 01       	movw	r30, r14
 384:	e0 59       	subi	r30, 0x90	; 144
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	ae 01       	movw	r20, r28
 38a:	4f 5f       	subi	r20, 0xFF	; 255
 38c:	5f 4f       	sbci	r21, 0xFF	; 255
 38e:	60 81       	ld	r22, Z
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 21 01 	call	0x242	; 0x242 <DIO_VidgetPinValue>

			 /*****CHECK IF KEY IS PREESED*******/

			if(Local_u8_Pint_State==PinLow)
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	81 11       	cpse	r24, r1
 39a:	1b c0       	rjmp	.+54     	; 0x3d2 <Kpd_U8GetPressedKey+0x86>
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];
 39c:	c7 01       	movw	r24, r14
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	80 5a       	subi	r24, 0xA0	; 160
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	fc 01       	movw	r30, r24
 3ac:	ec 0d       	add	r30, r12
 3ae:	fd 1d       	adc	r31, r13
 3b0:	10 81       	ld	r17, Z

				while(Local_u8_Pint_State==PinLow)
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <Kpd_U8GetPressedKey+0x7c>
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
 3b4:	ae 01       	movw	r20, r28
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	f7 01       	movw	r30, r14
 3bc:	e0 59       	subi	r30, 0x90	; 144
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	60 81       	ld	r22, Z
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 21 01 	call	0x242	; 0x242 <DIO_VidgetPinValue>

			if(Local_u8_Pint_State==PinLow)
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];

				while(Local_u8_Pint_State==PinLow)
 3c8:	99 81       	ldd	r25, Y+1	; 0x01
 3ca:	99 23       	and	r25, r25
 3cc:	99 f3       	breq	.-26     	; 0x3b4 <Kpd_U8GetPressedKey+0x68>
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
				}
				return Local_u8_Pressed_Key;
 3ce:	81 2f       	mov	r24, r17
 3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <Kpd_U8GetPressedKey+0xa6>
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
 3d2:	1f 5f       	subi	r17, 0xFF	; 255
 3d4:	14 30       	cpi	r17, 0x04	; 4
 3d6:	98 f2       	brcs	.-90     	; 0x37e <Kpd_U8GetPressedKey+0x32>
				}
				return Local_u8_Pressed_Key;
			}
		}
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
 3d8:	f6 01       	movw	r30, r12
 3da:	ec 58       	subi	r30, 0x8C	; 140
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	60 81       	ld	r22, Z
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
 3e8:	0f 5f       	subi	r16, 0xFF	; 255
 3ea:	04 30       	cpi	r16, 0x04	; 4
 3ec:	08 f4       	brcc	.+2      	; 0x3f0 <Kpd_U8GetPressedKey+0xa4>
 3ee:	bb cf       	rjmp	.-138    	; 0x366 <Kpd_U8GetPressedKey+0x1a>
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);

	}

	return Local_u8_Pressed_Key;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
}
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	08 95       	ret

00000406 <LCD_VidSendCommand>:
}
void LCD_VidIntegerToString_XY(u16 data,u8 row, u8 column)
{
	LCD_VidMoveCursor(row,column);
	LCD_VidIntegerToString(data);
}
 406:	cf 93       	push	r28
 408:	c8 2f       	mov	r28, r24
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 414:	00 00       	nop
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 420:	00 00       	nop
 422:	c4 fb       	bst	r28, 4
 424:	44 27       	eor	r20, r20
 426:	40 f9       	bld	r20, 0
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 430:	c5 fb       	bst	r28, 5
 432:	44 27       	eor	r20, r20
 434:	40 f9       	bld	r20, 0
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 43e:	c6 fb       	bst	r28, 6
 440:	44 27       	eor	r20, r20
 442:	40 f9       	bld	r20, 0
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 44c:	4c 2f       	mov	r20, r28
 44e:	44 1f       	adc	r20, r20
 450:	44 27       	eor	r20, r20
 452:	44 1f       	adc	r20, r20
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 45c:	89 ef       	ldi	r24, 0xF9	; 249
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LCD_VidSendCommand+0x5a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_VidSendCommand+0x60>
 466:	00 00       	nop
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 472:	00 00       	nop
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 47e:	00 00       	nop
 480:	4c 2f       	mov	r20, r28
 482:	41 70       	andi	r20, 0x01	; 1
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 48c:	c1 fb       	bst	r28, 1
 48e:	44 27       	eor	r20, r20
 490:	40 f9       	bld	r20, 0
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 49a:	c2 fb       	bst	r28, 2
 49c:	44 27       	eor	r20, r20
 49e:	40 f9       	bld	r20, 0
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4a8:	c3 fb       	bst	r28, 3
 4aa:	44 27       	eor	r20, r20
 4ac:	40 f9       	bld	r20, 0
 4ae:	66 e0       	ldi	r22, 0x06	; 6
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4b6:	89 ef       	ldi	r24, 0xF9	; 249
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_VidSendCommand+0xb4>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_VidSendCommand+0xba>
 4c0:	00 00       	nop
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	62 e0       	ldi	r22, 0x02	; 2
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4cc:	00 00       	nop
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <LCD_VidInit>:
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4e6:	87 e8       	ldi	r24, 0x87	; 135
 4e8:	93 e1       	ldi	r25, 0x13	; 19
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_VidInit+0x18>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_VidInit+0x1e>
 4f0:	00 00       	nop
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	66 e0       	ldi	r22, 0x06	; 6
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 51a:	87 e8       	ldi	r24, 0x87	; 135
 51c:	93 e1       	ldi	r25, 0x13	; 19
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_VidInit+0x4c>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_VidInit+0x52>
 524:	00 00       	nop
 526:	83 e3       	ldi	r24, 0x33	; 51
 528:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 52c:	82 e3       	ldi	r24, 0x32	; 50
 52e:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 532:	88 e2       	ldi	r24, 0x28	; 40
 534:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 538:	8c e0       	ldi	r24, 0x0C	; 12
 53a:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 544:	08 95       	ret

00000546 <LCD_VidSendChar>:
 546:	cf 93       	push	r28
 548:	c8 2f       	mov	r28, r24
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 554:	00 00       	nop
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 560:	00 00       	nop
 562:	c4 fb       	bst	r28, 4
 564:	44 27       	eor	r20, r20
 566:	40 f9       	bld	r20, 0
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 570:	c5 fb       	bst	r28, 5
 572:	44 27       	eor	r20, r20
 574:	40 f9       	bld	r20, 0
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 57e:	c6 fb       	bst	r28, 6
 580:	44 27       	eor	r20, r20
 582:	40 f9       	bld	r20, 0
 584:	65 e0       	ldi	r22, 0x05	; 5
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 58c:	4c 2f       	mov	r20, r28
 58e:	44 1f       	adc	r20, r20
 590:	44 27       	eor	r20, r20
 592:	44 1f       	adc	r20, r20
 594:	66 e0       	ldi	r22, 0x06	; 6
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 59c:	89 ef       	ldi	r24, 0xF9	; 249
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_VidSendChar+0x5a>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_VidSendChar+0x60>
 5a6:	00 00       	nop
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5b2:	00 00       	nop
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5be:	00 00       	nop
 5c0:	4c 2f       	mov	r20, r28
 5c2:	41 70       	andi	r20, 0x01	; 1
 5c4:	63 e0       	ldi	r22, 0x03	; 3
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5cc:	c1 fb       	bst	r28, 1
 5ce:	44 27       	eor	r20, r20
 5d0:	40 f9       	bld	r20, 0
 5d2:	64 e0       	ldi	r22, 0x04	; 4
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5da:	c2 fb       	bst	r28, 2
 5dc:	44 27       	eor	r20, r20
 5de:	40 f9       	bld	r20, 0
 5e0:	65 e0       	ldi	r22, 0x05	; 5
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5e8:	c3 fb       	bst	r28, 3
 5ea:	44 27       	eor	r20, r20
 5ec:	40 f9       	bld	r20, 0
 5ee:	66 e0       	ldi	r22, 0x06	; 6
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 5f6:	89 ef       	ldi	r24, 0xF9	; 249
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_VidSendChar+0xb4>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_VidSendChar+0xba>
 600:	00 00       	nop
 602:	40 e0       	ldi	r20, 0x00	; 0
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 60c:	00 00       	nop
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <LCD_VidSendString>:
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	8c 01       	movw	r16, r24
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	03 c0       	rjmp	.+6      	; 0x624 <LCD_VidSendString+0x12>
 61e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
 622:	cf 5f       	subi	r28, 0xFF	; 255
 624:	f8 01       	movw	r30, r16
 626:	ec 0f       	add	r30, r28
 628:	f1 1d       	adc	r31, r1
 62a:	80 81       	ld	r24, Z
 62c:	81 11       	cpse	r24, r1
 62e:	f7 cf       	rjmp	.-18     	; 0x61e <LCD_VidSendString+0xc>
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <LCD_VidIntegerToString>:
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	60 97       	sbiw	r28, 0x10	; 16
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	de bf       	out	0x3e, r29	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	cd bf       	out	0x3d, r28	; 61
 64c:	4a e0       	ldi	r20, 0x0A	; 10
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	be 01       	movw	r22, r28
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	0e 94 cd 06 	call	0xd9a	; 0xd9a <itoa>
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 662:	60 96       	adiw	r28, 0x10	; 16
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <LCD_VidMoveCursor>:
 674:	88 23       	and	r24, r24
 676:	29 f0       	breq	.+10     	; 0x682 <LCD_VidMoveCursor+0xe>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	21 f4       	brne	.+8      	; 0x684 <LCD_VidMoveCursor+0x10>
 67c:	90 e4       	ldi	r25, 0x40	; 64
 67e:	96 0f       	add	r25, r22
 680:	01 c0       	rjmp	.+2      	; 0x684 <LCD_VidMoveCursor+0x10>
 682:	96 2f       	mov	r25, r22
 684:	89 2f       	mov	r24, r25
 686:	80 68       	ori	r24, 0x80	; 128
 688:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 68c:	08 95       	ret

0000068e <LCD_VidSendString_XY>:
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	86 2f       	mov	r24, r22
 696:	64 2f       	mov	r22, r20
 698:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_VidMoveCursor>
 69c:	ce 01       	movw	r24, r28
 69e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <LCD_VidClearScreen>:
void LCD_VidClearScreen()
{
	LCD_VidSendCommand(0x01);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 03 02 	call	0x406	; 0x406 <LCD_VidSendCommand>
 6ae:	08 95       	ret

000006b0 <LCD_VidSendFloat>:
}
void LCD_VidSendFloat(f32 data)
{
 6b0:	8f 92       	push	r8
 6b2:	9f 92       	push	r9
 6b4:	af 92       	push	r10
 6b6:	bf 92       	push	r11
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	4b 01       	movw	r8, r22
 6c6:	5c 01       	movw	r10, r24
	s16 _dot,dot_;
	_dot = data;
 6c8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
 6cc:	6b 01       	movw	r12, r22
 6ce:	7c 01       	movw	r14, r24
	dot_ = (data- _dot)*1000;  //1000 For accuracy
 6d0:	07 2e       	mov	r0, r23
 6d2:	00 0c       	add	r0, r0
 6d4:	88 0b       	sbc	r24, r24
 6d6:	99 0b       	sbc	r25, r25
 6d8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
 6dc:	9b 01       	movw	r18, r22
 6de:	ac 01       	movw	r20, r24
 6e0:	c5 01       	movw	r24, r10
 6e2:	b4 01       	movw	r22, r8
 6e4:	0e 94 94 04 	call	0x928	; 0x928 <__subsf3>
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	4a e7       	ldi	r20, 0x7A	; 122
 6ee:	54 e4       	ldi	r21, 0x44	; 68
 6f0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
 6f4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
 6f8:	4b 01       	movw	r8, r22
 6fa:	5c 01       	movw	r10, r24
 6fc:	eb 01       	movw	r28, r22
	LCD_VidIntegerToString(_dot);
 6fe:	c6 01       	movw	r24, r12
 700:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_VidIntegerToString>
	if(dot_>0)
 704:	1c 16       	cp	r1, r28
 706:	1d 06       	cpc	r1, r29
 708:	34 f4       	brge	.+12     	; 0x716 <LCD_VidSendFloat+0x66>
	{
		LCD_VidSendChar('.');
 70a:	8e e2       	ldi	r24, 0x2E	; 46
 70c:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
		LCD_VidIntegerToString(dot_);
 710:	c4 01       	movw	r24, r8
 712:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_VidIntegerToString>
	else
	{

	}

}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	bf 90       	pop	r11
 724:	af 90       	pop	r10
 726:	9f 90       	pop	r9
 728:	8f 90       	pop	r8
 72a:	08 95       	ret

0000072c <main>:
#include "KPD_interface.h"
#include "LCD_interface.h"

int main()
{
	LCD_VidInit();
 72c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_VidInit>
	KPD_VidInit();
 730:	0e 94 55 01 	call	0x2aa	; 0x2aa <KPD_VidInit>
	LCD_VidClearScreen();
 734:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
	LCD_VidSendString_XY("WELCOME", 0, 4);
 738:	44 e0       	ldi	r20, 0x04	; 4
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	88 e7       	ldi	r24, 0x78	; 120
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_VidSendString_XY>
	LCD_VidSendString_XY("CALCULATOR", 1, 3);
 744:	43 e0       	ldi	r20, 0x03	; 3
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	80 e8       	ldi	r24, 0x80	; 128
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 47 03 	call	0x68e	; 0x68e <LCD_VidSendString_XY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 750:	2f e7       	ldi	r18, 0x7F	; 127
 752:	84 e8       	ldi	r24, 0x84	; 132
 754:	9e e1       	ldi	r25, 0x1E	; 30
 756:	21 50       	subi	r18, 0x01	; 1
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	e1 f7       	brne	.-8      	; 0x756 <main+0x2a>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <main+0x34>
 760:	00 00       	nop
	_delay_ms(10000);
	LCD_VidClearScreen();
 762:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>

	u8 PressedKey,Operator = '\0';
	f32 Num1 = 0, Num2 = 0, Res;
 766:	81 2c       	mov	r8, r1
 768:	91 2c       	mov	r9, r1
 76a:	54 01       	movw	r10, r8
 76c:	00 e0       	ldi	r16, 0x00	; 0
 76e:	10 e0       	ldi	r17, 0x00	; 0
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	71 2c       	mov	r7, r1
	LCD_VidSendString_XY("WELCOME", 0, 4);
	LCD_VidSendString_XY("CALCULATOR", 1, 3);
	_delay_ms(10000);
	LCD_VidClearScreen();

	u8 PressedKey,Operator = '\0';
 774:	e1 2c       	mov	r14, r1
	f32 Num1 = 0, Num2 = 0, Res;

	while (1)
	{
		PressedKey = Kpd_U8GetPressedKey();
 776:	0e 94 a6 01 	call	0x34c	; 0x34c <Kpd_U8GetPressedKey>
 77a:	c8 2f       	mov	r28, r24

		if (PressedKey >= '0' && PressedKey <= '9')
 77c:	80 ed       	ldi	r24, 0xD0	; 208
 77e:	8c 0f       	add	r24, r28
 780:	8a 30       	cpi	r24, 0x0A	; 10
 782:	08 f0       	brcs	.+2      	; 0x786 <main+0x5a>
 784:	43 c0       	rjmp	.+134    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		{
			LCD_VidSendChar(PressedKey);
 786:	8c 2f       	mov	r24, r28
 788:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			if (Operator == '\0')
 78c:	e1 10       	cpse	r14, r1
 78e:	21 c0       	rjmp	.+66     	; 0x7d2 <main+0xa6>
			{
				Num1 = Num1 * 10 + (PressedKey - '0');
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e2       	ldi	r20, 0x20	; 32
 796:	51 e4       	ldi	r21, 0x41	; 65
 798:	60 2f       	mov	r22, r16
 79a:	71 2f       	mov	r23, r17
 79c:	8d 2f       	mov	r24, r29
 79e:	97 2d       	mov	r25, r7
 7a0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
 7a4:	2b 01       	movw	r4, r22
 7a6:	3c 01       	movw	r6, r24
 7a8:	6c 2f       	mov	r22, r28
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	60 53       	subi	r22, 0x30	; 48
 7ae:	71 09       	sbc	r23, r1
 7b0:	07 2e       	mov	r0, r23
 7b2:	00 0c       	add	r0, r0
 7b4:	88 0b       	sbc	r24, r24
 7b6:	99 0b       	sbc	r25, r25
 7b8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
 7bc:	9b 01       	movw	r18, r22
 7be:	ac 01       	movw	r20, r24
 7c0:	c3 01       	movw	r24, r6
 7c2:	b2 01       	movw	r22, r4
 7c4:	0e 94 95 04 	call	0x92a	; 0x92a <__addsf3>
 7c8:	06 2f       	mov	r16, r22
 7ca:	17 2f       	mov	r17, r23
 7cc:	d8 2f       	mov	r29, r24
 7ce:	79 2e       	mov	r7, r25
 7d0:	d2 cf       	rjmp	.-92     	; 0x776 <main+0x4a>
			}
			else
			{
				Num2 = Num2 * 10 + (PressedKey - '0');
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	40 e2       	ldi	r20, 0x20	; 32
 7d8:	51 e4       	ldi	r21, 0x41	; 65
 7da:	c5 01       	movw	r24, r10
 7dc:	b4 01       	movw	r22, r8
 7de:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
 7e2:	4b 01       	movw	r8, r22
 7e4:	5c 01       	movw	r10, r24
 7e6:	6c 2f       	mov	r22, r28
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	60 53       	subi	r22, 0x30	; 48
 7ec:	71 09       	sbc	r23, r1
 7ee:	07 2e       	mov	r0, r23
 7f0:	00 0c       	add	r0, r0
 7f2:	88 0b       	sbc	r24, r24
 7f4:	99 0b       	sbc	r25, r25
 7f6:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatsisf>
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	c5 01       	movw	r24, r10
 800:	b4 01       	movw	r22, r8
 802:	0e 94 95 04 	call	0x92a	; 0x92a <__addsf3>
 806:	4b 01       	movw	r8, r22
 808:	5c 01       	movw	r10, r24
 80a:	b5 cf       	rjmp	.-150    	; 0x776 <main+0x4a>
			}
		}
		else if (PressedKey == '+' || PressedKey == '-' || PressedKey == '*' || PressedKey == '/')
 80c:	cb 32       	cpi	r28, 0x2B	; 43
 80e:	31 f0       	breq	.+12     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 810:	cd 32       	cpi	r28, 0x2D	; 45
 812:	21 f0       	breq	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	ca 32       	cpi	r28, 0x2A	; 42
 816:	11 f0       	breq	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	cf 32       	cpi	r28, 0x2F	; 47
 81a:	29 f4       	brne	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		{
			LCD_VidSendChar(PressedKey);
 81c:	8c 2f       	mov	r24, r28
 81e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			Operator = PressedKey;
 822:	ec 2e       	mov	r14, r28
 824:	a8 cf       	rjmp	.-176    	; 0x776 <main+0x4a>
		}
		else if (PressedKey == '=')
 826:	cd 33       	cpi	r28, 0x3D	; 61
 828:	09 f0       	breq	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	70 c0       	rjmp	.+224    	; 0x90c <__stack+0xad>
		{
			LCD_VidSendChar(PressedKey);
 82c:	8c 2f       	mov	r24, r28
 82e:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_VidSendChar>
			switch (Operator)
 832:	2b e2       	ldi	r18, 0x2B	; 43
 834:	e2 16       	cp	r14, r18
 836:	69 f0       	breq	.+26     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 838:	2e 15       	cp	r18, r14
 83a:	20 f0       	brcs	.+8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83c:	8a e2       	ldi	r24, 0x2A	; 42
 83e:	e8 16       	cp	r14, r24
 840:	11 f1       	breq	.+68     	; 0x886 <__stack+0x27>
 842:	4b c0       	rjmp	.+150    	; 0x8da <__stack+0x7b>
 844:	9d e2       	ldi	r25, 0x2D	; 45
 846:	e9 16       	cp	r14, r25
 848:	89 f0       	breq	.+34     	; 0x86c <__stack+0xd>
 84a:	2f e2       	ldi	r18, 0x2F	; 47
 84c:	e2 16       	cp	r14, r18
 84e:	41 f1       	breq	.+80     	; 0x8a0 <__stack+0x41>
 850:	44 c0       	rjmp	.+136    	; 0x8da <__stack+0x7b>
			{
				case '+':
					Res = Num1 + Num2;
 852:	a5 01       	movw	r20, r10
 854:	94 01       	movw	r18, r8
 856:	60 2f       	mov	r22, r16
 858:	71 2f       	mov	r23, r17
 85a:	8d 2f       	mov	r24, r29
 85c:	97 2d       	mov	r25, r7
 85e:	0e 94 95 04 	call	0x92a	; 0x92a <__addsf3>
 862:	06 2f       	mov	r16, r22
 864:	17 2f       	mov	r17, r23
 866:	d8 2f       	mov	r29, r24
 868:	79 2e       	mov	r7, r25
					break;
 86a:	41 c0       	rjmp	.+130    	; 0x8ee <__stack+0x8f>
				case '-':
					Res = Num1 - Num2;
 86c:	a5 01       	movw	r20, r10
 86e:	94 01       	movw	r18, r8
 870:	60 2f       	mov	r22, r16
 872:	71 2f       	mov	r23, r17
 874:	8d 2f       	mov	r24, r29
 876:	97 2d       	mov	r25, r7
 878:	0e 94 94 04 	call	0x928	; 0x928 <__subsf3>
 87c:	06 2f       	mov	r16, r22
 87e:	17 2f       	mov	r17, r23
 880:	d8 2f       	mov	r29, r24
 882:	79 2e       	mov	r7, r25
					break;
 884:	34 c0       	rjmp	.+104    	; 0x8ee <__stack+0x8f>
				case '*':
					Res = Num1 * Num2;
 886:	a5 01       	movw	r20, r10
 888:	94 01       	movw	r18, r8
 88a:	60 2f       	mov	r22, r16
 88c:	71 2f       	mov	r23, r17
 88e:	8d 2f       	mov	r24, r29
 890:	97 2d       	mov	r25, r7
 892:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
 896:	06 2f       	mov	r16, r22
 898:	17 2f       	mov	r17, r23
 89a:	d8 2f       	mov	r29, r24
 89c:	79 2e       	mov	r7, r25
					break;
 89e:	27 c0       	rjmp	.+78     	; 0x8ee <__stack+0x8f>
				case '/':
					if (Num2 != 0)
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	a9 01       	movw	r20, r18
 8a6:	c5 01       	movw	r24, r10
 8a8:	b4 01       	movw	r22, r8
 8aa:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 8ae:	88 23       	and	r24, r24
 8b0:	69 f0       	breq	.+26     	; 0x8cc <__stack+0x6d>
					{
						Res = Num1 / Num2;
 8b2:	a5 01       	movw	r20, r10
 8b4:	94 01       	movw	r18, r8
 8b6:	60 2f       	mov	r22, r16
 8b8:	71 2f       	mov	r23, r17
 8ba:	8d 2f       	mov	r24, r29
 8bc:	97 2d       	mov	r25, r7
 8be:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divsf3>
 8c2:	06 2f       	mov	r16, r22
 8c4:	17 2f       	mov	r17, r23
 8c6:	d8 2f       	mov	r29, r24
 8c8:	79 2e       	mov	r7, r25
					{
						LCD_VidClearScreen();
						LCD_VidSendString("Division By Zero");
						continue;
					}
					break;
 8ca:	11 c0       	rjmp	.+34     	; 0x8ee <__stack+0x8f>
					{
						Res = Num1 / Num2;
					}
					else
					{
						LCD_VidClearScreen();
 8cc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
						LCD_VidSendString("Division By Zero");
 8d0:	8b e8       	ldi	r24, 0x8B	; 139
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
						continue;
 8d8:	4e cf       	rjmp	.-356    	; 0x776 <main+0x4a>
					}
					break;
				default:
					LCD_VidClearScreen();
 8da:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
					LCD_VidSendString("Invalid Operator!");
 8de:	8c e9       	ldi	r24, 0x9C	; 156
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 09 03 	call	0x612	; 0x612 <LCD_VidSendString>
 8e6:	0d 2d       	mov	r16, r13
 8e8:	1c 2d       	mov	r17, r12
 8ea:	df 2d       	mov	r29, r15
 8ec:	73 2c       	mov	r7, r3
			}

			LCD_VidSendFloat(Res);
 8ee:	60 2f       	mov	r22, r16
 8f0:	71 2f       	mov	r23, r17
 8f2:	8d 2f       	mov	r24, r29
 8f4:	97 2d       	mov	r25, r7
 8f6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_VidSendFloat>
 8fa:	d0 2e       	mov	r13, r16
 8fc:	c1 2e       	mov	r12, r17
 8fe:	fd 2e       	mov	r15, r29
 900:	37 2c       	mov	r3, r7
			Num1 = Res;
			Num2 = 0;
 902:	81 2c       	mov	r8, r1
 904:	91 2c       	mov	r9, r1
 906:	54 01       	movw	r10, r8
			Operator = '\0';
 908:	e1 2c       	mov	r14, r1
 90a:	35 cf       	rjmp	.-406    	; 0x776 <main+0x4a>
		}
		else if (PressedKey == 'C')
 90c:	c3 34       	cpi	r28, 0x43	; 67
 90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0xb3>
 910:	32 cf       	rjmp	.-412    	; 0x776 <main+0x4a>
		{
			LCD_VidClearScreen();
 912:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_VidClearScreen>
			Num1 = 0;
			Num2 = 0;
 916:	81 2c       	mov	r8, r1
 918:	91 2c       	mov	r9, r1
 91a:	54 01       	movw	r10, r8
			Operator = '\0';
		}
		else if (PressedKey == 'C')
		{
			LCD_VidClearScreen();
			Num1 = 0;
 91c:	00 e0       	ldi	r16, 0x00	; 0
 91e:	10 e0       	ldi	r17, 0x00	; 0
 920:	d0 e0       	ldi	r29, 0x00	; 0
 922:	71 2c       	mov	r7, r1
			Num2 = 0;
			Operator = '\0';
 924:	e1 2c       	mov	r14, r1
 926:	27 cf       	rjmp	.-434    	; 0x776 <main+0x4a>

00000928 <__subsf3>:
 928:	50 58       	subi	r21, 0x80	; 128

0000092a <__addsf3>:
 92a:	bb 27       	eor	r27, r27
 92c:	aa 27       	eor	r26, r26
 92e:	0e 94 ac 04 	call	0x958	; 0x958 <__addsf3x>
 932:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 936:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 93a:	38 f0       	brcs	.+14     	; 0x94a <__addsf3+0x20>
 93c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 940:	20 f0       	brcs	.+8      	; 0x94a <__addsf3+0x20>
 942:	39 f4       	brne	.+14     	; 0x952 <__addsf3+0x28>
 944:	9f 3f       	cpi	r25, 0xFF	; 255
 946:	19 f4       	brne	.+6      	; 0x94e <__addsf3+0x24>
 948:	26 f4       	brtc	.+8      	; 0x952 <__addsf3+0x28>
 94a:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
 94e:	0e f4       	brtc	.+2      	; 0x952 <__addsf3+0x28>
 950:	e0 95       	com	r30
 952:	e7 fb       	bst	r30, 7
 954:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>

00000958 <__addsf3x>:
 958:	e9 2f       	mov	r30, r25
 95a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 95e:	58 f3       	brcs	.-42     	; 0x936 <__addsf3+0xc>
 960:	ba 17       	cp	r27, r26
 962:	62 07       	cpc	r22, r18
 964:	73 07       	cpc	r23, r19
 966:	84 07       	cpc	r24, r20
 968:	95 07       	cpc	r25, r21
 96a:	20 f0       	brcs	.+8      	; 0x974 <__addsf3x+0x1c>
 96c:	79 f4       	brne	.+30     	; 0x98c <__addsf3x+0x34>
 96e:	a6 f5       	brtc	.+104    	; 0x9d8 <__addsf3x+0x80>
 970:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
 974:	0e f4       	brtc	.+2      	; 0x978 <__addsf3x+0x20>
 976:	e0 95       	com	r30
 978:	0b 2e       	mov	r0, r27
 97a:	ba 2f       	mov	r27, r26
 97c:	a0 2d       	mov	r26, r0
 97e:	0b 01       	movw	r0, r22
 980:	b9 01       	movw	r22, r18
 982:	90 01       	movw	r18, r0
 984:	0c 01       	movw	r0, r24
 986:	ca 01       	movw	r24, r20
 988:	a0 01       	movw	r20, r0
 98a:	11 24       	eor	r1, r1
 98c:	ff 27       	eor	r31, r31
 98e:	59 1b       	sub	r21, r25
 990:	99 f0       	breq	.+38     	; 0x9b8 <__addsf3x+0x60>
 992:	59 3f       	cpi	r21, 0xF9	; 249
 994:	50 f4       	brcc	.+20     	; 0x9aa <__addsf3x+0x52>
 996:	50 3e       	cpi	r21, 0xE0	; 224
 998:	68 f1       	brcs	.+90     	; 0x9f4 <__addsf3x+0x9c>
 99a:	1a 16       	cp	r1, r26
 99c:	f0 40       	sbci	r31, 0x00	; 0
 99e:	a2 2f       	mov	r26, r18
 9a0:	23 2f       	mov	r18, r19
 9a2:	34 2f       	mov	r19, r20
 9a4:	44 27       	eor	r20, r20
 9a6:	58 5f       	subi	r21, 0xF8	; 248
 9a8:	f3 cf       	rjmp	.-26     	; 0x990 <__addsf3x+0x38>
 9aa:	46 95       	lsr	r20
 9ac:	37 95       	ror	r19
 9ae:	27 95       	ror	r18
 9b0:	a7 95       	ror	r26
 9b2:	f0 40       	sbci	r31, 0x00	; 0
 9b4:	53 95       	inc	r21
 9b6:	c9 f7       	brne	.-14     	; 0x9aa <__addsf3x+0x52>
 9b8:	7e f4       	brtc	.+30     	; 0x9d8 <__addsf3x+0x80>
 9ba:	1f 16       	cp	r1, r31
 9bc:	ba 0b       	sbc	r27, r26
 9be:	62 0b       	sbc	r22, r18
 9c0:	73 0b       	sbc	r23, r19
 9c2:	84 0b       	sbc	r24, r20
 9c4:	ba f0       	brmi	.+46     	; 0x9f4 <__addsf3x+0x9c>
 9c6:	91 50       	subi	r25, 0x01	; 1
 9c8:	a1 f0       	breq	.+40     	; 0x9f2 <__addsf3x+0x9a>
 9ca:	ff 0f       	add	r31, r31
 9cc:	bb 1f       	adc	r27, r27
 9ce:	66 1f       	adc	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	c2 f7       	brpl	.-16     	; 0x9c6 <__addsf3x+0x6e>
 9d6:	0e c0       	rjmp	.+28     	; 0x9f4 <__addsf3x+0x9c>
 9d8:	ba 0f       	add	r27, r26
 9da:	62 1f       	adc	r22, r18
 9dc:	73 1f       	adc	r23, r19
 9de:	84 1f       	adc	r24, r20
 9e0:	48 f4       	brcc	.+18     	; 0x9f4 <__addsf3x+0x9c>
 9e2:	87 95       	ror	r24
 9e4:	77 95       	ror	r23
 9e6:	67 95       	ror	r22
 9e8:	b7 95       	ror	r27
 9ea:	f7 95       	ror	r31
 9ec:	9e 3f       	cpi	r25, 0xFE	; 254
 9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__addsf3x+0x9a>
 9f0:	b0 cf       	rjmp	.-160    	; 0x952 <__addsf3+0x28>
 9f2:	93 95       	inc	r25
 9f4:	88 0f       	add	r24, r24
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <__addsf3x+0xa2>
 9f8:	99 27       	eor	r25, r25
 9fa:	ee 0f       	add	r30, r30
 9fc:	97 95       	ror	r25
 9fe:	87 95       	ror	r24
 a00:	08 95       	ret

00000a02 <__cmpsf2>:
 a02:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_cmp>
 a06:	08 f4       	brcc	.+2      	; 0xa0a <__cmpsf2+0x8>
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	08 95       	ret

00000a0c <__divsf3>:
 a0c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divsf3x>
 a10:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 a14:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 a18:	58 f0       	brcs	.+22     	; 0xa30 <__divsf3+0x24>
 a1a:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 a1e:	40 f0       	brcs	.+16     	; 0xa30 <__divsf3+0x24>
 a20:	29 f4       	brne	.+10     	; 0xa2c <__divsf3+0x20>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	29 f0       	breq	.+10     	; 0xa30 <__divsf3+0x24>
 a26:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 a2a:	51 11       	cpse	r21, r1
 a2c:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 a30:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>

00000a34 <__divsf3x>:
 a34:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 a38:	68 f3       	brcs	.-38     	; 0xa14 <__divsf3+0x8>

00000a3a <__divsf3_pse>:
 a3a:	99 23       	and	r25, r25
 a3c:	b1 f3       	breq	.-20     	; 0xa2a <__divsf3+0x1e>
 a3e:	55 23       	and	r21, r21
 a40:	91 f3       	breq	.-28     	; 0xa26 <__divsf3+0x1a>
 a42:	95 1b       	sub	r25, r21
 a44:	55 0b       	sbc	r21, r21
 a46:	bb 27       	eor	r27, r27
 a48:	aa 27       	eor	r26, r26
 a4a:	62 17       	cp	r22, r18
 a4c:	73 07       	cpc	r23, r19
 a4e:	84 07       	cpc	r24, r20
 a50:	38 f0       	brcs	.+14     	; 0xa60 <__divsf3_pse+0x26>
 a52:	9f 5f       	subi	r25, 0xFF	; 255
 a54:	5f 4f       	sbci	r21, 0xFF	; 255
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	44 1f       	adc	r20, r20
 a5c:	aa 1f       	adc	r26, r26
 a5e:	a9 f3       	breq	.-22     	; 0xa4a <__divsf3_pse+0x10>
 a60:	35 d0       	rcall	.+106    	; 0xacc <__divsf3_pse+0x92>
 a62:	0e 2e       	mov	r0, r30
 a64:	3a f0       	brmi	.+14     	; 0xa74 <__divsf3_pse+0x3a>
 a66:	e0 e8       	ldi	r30, 0x80	; 128
 a68:	32 d0       	rcall	.+100    	; 0xace <__divsf3_pse+0x94>
 a6a:	91 50       	subi	r25, 0x01	; 1
 a6c:	50 40       	sbci	r21, 0x00	; 0
 a6e:	e6 95       	lsr	r30
 a70:	00 1c       	adc	r0, r0
 a72:	ca f7       	brpl	.-14     	; 0xa66 <__divsf3_pse+0x2c>
 a74:	2b d0       	rcall	.+86     	; 0xacc <__divsf3_pse+0x92>
 a76:	fe 2f       	mov	r31, r30
 a78:	29 d0       	rcall	.+82     	; 0xacc <__divsf3_pse+0x92>
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	bb 1f       	adc	r27, r27
 a82:	26 17       	cp	r18, r22
 a84:	37 07       	cpc	r19, r23
 a86:	48 07       	cpc	r20, r24
 a88:	ab 07       	cpc	r26, r27
 a8a:	b0 e8       	ldi	r27, 0x80	; 128
 a8c:	09 f0       	breq	.+2      	; 0xa90 <__divsf3_pse+0x56>
 a8e:	bb 0b       	sbc	r27, r27
 a90:	80 2d       	mov	r24, r0
 a92:	bf 01       	movw	r22, r30
 a94:	ff 27       	eor	r31, r31
 a96:	93 58       	subi	r25, 0x83	; 131
 a98:	5f 4f       	sbci	r21, 0xFF	; 255
 a9a:	3a f0       	brmi	.+14     	; 0xaaa <__divsf3_pse+0x70>
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	51 05       	cpc	r21, r1
 aa0:	78 f0       	brcs	.+30     	; 0xac0 <__divsf3_pse+0x86>
 aa2:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 aa6:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	e4 f3       	brlt	.-8      	; 0xaa6 <__divsf3_pse+0x6c>
 aae:	98 3e       	cpi	r25, 0xE8	; 232
 ab0:	d4 f3       	brlt	.-12     	; 0xaa6 <__divsf3_pse+0x6c>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f7 95       	ror	r31
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__divsf3_pse+0x78>
 ac0:	88 0f       	add	r24, r24
 ac2:	91 1d       	adc	r25, r1
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret
 acc:	e1 e0       	ldi	r30, 0x01	; 1
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	bb 1f       	adc	r27, r27
 ad6:	62 17       	cp	r22, r18
 ad8:	73 07       	cpc	r23, r19
 ada:	84 07       	cpc	r24, r20
 adc:	ba 07       	cpc	r27, r26
 ade:	20 f0       	brcs	.+8      	; 0xae8 <__divsf3_pse+0xae>
 ae0:	62 1b       	sub	r22, r18
 ae2:	73 0b       	sbc	r23, r19
 ae4:	84 0b       	sbc	r24, r20
 ae6:	ba 0b       	sbc	r27, r26
 ae8:	ee 1f       	adc	r30, r30
 aea:	88 f7       	brcc	.-30     	; 0xace <__divsf3_pse+0x94>
 aec:	e0 95       	com	r30
 aee:	08 95       	ret

00000af0 <__fixsfsi>:
 af0:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixunssfsi>
 af4:	68 94       	set
 af6:	b1 11       	cpse	r27, r1
 af8:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 afc:	08 95       	ret

00000afe <__fixunssfsi>:
 afe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_splitA>
 b02:	88 f0       	brcs	.+34     	; 0xb26 <__fixunssfsi+0x28>
 b04:	9f 57       	subi	r25, 0x7F	; 127
 b06:	98 f0       	brcs	.+38     	; 0xb2e <__fixunssfsi+0x30>
 b08:	b9 2f       	mov	r27, r25
 b0a:	99 27       	eor	r25, r25
 b0c:	b7 51       	subi	r27, 0x17	; 23
 b0e:	b0 f0       	brcs	.+44     	; 0xb3c <__fixunssfsi+0x3e>
 b10:	e1 f0       	breq	.+56     	; 0xb4a <__fixunssfsi+0x4c>
 b12:	66 0f       	add	r22, r22
 b14:	77 1f       	adc	r23, r23
 b16:	88 1f       	adc	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	1a f0       	brmi	.+6      	; 0xb22 <__fixunssfsi+0x24>
 b1c:	ba 95       	dec	r27
 b1e:	c9 f7       	brne	.-14     	; 0xb12 <__fixunssfsi+0x14>
 b20:	14 c0       	rjmp	.+40     	; 0xb4a <__fixunssfsi+0x4c>
 b22:	b1 30       	cpi	r27, 0x01	; 1
 b24:	91 f0       	breq	.+36     	; 0xb4a <__fixunssfsi+0x4c>
 b26:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_zero>
 b2a:	b1 e0       	ldi	r27, 0x01	; 1
 b2c:	08 95       	ret
 b2e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
 b32:	67 2f       	mov	r22, r23
 b34:	78 2f       	mov	r23, r24
 b36:	88 27       	eor	r24, r24
 b38:	b8 5f       	subi	r27, 0xF8	; 248
 b3a:	39 f0       	breq	.+14     	; 0xb4a <__fixunssfsi+0x4c>
 b3c:	b9 3f       	cpi	r27, 0xF9	; 249
 b3e:	cc f3       	brlt	.-14     	; 0xb32 <__fixunssfsi+0x34>
 b40:	86 95       	lsr	r24
 b42:	77 95       	ror	r23
 b44:	67 95       	ror	r22
 b46:	b3 95       	inc	r27
 b48:	d9 f7       	brne	.-10     	; 0xb40 <__fixunssfsi+0x42>
 b4a:	3e f4       	brtc	.+14     	; 0xb5a <__fixunssfsi+0x5c>
 b4c:	90 95       	com	r25
 b4e:	80 95       	com	r24
 b50:	70 95       	com	r23
 b52:	61 95       	neg	r22
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__floatunsisf>:
 b5c:	e8 94       	clt
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <__floatsisf+0x12>

00000b60 <__floatsisf>:
 b60:	97 fb       	bst	r25, 7
 b62:	3e f4       	brtc	.+14     	; 0xb72 <__floatsisf+0x12>
 b64:	90 95       	com	r25
 b66:	80 95       	com	r24
 b68:	70 95       	com	r23
 b6a:	61 95       	neg	r22
 b6c:	7f 4f       	sbci	r23, 0xFF	; 255
 b6e:	8f 4f       	sbci	r24, 0xFF	; 255
 b70:	9f 4f       	sbci	r25, 0xFF	; 255
 b72:	99 23       	and	r25, r25
 b74:	a9 f0       	breq	.+42     	; 0xba0 <__floatsisf+0x40>
 b76:	f9 2f       	mov	r31, r25
 b78:	96 e9       	ldi	r25, 0x96	; 150
 b7a:	bb 27       	eor	r27, r27
 b7c:	93 95       	inc	r25
 b7e:	f6 95       	lsr	r31
 b80:	87 95       	ror	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f1 11       	cpse	r31, r1
 b8a:	f8 cf       	rjmp	.-16     	; 0xb7c <__floatsisf+0x1c>
 b8c:	fa f4       	brpl	.+62     	; 0xbcc <__floatsisf+0x6c>
 b8e:	bb 0f       	add	r27, r27
 b90:	11 f4       	brne	.+4      	; 0xb96 <__floatsisf+0x36>
 b92:	60 ff       	sbrs	r22, 0
 b94:	1b c0       	rjmp	.+54     	; 0xbcc <__floatsisf+0x6c>
 b96:	6f 5f       	subi	r22, 0xFF	; 255
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255
 b9e:	16 c0       	rjmp	.+44     	; 0xbcc <__floatsisf+0x6c>
 ba0:	88 23       	and	r24, r24
 ba2:	11 f0       	breq	.+4      	; 0xba8 <__floatsisf+0x48>
 ba4:	96 e9       	ldi	r25, 0x96	; 150
 ba6:	11 c0       	rjmp	.+34     	; 0xbca <__floatsisf+0x6a>
 ba8:	77 23       	and	r23, r23
 baa:	21 f0       	breq	.+8      	; 0xbb4 <__floatsisf+0x54>
 bac:	9e e8       	ldi	r25, 0x8E	; 142
 bae:	87 2f       	mov	r24, r23
 bb0:	76 2f       	mov	r23, r22
 bb2:	05 c0       	rjmp	.+10     	; 0xbbe <__floatsisf+0x5e>
 bb4:	66 23       	and	r22, r22
 bb6:	71 f0       	breq	.+28     	; 0xbd4 <__floatsisf+0x74>
 bb8:	96 e8       	ldi	r25, 0x86	; 134
 bba:	86 2f       	mov	r24, r22
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	2a f0       	brmi	.+10     	; 0xbcc <__floatsisf+0x6c>
 bc2:	9a 95       	dec	r25
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	da f7       	brpl	.-10     	; 0xbc2 <__floatsisf+0x62>
 bcc:	88 0f       	add	r24, r24
 bce:	96 95       	lsr	r25
 bd0:	87 95       	ror	r24
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret

00000bd6 <__fp_cmp>:
 bd6:	99 0f       	add	r25, r25
 bd8:	00 08       	sbc	r0, r0
 bda:	55 0f       	add	r21, r21
 bdc:	aa 0b       	sbc	r26, r26
 bde:	e0 e8       	ldi	r30, 0x80	; 128
 be0:	fe ef       	ldi	r31, 0xFE	; 254
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	e8 07       	cpc	r30, r24
 be8:	f9 07       	cpc	r31, r25
 bea:	c0 f0       	brcs	.+48     	; 0xc1c <__fp_cmp+0x46>
 bec:	12 16       	cp	r1, r18
 bee:	13 06       	cpc	r1, r19
 bf0:	e4 07       	cpc	r30, r20
 bf2:	f5 07       	cpc	r31, r21
 bf4:	98 f0       	brcs	.+38     	; 0xc1c <__fp_cmp+0x46>
 bf6:	62 1b       	sub	r22, r18
 bf8:	73 0b       	sbc	r23, r19
 bfa:	84 0b       	sbc	r24, r20
 bfc:	95 0b       	sbc	r25, r21
 bfe:	39 f4       	brne	.+14     	; 0xc0e <__fp_cmp+0x38>
 c00:	0a 26       	eor	r0, r26
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_cmp+0x46>
 c04:	23 2b       	or	r18, r19
 c06:	24 2b       	or	r18, r20
 c08:	25 2b       	or	r18, r21
 c0a:	21 f4       	brne	.+8      	; 0xc14 <__fp_cmp+0x3e>
 c0c:	08 95       	ret
 c0e:	0a 26       	eor	r0, r26
 c10:	09 f4       	brne	.+2      	; 0xc14 <__fp_cmp+0x3e>
 c12:	a1 40       	sbci	r26, 0x01	; 1
 c14:	a6 95       	lsr	r26
 c16:	8f ef       	ldi	r24, 0xFF	; 255
 c18:	81 1d       	adc	r24, r1
 c1a:	81 1d       	adc	r24, r1
 c1c:	08 95       	ret

00000c1e <__fp_inf>:
 c1e:	97 f9       	bld	r25, 7
 c20:	9f 67       	ori	r25, 0x7F	; 127
 c22:	80 e8       	ldi	r24, 0x80	; 128
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	08 95       	ret

00000c2a <__fp_nan>:
 c2a:	9f ef       	ldi	r25, 0xFF	; 255
 c2c:	80 ec       	ldi	r24, 0xC0	; 192
 c2e:	08 95       	ret

00000c30 <__fp_pscA>:
 c30:	00 24       	eor	r0, r0
 c32:	0a 94       	dec	r0
 c34:	16 16       	cp	r1, r22
 c36:	17 06       	cpc	r1, r23
 c38:	18 06       	cpc	r1, r24
 c3a:	09 06       	cpc	r0, r25
 c3c:	08 95       	ret

00000c3e <__fp_pscB>:
 c3e:	00 24       	eor	r0, r0
 c40:	0a 94       	dec	r0
 c42:	12 16       	cp	r1, r18
 c44:	13 06       	cpc	r1, r19
 c46:	14 06       	cpc	r1, r20
 c48:	05 06       	cpc	r0, r21
 c4a:	08 95       	ret

00000c4c <__fp_round>:
 c4c:	09 2e       	mov	r0, r25
 c4e:	03 94       	inc	r0
 c50:	00 0c       	add	r0, r0
 c52:	11 f4       	brne	.+4      	; 0xc58 <__fp_round+0xc>
 c54:	88 23       	and	r24, r24
 c56:	52 f0       	brmi	.+20     	; 0xc6c <__fp_round+0x20>
 c58:	bb 0f       	add	r27, r27
 c5a:	40 f4       	brcc	.+16     	; 0xc6c <__fp_round+0x20>
 c5c:	bf 2b       	or	r27, r31
 c5e:	11 f4       	brne	.+4      	; 0xc64 <__fp_round+0x18>
 c60:	60 ff       	sbrs	r22, 0
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <__fp_round+0x20>
 c64:	6f 5f       	subi	r22, 0xFF	; 255
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	08 95       	ret

00000c6e <__fp_split3>:
 c6e:	57 fd       	sbrc	r21, 7
 c70:	90 58       	subi	r25, 0x80	; 128
 c72:	44 0f       	add	r20, r20
 c74:	55 1f       	adc	r21, r21
 c76:	59 f0       	breq	.+22     	; 0xc8e <__fp_splitA+0x10>
 c78:	5f 3f       	cpi	r21, 0xFF	; 255
 c7a:	71 f0       	breq	.+28     	; 0xc98 <__fp_splitA+0x1a>
 c7c:	47 95       	ror	r20

00000c7e <__fp_splitA>:
 c7e:	88 0f       	add	r24, r24
 c80:	97 fb       	bst	r25, 7
 c82:	99 1f       	adc	r25, r25
 c84:	61 f0       	breq	.+24     	; 0xc9e <__fp_splitA+0x20>
 c86:	9f 3f       	cpi	r25, 0xFF	; 255
 c88:	79 f0       	breq	.+30     	; 0xca8 <__fp_splitA+0x2a>
 c8a:	87 95       	ror	r24
 c8c:	08 95       	ret
 c8e:	12 16       	cp	r1, r18
 c90:	13 06       	cpc	r1, r19
 c92:	14 06       	cpc	r1, r20
 c94:	55 1f       	adc	r21, r21
 c96:	f2 cf       	rjmp	.-28     	; 0xc7c <__fp_split3+0xe>
 c98:	46 95       	lsr	r20
 c9a:	f1 df       	rcall	.-30     	; 0xc7e <__fp_splitA>
 c9c:	08 c0       	rjmp	.+16     	; 0xcae <__fp_splitA+0x30>
 c9e:	16 16       	cp	r1, r22
 ca0:	17 06       	cpc	r1, r23
 ca2:	18 06       	cpc	r1, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	f1 cf       	rjmp	.-30     	; 0xc8a <__fp_splitA+0xc>
 ca8:	86 95       	lsr	r24
 caa:	71 05       	cpc	r23, r1
 cac:	61 05       	cpc	r22, r1
 cae:	08 94       	sec
 cb0:	08 95       	ret

00000cb2 <__fp_zero>:
 cb2:	e8 94       	clt

00000cb4 <__fp_szero>:
 cb4:	bb 27       	eor	r27, r27
 cb6:	66 27       	eor	r22, r22
 cb8:	77 27       	eor	r23, r23
 cba:	cb 01       	movw	r24, r22
 cbc:	97 f9       	bld	r25, 7
 cbe:	08 95       	ret

00000cc0 <__mulsf3>:
 cc0:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3x>
 cc4:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
 cc8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
 ccc:	38 f0       	brcs	.+14     	; 0xcdc <__mulsf3+0x1c>
 cce:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
 cd2:	20 f0       	brcs	.+8      	; 0xcdc <__mulsf3+0x1c>
 cd4:	95 23       	and	r25, r21
 cd6:	11 f0       	breq	.+4      	; 0xcdc <__mulsf3+0x1c>
 cd8:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 cdc:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
 ce0:	11 24       	eor	r1, r1
 ce2:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>

00000ce6 <__mulsf3x>:
 ce6:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
 cea:	70 f3       	brcs	.-36     	; 0xcc8 <__mulsf3+0x8>

00000cec <__mulsf3_pse>:
 cec:	95 9f       	mul	r25, r21
 cee:	c1 f3       	breq	.-16     	; 0xce0 <__mulsf3+0x20>
 cf0:	95 0f       	add	r25, r21
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	55 1f       	adc	r21, r21
 cf6:	62 9f       	mul	r22, r18
 cf8:	f0 01       	movw	r30, r0
 cfa:	72 9f       	mul	r23, r18
 cfc:	bb 27       	eor	r27, r27
 cfe:	f0 0d       	add	r31, r0
 d00:	b1 1d       	adc	r27, r1
 d02:	63 9f       	mul	r22, r19
 d04:	aa 27       	eor	r26, r26
 d06:	f0 0d       	add	r31, r0
 d08:	b1 1d       	adc	r27, r1
 d0a:	aa 1f       	adc	r26, r26
 d0c:	64 9f       	mul	r22, r20
 d0e:	66 27       	eor	r22, r22
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	66 1f       	adc	r22, r22
 d16:	82 9f       	mul	r24, r18
 d18:	22 27       	eor	r18, r18
 d1a:	b0 0d       	add	r27, r0
 d1c:	a1 1d       	adc	r26, r1
 d1e:	62 1f       	adc	r22, r18
 d20:	73 9f       	mul	r23, r19
 d22:	b0 0d       	add	r27, r0
 d24:	a1 1d       	adc	r26, r1
 d26:	62 1f       	adc	r22, r18
 d28:	83 9f       	mul	r24, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	22 1f       	adc	r18, r18
 d30:	74 9f       	mul	r23, r20
 d32:	33 27       	eor	r19, r19
 d34:	a0 0d       	add	r26, r0
 d36:	61 1d       	adc	r22, r1
 d38:	23 1f       	adc	r18, r19
 d3a:	84 9f       	mul	r24, r20
 d3c:	60 0d       	add	r22, r0
 d3e:	21 1d       	adc	r18, r1
 d40:	82 2f       	mov	r24, r18
 d42:	76 2f       	mov	r23, r22
 d44:	6a 2f       	mov	r22, r26
 d46:	11 24       	eor	r1, r1
 d48:	9f 57       	subi	r25, 0x7F	; 127
 d4a:	50 40       	sbci	r21, 0x00	; 0
 d4c:	9a f0       	brmi	.+38     	; 0xd74 <__mulsf3_pse+0x88>
 d4e:	f1 f0       	breq	.+60     	; 0xd8c <__mulsf3_pse+0xa0>
 d50:	88 23       	and	r24, r24
 d52:	4a f0       	brmi	.+18     	; 0xd66 <__mulsf3_pse+0x7a>
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	bb 1f       	adc	r27, r27
 d5a:	66 1f       	adc	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	91 50       	subi	r25, 0x01	; 1
 d62:	50 40       	sbci	r21, 0x00	; 0
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__mulsf3_pse+0x64>
 d66:	9e 3f       	cpi	r25, 0xFE	; 254
 d68:	51 05       	cpc	r21, r1
 d6a:	80 f0       	brcs	.+32     	; 0xd8c <__mulsf3_pse+0xa0>
 d6c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
 d70:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
 d74:	5f 3f       	cpi	r21, 0xFF	; 255
 d76:	e4 f3       	brlt	.-8      	; 0xd70 <__mulsf3_pse+0x84>
 d78:	98 3e       	cpi	r25, 0xE8	; 232
 d7a:	d4 f3       	brlt	.-12     	; 0xd70 <__mulsf3_pse+0x84>
 d7c:	86 95       	lsr	r24
 d7e:	77 95       	ror	r23
 d80:	67 95       	ror	r22
 d82:	b7 95       	ror	r27
 d84:	f7 95       	ror	r31
 d86:	e7 95       	ror	r30
 d88:	9f 5f       	subi	r25, 0xFF	; 255
 d8a:	c1 f7       	brne	.-16     	; 0xd7c <__mulsf3_pse+0x90>
 d8c:	fe 2b       	or	r31, r30
 d8e:	88 0f       	add	r24, r24
 d90:	91 1d       	adc	r25, r1
 d92:	96 95       	lsr	r25
 d94:	87 95       	ror	r24
 d96:	97 f9       	bld	r25, 7
 d98:	08 95       	ret

00000d9a <itoa>:
 d9a:	45 32       	cpi	r20, 0x25	; 37
 d9c:	51 05       	cpc	r21, r1
 d9e:	20 f4       	brcc	.+8      	; 0xda8 <itoa+0xe>
 da0:	42 30       	cpi	r20, 0x02	; 2
 da2:	10 f0       	brcs	.+4      	; 0xda8 <itoa+0xe>
 da4:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__itoa_ncheck>
 da8:	fb 01       	movw	r30, r22
 daa:	10 82       	st	Z, r1
 dac:	cb 01       	movw	r24, r22
 dae:	08 95       	ret

00000db0 <__itoa_ncheck>:
 db0:	bb 27       	eor	r27, r27
 db2:	4a 30       	cpi	r20, 0x0A	; 10
 db4:	31 f4       	brne	.+12     	; 0xdc2 <__itoa_ncheck+0x12>
 db6:	99 23       	and	r25, r25
 db8:	22 f4       	brpl	.+8      	; 0xdc2 <__itoa_ncheck+0x12>
 dba:	bd e2       	ldi	r27, 0x2D	; 45
 dbc:	90 95       	com	r25
 dbe:	81 95       	neg	r24
 dc0:	9f 4f       	sbci	r25, 0xFF	; 255
 dc2:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__utoa_common>

00000dc6 <__utoa_ncheck>:
 dc6:	bb 27       	eor	r27, r27

00000dc8 <__utoa_common>:
 dc8:	fb 01       	movw	r30, r22
 dca:	55 27       	eor	r21, r21
 dcc:	aa 27       	eor	r26, r26
 dce:	88 0f       	add	r24, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	aa 1f       	adc	r26, r26
 dd4:	a4 17       	cp	r26, r20
 dd6:	10 f0       	brcs	.+4      	; 0xddc <__utoa_common+0x14>
 dd8:	a4 1b       	sub	r26, r20
 dda:	83 95       	inc	r24
 ddc:	50 51       	subi	r21, 0x10	; 16
 dde:	b9 f7       	brne	.-18     	; 0xdce <__utoa_common+0x6>
 de0:	a0 5d       	subi	r26, 0xD0	; 208
 de2:	aa 33       	cpi	r26, 0x3A	; 58
 de4:	08 f0       	brcs	.+2      	; 0xde8 <__utoa_common+0x20>
 de6:	a9 5d       	subi	r26, 0xD9	; 217
 de8:	a1 93       	st	Z+, r26
 dea:	00 97       	sbiw	r24, 0x00	; 0
 dec:	79 f7       	brne	.-34     	; 0xdcc <__utoa_common+0x4>
 dee:	b1 11       	cpse	r27, r1
 df0:	b1 93       	st	Z+, r27
 df2:	11 92       	st	Z+, r1
 df4:	cb 01       	movw	r24, r22
 df6:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <strrev>

00000dfa <strrev>:
 dfa:	dc 01       	movw	r26, r24
 dfc:	fc 01       	movw	r30, r24
 dfe:	67 2f       	mov	r22, r23
 e00:	71 91       	ld	r23, Z+
 e02:	77 23       	and	r23, r23
 e04:	e1 f7       	brne	.-8      	; 0xdfe <strrev+0x4>
 e06:	32 97       	sbiw	r30, 0x02	; 2
 e08:	04 c0       	rjmp	.+8      	; 0xe12 <strrev+0x18>
 e0a:	7c 91       	ld	r23, X
 e0c:	6d 93       	st	X+, r22
 e0e:	70 83       	st	Z, r23
 e10:	62 91       	ld	r22, -Z
 e12:	ae 17       	cp	r26, r30
 e14:	bf 07       	cpc	r27, r31
 e16:	c8 f3       	brcs	.-14     	; 0xe0a <strrev+0x10>
 e18:	08 95       	ret

00000e1a <_exit>:
 e1a:	f8 94       	cli

00000e1c <__stop_program>:
 e1c:	ff cf       	rjmp	.-2      	; 0xe1c <__stop_program>
