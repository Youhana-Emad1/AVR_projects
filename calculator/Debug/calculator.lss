
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00003a40  00003ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002424  00000000  00000000  00003c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cb0  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  00006ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  000070ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  00009739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  0000ac0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000beb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000c393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <main>
      7a:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e9       	ldi	r26, 0x96	; 150
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e9       	ldi	r24, 0x96	; 150
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e9       	ldi	r22, 0x96	; 150
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__epilogue_restores__+0x10>

0000077a <__nesf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__nesf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__nesf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__nesf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	e2 56       	subi	r30, 0x62	; 98
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_private.h"
#include "DIO_interface.h"
//setting pin direction
void DIO_VidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	27 97       	sbiw	r28, 0x07	; 7
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	6a 83       	std	Y+2, r22	; 0x02
     e60:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction==Input)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	88 23       	and	r24, r24
     e66:	09 f0       	breq	.+2      	; 0xe6a <DIO_VidSetPinDirection+0x22>
     e68:	74 c0       	rjmp	.+232    	; 0xf52 <DIO_VidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port){
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3f 83       	std	Y+7, r19	; 0x07
     e72:	2e 83       	std	Y+6, r18	; 0x06
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	59 f1       	breq	.+86     	; 0xed4 <DIO_VidSetPinDirection+0x8c>
     e7e:	2e 81       	ldd	r18, Y+6	; 0x06
     e80:	3f 81       	ldd	r19, Y+7	; 0x07
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	2c f4       	brge	.+10     	; 0xe92 <DIO_VidSetPinDirection+0x4a>
     e88:	8e 81       	ldd	r24, Y+6	; 0x06
     e8a:	9f 81       	ldd	r25, Y+7	; 0x07
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	69 f0       	breq	.+26     	; 0xeaa <DIO_VidSetPinDirection+0x62>
     e90:	d2 c0       	rjmp	.+420    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
     e92:	2e 81       	ldd	r18, Y+6	; 0x06
     e94:	3f 81       	ldd	r19, Y+7	; 0x07
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	89 f1       	breq	.+98     	; 0xefe <DIO_VidSetPinDirection+0xb6>
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	91 05       	cpc	r25, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <DIO_VidSetPinDirection+0x60>
     ea6:	40 c0       	rjmp	.+128    	; 0xf28 <DIO_VidSetPinDirection+0xe0>
     ea8:	c6 c0       	rjmp	.+396    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		case Port_A: CLR_BIT(DDRA,Copy_u8Pin);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_VidSetPinDirection+0x80>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_VidSetPinDirection+0x7c>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	b1 c0       	rjmp	.+354    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_B: CLR_BIT(DDRB,Copy_u8Pin);
     ed4:	a7 e3       	ldi	r26, 0x37	; 55
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e7 e3       	ldi	r30, 0x37	; 55
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_VidSetPinDirection+0xaa>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_VidSetPinDirection+0xa6>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	9c c0       	rjmp	.+312    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_C: CLR_BIT(DDRC,Copy_u8Pin);
     efe:	a4 e3       	ldi	r26, 0x34	; 52
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_VidSetPinDirection+0xd4>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_VidSetPinDirection+0xd0>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	87 c0       	rjmp	.+270    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_D: CLR_BIT(DDRD,Copy_u8Pin);
     f28:	a1 e3       	ldi	r26, 0x31	; 49
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e1 e3       	ldi	r30, 0x31	; 49
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_VidSetPinDirection+0xfe>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_VidSetPinDirection+0xfa>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	72 c0       	rjmp	.+228    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		}
	}
	else if(Copy_u8Direction==Output)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_VidSetPinDirection+0x112>
     f58:	6e c0       	rjmp	.+220    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port){
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	49 f1       	breq	.+82     	; 0xfc0 <DIO_VidSetPinDirection+0x178>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	2c f4       	brge	.+10     	; 0xf82 <DIO_VidSetPinDirection+0x13a>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	61 f0       	breq	.+24     	; 0xf98 <DIO_VidSetPinDirection+0x150>
     f80:	5a c0       	rjmp	.+180    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	71 f1       	breq	.+92     	; 0xfe8 <DIO_VidSetPinDirection+0x1a0>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	e9 f1       	breq	.+122    	; 0x1010 <DIO_VidSetPinDirection+0x1c8>
     f96:	4f c0       	rjmp	.+158    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		case Port_A:SET_BIT(DDRA,Copy_u8Pin);
     f98:	aa e3       	ldi	r26, 0x3A	; 58
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_VidSetPinDirection+0x16e>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_VidSetPinDirection+0x16a>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	3b c0       	rjmp	.+118    	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_B:SET_BIT(DDRB,Copy_u8Pin);
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_VidSetPinDirection+0x196>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_VidSetPinDirection+0x192>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_C:SET_BIT(DDRC,Copy_u8Pin);
     fe8:	a4 e3       	ldi	r26, 0x34	; 52
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VidSetPinDirection+0x1be>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VidSetPinDirection+0x1ba>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	13 c0       	rjmp	.+38     	; 0x1036 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_D:SET_BIT(DDRD,Copy_u8Pin);
    1010:	a1 e3       	ldi	r26, 0x31	; 49
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e3       	ldi	r30, 0x31	; 49
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_VidSetPinDirection+0x1e6>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_VidSetPinDirection+0x1e2>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    1036:	27 96       	adiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <DIO_VidSetPinValue>:

//setting pin value
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8pin,u8 Copy_u8Value){
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	27 97       	sbiw	r28, 0x07	; 7
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	6a 83       	std	Y+2, r22	; 0x02
    1060:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==PinLow)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 23       	and	r24, r24
    1066:	09 f0       	breq	.+2      	; 0x106a <DIO_VidSetPinValue+0x22>
    1068:	74 c0       	rjmp	.+232    	; 0x1152 <DIO_VidSetPinValue+0x10a>
	{
		switch(Copy_u8Port){
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3f 83       	std	Y+7, r19	; 0x07
    1072:	2e 83       	std	Y+6, r18	; 0x06
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	59 f1       	breq	.+86     	; 0x10d4 <DIO_VidSetPinValue+0x8c>
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	2c f4       	brge	.+10     	; 0x1092 <DIO_VidSetPinValue+0x4a>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f0       	breq	.+26     	; 0x10aa <DIO_VidSetPinValue+0x62>
    1090:	d2 c0       	rjmp	.+420    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
    1092:	2e 81       	ldd	r18, Y+6	; 0x06
    1094:	3f 81       	ldd	r19, Y+7	; 0x07
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	89 f1       	breq	.+98     	; 0x10fe <DIO_VidSetPinValue+0xb6>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_VidSetPinValue+0x60>
    10a6:	40 c0       	rjmp	.+128    	; 0x1128 <DIO_VidSetPinValue+0xe0>
    10a8:	c6 c0       	rjmp	.+396    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		case Port_A:CLR_BIT(PORTA,Copy_u8pin);
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_VidSetPinValue+0x80>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_VidSetPinValue+0x7c>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	b1 c0       	rjmp	.+354    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_B:CLR_BIT(PORTB,Copy_u8pin);
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_VidSetPinValue+0xaa>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_VidSetPinValue+0xa6>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	9c c0       	rjmp	.+312    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_C:CLR_BIT(PORTC,Copy_u8pin);
    10fe:	a5 e3       	ldi	r26, 0x35	; 53
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_VidSetPinValue+0xd4>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_VidSetPinValue+0xd0>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	87 c0       	rjmp	.+270    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_D:CLR_BIT(PORTD,Copy_u8pin);
    1128:	a2 e3       	ldi	r26, 0x32	; 50
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e2 e3       	ldi	r30, 0x32	; 50
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_VidSetPinValue+0xfe>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_VidSetPinValue+0xfa>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	72 c0       	rjmp	.+228    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		}

	}
	else if(Copy_u8Value==PinHigh)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	09 f0       	breq	.+2      	; 0x115a <DIO_VidSetPinValue+0x112>
    1158:	6e c0       	rjmp	.+220    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_u8Port){
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	49 f1       	breq	.+82     	; 0x11c0 <DIO_VidSetPinValue+0x178>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <DIO_VidSetPinValue+0x13a>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <DIO_VidSetPinValue+0x150>
    1180:	5a c0       	rjmp	.+180    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	71 f1       	breq	.+92     	; 0x11e8 <DIO_VidSetPinValue+0x1a0>
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	e9 f1       	breq	.+122    	; 0x1210 <DIO_VidSetPinValue+0x1c8>
    1196:	4f c0       	rjmp	.+158    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		case Port_A:SET_BIT(PORTA,Copy_u8pin);
    1198:	ab e3       	ldi	r26, 0x3B	; 59
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	eb e3       	ldi	r30, 0x3B	; 59
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_VidSetPinValue+0x16e>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_VidSetPinValue+0x16a>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	3b c0       	rjmp	.+118    	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_B:SET_BIT(PORTB,Copy_u8pin);
    11c0:	a8 e3       	ldi	r26, 0x38	; 56
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e8 e3       	ldi	r30, 0x38	; 56
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_VidSetPinValue+0x196>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_VidSetPinValue+0x192>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	27 c0       	rjmp	.+78     	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_C:SET_BIT(PORTC,Copy_u8pin);
    11e8:	a5 e3       	ldi	r26, 0x35	; 53
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e3       	ldi	r30, 0x35	; 53
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_VidSetPinValue+0x1be>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_VidSetPinValue+0x1ba>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	13 c0       	rjmp	.+38     	; 0x1236 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_D:SET_BIT(PORTD,Copy_u8pin);
    1210:	a2 e3       	ldi	r26, 0x32	; 50
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e2 e3       	ldi	r30, 0x32	; 50
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_VidSetPinValue+0x1e6>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_VidSetPinValue+0x1e2>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
	else
	{

	}

}
    1236:	27 96       	adiw	r28, 0x07	; 7
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <DIO_VidgetPinValue>:

//getting pin value
void DIO_VidgetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *pu8Data){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_VidgetPinValue+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <DIO_VidgetPinValue+0x8>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_VidgetPinValue+0xa>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	6a 83       	std	Y+2, r22	; 0x02
    125a:	5c 83       	std	Y+4, r21	; 0x04
    125c:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3e 83       	std	Y+6, r19	; 0x06
    1266:	2d 83       	std	Y+5, r18	; 0x05
    1268:	4d 81       	ldd	r20, Y+5	; 0x05
    126a:	5e 81       	ldd	r21, Y+6	; 0x06
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	51 05       	cpc	r21, r1
    1270:	59 f1       	breq	.+86     	; 0x12c8 <DIO_VidgetPinValue+0x80>
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	9e 81       	ldd	r25, Y+6	; 0x06
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <DIO_VidgetPinValue+0x40>
    127c:	2d 81       	ldd	r18, Y+5	; 0x05
    127e:	3e 81       	ldd	r19, Y+6	; 0x06
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	69 f0       	breq	.+26     	; 0x12a0 <DIO_VidgetPinValue+0x58>
    1286:	5b c0       	rjmp	.+182    	; 0x133e <DIO_VidgetPinValue+0xf6>
    1288:	4d 81       	ldd	r20, Y+5	; 0x05
    128a:	5e 81       	ldd	r21, Y+6	; 0x06
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	51 05       	cpc	r21, r1
    1290:	79 f1       	breq	.+94     	; 0x12f0 <DIO_VidgetPinValue+0xa8>
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <DIO_VidgetPinValue+0x56>
    129c:	3d c0       	rjmp	.+122    	; 0x1318 <DIO_VidgetPinValue+0xd0>
    129e:	4f c0       	rjmp	.+158    	; 0x133e <DIO_VidgetPinValue+0xf6>
	case Port_A:*pu8Data=GET_BIT(PINA,Copy_u8Pin);
    12a0:	e9 e3       	ldi	r30, 0x39	; 57
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_VidgetPinValue+0x70>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_VidgetPinValue+0x6c>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	80 83       	st	Z, r24
    12c6:	3b c0       	rjmp	.+118    	; 0x133e <DIO_VidgetPinValue+0xf6>
	break;
	case Port_B:*pu8Data=GET_BIT(PINB,Copy_u8Pin);
    12c8:	e6 e3       	ldi	r30, 0x36	; 54
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_VidgetPinValue+0x98>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_VidgetPinValue+0x94>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ea:	fc 81       	ldd	r31, Y+4	; 0x04
    12ec:	80 83       	st	Z, r24
    12ee:	27 c0       	rjmp	.+78     	; 0x133e <DIO_VidgetPinValue+0xf6>
	break;
	case Port_C:*pu8Data=GET_BIT(PINC,Copy_u8Pin);
    12f0:	e3 e3       	ldi	r30, 0x33	; 51
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_VidgetPinValue+0xc0>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_VidgetPinValue+0xbc>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	eb 81       	ldd	r30, Y+3	; 0x03
    1312:	fc 81       	ldd	r31, Y+4	; 0x04
    1314:	80 83       	st	Z, r24
    1316:	13 c0       	rjmp	.+38     	; 0x133e <DIO_VidgetPinValue+0xf6>
	break;
	case Port_D:*pu8Data=GET_BIT(PIND,Copy_u8Pin);
    1318:	e0 e3       	ldi	r30, 0x30	; 48
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_VidgetPinValue+0xe8>
    132c:	55 95       	asr	r21
    132e:	47 95       	ror	r20
    1330:	8a 95       	dec	r24
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_VidgetPinValue+0xe4>
    1334:	ca 01       	movw	r24, r20
    1336:	81 70       	andi	r24, 0x01	; 1
    1338:	eb 81       	ldd	r30, Y+3	; 0x03
    133a:	fc 81       	ldd	r31, Y+4	; 0x04
    133c:	80 83       	st	Z, r24
	break;
	}

}
    133e:	26 96       	adiw	r28, 0x06	; 6
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DIO_VidSetPortDirection>:

//setting port direction
void DIO_VidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction){
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <DIO_VidSetPortDirection+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_VidSetPortDirection+0x8>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3c 83       	std	Y+4, r19	; 0x04
    1368:	2b 83       	std	Y+3, r18	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <DIO_VidSetPortDirection+0x58>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	3c 81       	ldd	r19, Y+4	; 0x04
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <DIO_VidSetPortDirection+0x38>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <DIO_VidSetPortDirection+0x4e>
    1386:	1e c0       	rjmp	.+60     	; 0x13c4 <DIO_VidSetPortDirection+0x74>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <DIO_VidSetPortDirection+0x62>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	91 05       	cpc	r25, r1
    139a:	81 f0       	breq	.+32     	; 0x13bc <DIO_VidSetPortDirection+0x6c>
    139c:	13 c0       	rjmp	.+38     	; 0x13c4 <DIO_VidSetPortDirection+0x74>
				case Port_A: DDRA=Copy_u8Direction;
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_B: DDRB=Copy_u8Direction;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_C: DDRC=Copy_u8Direction;
    13b2:	e4 e3       	ldi	r30, 0x34	; 52
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_D: DDRD=Copy_u8Direction;
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
				break;
				}
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <DIO_VidSetPortValue>:
//Set Port Value
void DIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <DIO_VidSetPortValue+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <DIO_VidSetPortValue+0x8>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3c 83       	std	Y+4, r19	; 0x04
    13ea:	2b 83       	std	Y+3, r18	; 0x03
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	91 05       	cpc	r25, r1
    13f4:	d1 f0       	breq	.+52     	; 0x142a <DIO_VidSetPortValue+0x58>
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	3c 81       	ldd	r19, Y+4	; 0x04
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	2c f4       	brge	.+10     	; 0x140a <DIO_VidSetPortValue+0x38>
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	61 f0       	breq	.+24     	; 0x1420 <DIO_VidSetPortValue+0x4e>
    1408:	1e c0       	rjmp	.+60     	; 0x1446 <DIO_VidSetPortValue+0x74>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	81 f0       	breq	.+32     	; 0x1434 <DIO_VidSetPortValue+0x62>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	91 05       	cpc	r25, r1
    141c:	81 f0       	breq	.+32     	; 0x143e <DIO_VidSetPortValue+0x6c>
    141e:	13 c0       	rjmp	.+38     	; 0x1446 <DIO_VidSetPortValue+0x74>
	case Port_A: PORTA=Copy_u8Value;
    1420:	eb e3       	ldi	r30, 0x3B	; 59
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	80 83       	st	Z, r24
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <DIO_VidSetPortValue+0x74>
	break;
	case Port_B: PORTB=Copy_u8Value;
    142a:	e8 e3       	ldi	r30, 0x38	; 56
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	80 83       	st	Z, r24
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <DIO_VidSetPortValue+0x74>
	break;
	case Port_C: PORTC=Copy_u8Value;
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <DIO_VidSetPortValue+0x74>
	break;
	case Port_D: PORTD=Copy_u8Value;
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
	break;
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_VidGetPortValue>:

//Get Port Value
void DIO_VidGetPortValue(u8 Copy_u8Port,u8 *pu8Data)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_VidGetPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_VidGetPortValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	7b 83       	std	Y+3, r23	; 0x03
    1466:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3d 83       	std	Y+5, r19	; 0x05
    1470:	2c 83       	std	Y+4, r18	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	e1 f0       	breq	.+56     	; 0x14b4 <DIO_VidGetPortValue+0x60>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <DIO_VidGetPortValue+0x3c>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <DIO_VidGetPortValue+0x52>
    148e:	26 c0       	rjmp	.+76     	; 0x14dc <DIO_VidGetPortValue+0x88>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	a1 f0       	breq	.+40     	; 0x14c2 <DIO_VidGetPortValue+0x6e>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	b1 f0       	breq	.+44     	; 0x14d0 <DIO_VidGetPortValue+0x7c>
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <DIO_VidGetPortValue+0x88>
	case Port_A:*pu8Data=PINA;
    14a6:	e9 e3       	ldi	r30, 0x39	; 57
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	ea 81       	ldd	r30, Y+2	; 0x02
    14ae:	fb 81       	ldd	r31, Y+3	; 0x03
    14b0:	80 83       	st	Z, r24
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <DIO_VidGetPortValue+0x88>
	break;
	case Port_B:*pu8Data=PINB;
    14b4:	e6 e3       	ldi	r30, 0x36	; 54
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	ea 81       	ldd	r30, Y+2	; 0x02
    14bc:	fb 81       	ldd	r31, Y+3	; 0x03
    14be:	80 83       	st	Z, r24
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <DIO_VidGetPortValue+0x88>
	break;
	case Port_C:*pu8Data=PINC;
    14c2:	e3 e3       	ldi	r30, 0x33	; 51
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	ea 81       	ldd	r30, Y+2	; 0x02
    14ca:	fb 81       	ldd	r31, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <DIO_VidGetPortValue+0x88>
	break;
	case Port_D:*pu8Data=PIND;
    14d0:	e0 e3       	ldi	r30, 0x30	; 48
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	ea 81       	ldd	r30, Y+2	; 0x02
    14d8:	fb 81       	ldd	r31, Y+3	; 0x03
    14da:	80 83       	st	Z, r24
	break;
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <KPD_VidInit>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include <util/delay.h>

void KPD_VidInit(void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
	//Set Columns as Output
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_0,Output);
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	61 e0       	ldi	r22, 0x01	; 1
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_1,Output);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_2,Output);
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	63 e0       	ldi	r22, 0x03	; 3
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Col,KPD_COLUMN_3,Output);
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	64 e0       	ldi	r22, 0x04	; 4
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	//Set Columns as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_0,PinHigh);
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_1,PinHigh);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	62 e0       	ldi	r22, 0x02	; 2
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_2,PinHigh);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	63 e0       	ldi	r22, 0x03	; 3
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Col,KPD_COLUMN_3,PinHigh);
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	64 e0       	ldi	r22, 0x04	; 4
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>

	//Set Row as Input
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_0,Input);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_1,Input);
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_2,Input);
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT_Row,KPD_ROW_3,Input);
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	64 e0       	ldi	r22, 0x04	; 4
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	//Set Row as PinHigh
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_0,PinHigh);
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_1,PinHigh);
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_2,PinHigh);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	63 e0       	ldi	r22, 0x03	; 3
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_PORT_Row,KPD_ROW_3,PinHigh);
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	64 e0       	ldi	r22, 0x04	; 4
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>



}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <Kpd_U8GetPressedKey>:
u8 Kpd_U8GetPressedKey(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <Kpd_U8GetPressedKey+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <Kpd_U8GetPressedKey+0x8>
    15a2:	0f 92       	push	r0
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	/*************value if button was not pressed******************/
	u8 Local_u8_Pressed_Key=KPD_NO_PRESSED_KEY;
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	8b 83       	std	Y+3, r24	; 0x03
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
    15ac:	1a 82       	std	Y+2, r1	; 0x02
    15ae:	5e c0       	rjmp	.+188    	; 0x166c <Kpd_U8GetPressedKey+0xd2>
	{
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	ee 55       	subi	r30, 0x5E	; 94
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	90 81       	ld	r25, Z
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	69 2f       	mov	r22, r25
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	3d c0       	rjmp	.+122    	; 0x1646 <Kpd_U8GetPressedKey+0xac>
		{
			DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 56       	subi	r30, 0x62	; 98
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	90 81       	ld	r25, Z
    15da:	9e 01       	movw	r18, r28
    15dc:	2c 5f       	subi	r18, 0xFC	; 252
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	69 2f       	mov	r22, r25
    15e4:	a9 01       	movw	r20, r18
    15e6:	0e 94 24 09 	call	0x1248	; 0x1248 <DIO_VidgetPinValue>

			 /*****CHECK IF KEY IS PREESED*******/

			if(Local_u8_Pint_State==PinLow)
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	88 23       	and	r24, r24
    15ee:	41 f5       	brne	.+80     	; 0x1640 <Kpd_U8GetPressedKey+0xa6>
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	48 2f       	mov	r20, r24
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	ca 01       	movw	r24, r20
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	fc 01       	movw	r30, r24
    160c:	ea 55       	subi	r30, 0x5A	; 90
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	80 81       	ld	r24, Z
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <Kpd_U8GetPressedKey+0x9a>

				while(Local_u8_Pint_State==PinLow)
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	fc 01       	movw	r30, r24
    161e:	e2 56       	subi	r30, 0x62	; 98
    1620:	fe 4f       	sbci	r31, 0xFE	; 254
    1622:	90 81       	ld	r25, Z
    1624:	9e 01       	movw	r18, r28
    1626:	2c 5f       	subi	r18, 0xFC	; 252
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	69 2f       	mov	r22, r25
    162e:	a9 01       	movw	r20, r18
    1630:	0e 94 24 09 	call	0x1248	; 0x1248 <DIO_VidgetPinValue>

			if(Local_u8_Pint_State==PinLow)
			{
				Local_u8_Pressed_Key=Local_u8_Kpd_Arr[Local_u8_Row_Counter][Local_u8_Column_Counter];

				while(Local_u8_Pint_State==PinLow)
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	88 23       	and	r24, r24
    1638:	71 f3       	breq	.-36     	; 0x1616 <Kpd_U8GetPressedKey+0x7c>
				{
					DIO_VidgetPinValue(KPD_PORT_Row,Local_u8_Kpd_Rows_Array[Local_u8_Row_Counter],&Local_u8_Pint_State);
				}
				return Local_u8_Pressed_Key;
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	1c c0       	rjmp	.+56     	; 0x1678 <Kpd_U8GetPressedKey+0xde>
		/**************ACTIVATE CURRENT COLUMN************************/

		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinLow);

		/*************READ CURRENT ROW****************/
		for(Local_u8_Row_Counter=0;Local_u8_Row_Counter<ROW_NUM;Local_u8_Row_Counter++)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	08 f4       	brcc	.+2      	; 0x164e <Kpd_U8GetPressedKey+0xb4>
    164c:	bf cf       	rjmp	.-130    	; 0x15cc <Kpd_U8GetPressedKey+0x32>
				}
				return Local_u8_Pressed_Key;
			}
		}
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	ee 55       	subi	r30, 0x5E	; 94
    1658:	fe 4f       	sbci	r31, 0xFE	; 254
    165a:	90 81       	ld	r25, Z
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	69 2f       	mov	r22, r25
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	/*******************KEY_ROWS_Array******************************/
   static  u8 Local_u8_Kpd_Rows_Array[ROW_NUM]={KPD_ROW_0,KPD_ROW_1,KPD_ROW_2,KPD_ROW_3};



	for(Local_u8_Column_Counter=0;Local_u8_Column_Counter<COLUMN_NUM;Local_u8_Column_Counter++)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	08 f4       	brcc	.+2      	; 0x1674 <Kpd_U8GetPressedKey+0xda>
    1672:	9e cf       	rjmp	.-196    	; 0x15b0 <Kpd_U8GetPressedKey+0x16>
		/*******DEACTIVATE CURRENT COLUMN***********/
		DIO_VidSetPinValue(KPD_PORT_Col,Local_u8_Kpd_Column_Array[Local_u8_Column_Counter],PinHigh);

	}

	return Local_u8_Pressed_Key;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <LCD_VidInit>:
#include <util/delay.h>
#include "DIO_interface.h"
#include "LCD_config.h"
#include "LCD_interface.h"
void LCD_VidInit(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	6c 97       	sbiw	r28, 0x1c	; 28
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
	//Configure Enable and Rs as Output
	DIO_VidSetPinDirection(LCD_PORT,LCD_RS,Output);
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,LCD_E,Output);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 ea       	ldi	r26, 0xA0	; 160
    16b8:	b1 e4       	ldi	r27, 0x41	; 65
    16ba:	89 8f       	std	Y+25, r24	; 0x19
    16bc:	9a 8f       	std	Y+26, r25	; 0x1a
    16be:	ab 8f       	std	Y+27, r26	; 0x1b
    16c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	69 8d       	ldd	r22, Y+25	; 0x19
    16c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a e7       	ldi	r20, 0x7A	; 122
    16d0:	55 e4       	ldi	r21, 0x45	; 69
    16d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8d 8b       	std	Y+21, r24	; 0x15
    16dc:	9e 8b       	std	Y+22, r25	; 0x16
    16de:	af 8b       	std	Y+23, r26	; 0x17
    16e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16e2:	6d 89       	ldd	r22, Y+21	; 0x15
    16e4:	7e 89       	ldd	r23, Y+22	; 0x16
    16e6:	8f 89       	ldd	r24, Y+23	; 0x17
    16e8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <LCD_VidInit+0x7a>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9c 8b       	std	Y+20, r25	; 0x14
    1700:	8b 8b       	std	Y+19, r24	; 0x13
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <LCD_VidInit+0xf8>
	else if (__tmp > 65535)
    1704:	6d 89       	ldd	r22, Y+21	; 0x15
    1706:	7e 89       	ldd	r23, Y+22	; 0x16
    1708:	8f 89       	ldd	r24, Y+23	; 0x17
    170a:	98 8d       	ldd	r25, Y+24	; 0x18
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <LCD_VidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	69 8d       	ldd	r22, Y+25	; 0x19
    171e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9c 8b       	std	Y+20, r25	; 0x14
    1742:	8b 8b       	std	Y+19, r24	; 0x13
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <LCD_VidInit+0xda>
    1746:	80 e9       	ldi	r24, 0x90	; 144
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	9a 8b       	std	Y+18, r25	; 0x12
    174c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    174e:	89 89       	ldd	r24, Y+17	; 0x11
    1750:	9a 89       	ldd	r25, Y+18	; 0x12
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_VidInit+0xc8>
    1756:	9a 8b       	std	Y+18, r25	; 0x12
    1758:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8b 89       	ldd	r24, Y+19	; 0x13
    175c:	9c 89       	ldd	r25, Y+20	; 0x14
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <LCD_VidInit+0xbc>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <LCD_VidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6d 89       	ldd	r22, Y+21	; 0x15
    1770:	7e 89       	ldd	r23, Y+22	; 0x16
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	98 8d       	ldd	r25, Y+24	; 0x18
    1776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	8b 89       	ldd	r24, Y+19	; 0x13
    1784:	9c 89       	ldd	r25, Y+20	; 0x14
    1786:	98 8b       	std	Y+16, r25	; 0x10
    1788:	8f 87       	std	Y+15, r24	; 0x0f
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	98 89       	ldd	r25, Y+16	; 0x10
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_VidInit+0x104>
    1792:	98 8b       	std	Y+16, r25	; 0x10
    1794:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	//Configure The Data Pins
	DIO_VidSetPinDirection(LCD_PORT,Pin3,Output);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	63 e0       	ldi	r22, 0x03	; 3
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin4,Output);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	64 e0       	ldi	r22, 0x04	; 4
    17a4:	41 e0       	ldi	r20, 0x01	; 1
    17a6:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin5,Output);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	65 e0       	ldi	r22, 0x05	; 5
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin6,Output);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	66 e0       	ldi	r22, 0x06	; 6
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 24 07 	call	0xe48	; 0xe48 <DIO_VidSetPinDirection>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	a0 ea       	ldi	r26, 0xA0	; 160
    17c4:	b1 e4       	ldi	r27, 0x41	; 65
    17c6:	8b 87       	std	Y+11, r24	; 0x0b
    17c8:	9c 87       	std	Y+12, r25	; 0x0c
    17ca:	ad 87       	std	Y+13, r26	; 0x0d
    17cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a e7       	ldi	r20, 0x7A	; 122
    17dc:	55 e4       	ldi	r21, 0x45	; 69
    17de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	8f 83       	std	Y+7, r24	; 0x07
    17e8:	98 87       	std	Y+8, r25	; 0x08
    17ea:	a9 87       	std	Y+9, r26	; 0x09
    17ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ee:	6f 81       	ldd	r22, Y+7	; 0x07
    17f0:	78 85       	ldd	r23, Y+8	; 0x08
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1802:	88 23       	and	r24, r24
    1804:	2c f4       	brge	.+10     	; 0x1810 <LCD_VidInit+0x186>
		__ticks = 1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	3f c0       	rjmp	.+126    	; 0x188e <LCD_VidInit+0x204>
	else if (__tmp > 65535)
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	4f e7       	ldi	r20, 0x7F	; 127
    181e:	57 e4       	ldi	r21, 0x47	; 71
    1820:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1824:	18 16       	cp	r1, r24
    1826:	4c f5       	brge	.+82     	; 0x187a <LCD_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e2       	ldi	r20, 0x20	; 32
    1836:	51 e4       	ldi	r21, 0x41	; 65
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	bc 01       	movw	r22, r24
    1842:	cd 01       	movw	r24, r26
    1844:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	0f c0       	rjmp	.+30     	; 0x1870 <LCD_VidInit+0x1e6>
    1852:	80 e9       	ldi	r24, 0x90	; 144
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_VidInit+0x1d4>
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	69 f7       	brne	.-38     	; 0x1852 <LCD_VidInit+0x1c8>
    1878:	14 c0       	rjmp	.+40     	; 0x18a2 <LCD_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187a:	6f 81       	ldd	r22, Y+7	; 0x07
    187c:	78 85       	ldd	r23, Y+8	; 0x08
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	9a 85       	ldd	r25, Y+10	; 0x0a
    1882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_VidInit+0x210>
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	//Send Commands 0x33 0x32 0x28 To init Lcd
	LCD_VidSendCommand(0x33);
    18a2:	83 e3       	ldi	r24, 0x33	; 51
    18a4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
	LCD_VidSendCommand(0x32);
    18a8:	82 e3       	ldi	r24, 0x32	; 50
    18aa:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
	LCD_VidSendCommand(0x28);
    18ae:	88 e2       	ldi	r24, 0x28	; 40
    18b0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
	LCD_VidSendCommand(0x0C);//on,off
    18b4:	8c e0       	ldi	r24, 0x0C	; 12
    18b6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
	LCD_VidSendCommand(0x01);//clear screen
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
}
    18c0:	6c 96       	adiw	r28, 0x1c	; 28
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 Copy_u8Command)
{
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	c5 59       	subi	r28, 0x95	; 149
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 56       	subi	r30, 0x6B	; 107
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 83       	st	Z, r24
	//Clear RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinLow);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    18fe:	fe 01       	movw	r30, r28
    1900:	ef 56       	subi	r30, 0x6F	; 111
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	80 83       	st	Z, r24
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	a2 83       	std	Z+2, r26	; 0x02
    1912:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1914:	8e 01       	movw	r16, r28
    1916:	03 57       	subi	r16, 0x73	; 115
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	fe 01       	movw	r30, r28
    191c:	ef 56       	subi	r30, 0x6F	; 111
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	2b ea       	ldi	r18, 0xAB	; 171
    192a:	3a ea       	ldi	r19, 0xAA	; 170
    192c:	4a ea       	ldi	r20, 0xAA	; 170
    192e:	50 e4       	ldi	r21, 0x40	; 64
    1930:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	f8 01       	movw	r30, r16
    193a:	80 83       	st	Z, r24
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	a2 83       	std	Z+2, r26	; 0x02
    1940:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1942:	fe 01       	movw	r30, r28
    1944:	e3 57       	subi	r30, 0x73	; 115
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	34 f4       	brge	.+12     	; 0x196c <LCD_VidSendCommand+0x9a>
		__ticks = 1;
    1960:	fe 01       	movw	r30, r28
    1962:	e4 57       	subi	r30, 0x74	; 116
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 83       	st	Z, r24
    196a:	e0 c0       	rjmp	.+448    	; 0x1b2c <LCD_VidSendCommand+0x25a>
	else if (__tmp > 255)
    196c:	fe 01       	movw	r30, r28
    196e:	e3 57       	subi	r30, 0x73	; 115
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	53 e4       	ldi	r21, 0x43	; 67
    1982:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	0c f0       	brlt	.+2      	; 0x198c <LCD_VidSendCommand+0xba>
    198a:	c0 c0       	rjmp	.+384    	; 0x1b0c <LCD_VidSendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    198c:	fe 01       	movw	r30, r28
    198e:	ef 56       	subi	r30, 0x6F	; 111
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	fe 01       	movw	r30, r28
    19ac:	e8 57       	subi	r30, 0x78	; 120
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 83       	st	Z, r24
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	a2 83       	std	Z+2, r26	; 0x02
    19b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b8:	8e 01       	movw	r16, r28
    19ba:	0c 57       	subi	r16, 0x7C	; 124
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	fe 01       	movw	r30, r28
    19c0:	e8 57       	subi	r30, 0x78	; 120
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a e7       	ldi	r20, 0x7A	; 122
    19d2:	55 e4       	ldi	r21, 0x45	; 69
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	f8 01       	movw	r30, r16
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e6:	fe 01       	movw	r30, r28
    19e8:	ec 57       	subi	r30, 0x7C	; 124
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	44 f4       	brge	.+16     	; 0x1a14 <LCD_VidSendCommand+0x142>
		__ticks = 1;
    1a04:	fe 01       	movw	r30, r28
    1a06:	ee 57       	subi	r30, 0x7E	; 126
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	64 c0       	rjmp	.+200    	; 0x1adc <LCD_VidSendCommand+0x20a>
	else if (__tmp > 65535)
    1a14:	fe 01       	movw	r30, r28
    1a16:	ec 57       	subi	r30, 0x7C	; 124
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	0c f0       	brlt	.+2      	; 0x1a34 <LCD_VidSendCommand+0x162>
    1a32:	43 c0       	rjmp	.+134    	; 0x1aba <LCD_VidSendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a34:	fe 01       	movw	r30, r28
    1a36:	e8 57       	subi	r30, 0x78	; 120
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8e 01       	movw	r16, r28
    1a54:	0e 57       	subi	r16, 0x7E	; 126
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	f8 01       	movw	r30, r16
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	1f c0       	rjmp	.+62     	; 0x1aaa <LCD_VidSendCommand+0x1d8>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e0 58       	subi	r30, 0x80	; 128
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 e9       	ldi	r24, 0x90	; 144
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e0 58       	subi	r30, 0x80	; 128
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_VidSendCommand+0x1b2>
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e0 58       	subi	r30, 0x80	; 128
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	de 01       	movw	r26, r28
    1a94:	ae 57       	subi	r26, 0x7E	; 126
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ee 57       	subi	r30, 0x7E	; 126
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	11 96       	adiw	r26, 0x01	; 1
    1aa6:	9c 93       	st	X, r25
    1aa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ee 57       	subi	r30, 0x7E	; 126
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	d1 f6       	brne	.-76     	; 0x1a6c <LCD_VidSendCommand+0x19a>
    1ab8:	4b c0       	rjmp	.+150    	; 0x1b50 <LCD_VidSendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	8e 01       	movw	r16, r28
    1abc:	0e 57       	subi	r16, 0x7E	; 126
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ec 57       	subi	r30, 0x7C	; 124
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
    1adc:	de 01       	movw	r26, r28
    1ade:	a2 58       	subi	r26, 0x82	; 130
    1ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ee 57       	subi	r30, 0x7E	; 126
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	fe 01       	movw	r30, r28
    1af4:	e2 58       	subi	r30, 0x82	; 130
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_VidSendCommand+0x22a>
    1b00:	fe 01       	movw	r30, r28
    1b02:	e2 58       	subi	r30, 0x82	; 130
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	22 c0       	rjmp	.+68     	; 0x1b50 <LCD_VidSendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0c:	8e 01       	movw	r16, r28
    1b0e:	04 57       	subi	r16, 0x74	; 116
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	e3 57       	subi	r30, 0x73	; 115
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	f8 01       	movw	r30, r16
    1b2a:	80 83       	st	Z, r24
    1b2c:	de 01       	movw	r26, r28
    1b2e:	a3 58       	subi	r26, 0x83	; 131
    1b30:	bf 4f       	sbci	r27, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	e4 57       	subi	r30, 0x74	; 116
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e3 58       	subi	r30, 0x83	; 131
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	8a 95       	dec	r24
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_VidSendCommand+0x272>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e3 58       	subi	r30, 0x83	; 131
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	62 e0       	ldi	r22, 0x02	; 2
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e7 58       	subi	r30, 0x87	; 135
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b70:	8e 01       	movw	r16, r28
    1b72:	0b 58       	subi	r16, 0x8B	; 139
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	fe 01       	movw	r30, r28
    1b78:	e7 58       	subi	r30, 0x87	; 135
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 81       	ld	r22, Z
    1b7e:	71 81       	ldd	r23, Z+1	; 0x01
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	2b ea       	ldi	r18, 0xAB	; 171
    1b86:	3a ea       	ldi	r19, 0xAA	; 170
    1b88:	4a ea       	ldi	r20, 0xAA	; 170
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 83       	st	Z, r24
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	a2 83       	std	Z+2, r26	; 0x02
    1b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	eb 58       	subi	r30, 0x8B	; 139
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	34 f4       	brge	.+12     	; 0x1bc8 <LCD_VidSendCommand+0x2f6>
		__ticks = 1;
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ec 58       	subi	r30, 0x8C	; 140
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 83       	st	Z, r24
    1bc6:	e0 c0       	rjmp	.+448    	; 0x1d88 <LCD_VidSendCommand+0x4b6>
	else if (__tmp > 255)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	eb 58       	subi	r30, 0x8B	; 139
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <LCD_VidSendCommand+0x316>
    1be6:	c0 c0       	rjmp	.+384    	; 0x1d68 <LCD_VidSendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1be8:	fe 01       	movw	r30, r28
    1bea:	e7 58       	subi	r30, 0x87	; 135
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a e7       	ldi	r20, 0x7A	; 122
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	fe 01       	movw	r30, r28
    1c08:	e0 59       	subi	r30, 0x90	; 144
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	80 83       	st	Z, r24
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	a2 83       	std	Z+2, r26	; 0x02
    1c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	8e 01       	movw	r16, r28
    1c16:	04 59       	subi	r16, 0x94	; 148
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e0 59       	subi	r30, 0x90	; 144
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	55 e4       	ldi	r21, 0x45	; 69
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c42:	fe 01       	movw	r30, r28
    1c44:	e4 59       	subi	r30, 0x94	; 148
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	44 f4       	brge	.+16     	; 0x1c70 <LCD_VidSendCommand+0x39e>
		__ticks = 1;
    1c60:	fe 01       	movw	r30, r28
    1c62:	e6 59       	subi	r30, 0x96	; 150
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	64 c0       	rjmp	.+200    	; 0x1d38 <LCD_VidSendCommand+0x466>
	else if (__tmp > 65535)
    1c70:	fe 01       	movw	r30, r28
    1c72:	e4 59       	subi	r30, 0x94	; 148
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	0c f0       	brlt	.+2      	; 0x1c90 <LCD_VidSendCommand+0x3be>
    1c8e:	43 c0       	rjmp	.+134    	; 0x1d16 <LCD_VidSendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	fe 01       	movw	r30, r28
    1c92:	e0 59       	subi	r30, 0x90	; 144
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8e 01       	movw	r16, r28
    1cb0:	06 59       	subi	r16, 0x96	; 150
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	1f c0       	rjmp	.+62     	; 0x1d06 <LCD_VidSendCommand+0x434>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e8 59       	subi	r30, 0x98	; 152
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e9       	ldi	r24, 0x90	; 144
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e8 59       	subi	r30, 0x98	; 152
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_VidSendCommand+0x40e>
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e8 59       	subi	r30, 0x98	; 152
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cee:	de 01       	movw	r26, r28
    1cf0:	a6 59       	subi	r26, 0x96	; 150
    1cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e6 59       	subi	r30, 0x96	; 150
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e6 59       	subi	r30, 0x96	; 150
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	d1 f6       	brne	.-76     	; 0x1cc8 <LCD_VidSendCommand+0x3f6>
    1d14:	4b c0       	rjmp	.+150    	; 0x1dac <LCD_VidSendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	8e 01       	movw	r16, r28
    1d18:	06 59       	subi	r16, 0x96	; 150
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e4 59       	subi	r30, 0x94	; 148
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	f8 01       	movw	r30, r16
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	de 01       	movw	r26, r28
    1d3a:	aa 59       	subi	r26, 0x9A	; 154
    1d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e6 59       	subi	r30, 0x96	; 150
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ea 59       	subi	r30, 0x9A	; 154
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_VidSendCommand+0x486>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ea 59       	subi	r30, 0x9A	; 154
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	22 c0       	rjmp	.+68     	; 0x1dac <LCD_VidSendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0c 58       	subi	r16, 0x8C	; 140
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	eb 58       	subi	r30, 0x8B	; 139
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
    1d88:	de 01       	movw	r26, r28
    1d8a:	ab 59       	subi	r26, 0x9B	; 155
    1d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ec 58       	subi	r30, 0x8C	; 140
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d98:	fe 01       	movw	r30, r28
    1d9a:	eb 59       	subi	r30, 0x9B	; 155
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	8a 95       	dec	r24
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_VidSendCommand+0x4ce>
    1da4:	fe 01       	movw	r30, r28
    1da6:	eb 59       	subi	r30, 0x9B	; 155
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin4));
    1dac:	fe 01       	movw	r30, r28
    1dae:	eb 56       	subi	r30, 0x6B	; 107
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	82 95       	swap	r24
    1db6:	8f 70       	andi	r24, 0x0F	; 15
    1db8:	98 2f       	mov	r25, r24
    1dba:	91 70       	andi	r25, 0x01	; 1
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	63 e0       	ldi	r22, 0x03	; 3
    1dc0:	49 2f       	mov	r20, r25
    1dc2:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin5));
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	eb 56       	subi	r30, 0x6B	; 107
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	82 95       	swap	r24
    1dd0:	86 95       	lsr	r24
    1dd2:	87 70       	andi	r24, 0x07	; 7
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	91 70       	andi	r25, 0x01	; 1
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	64 e0       	ldi	r22, 0x04	; 4
    1ddc:	49 2f       	mov	r20, r25
    1dde:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin6));
    1de2:	fe 01       	movw	r30, r28
    1de4:	eb 56       	subi	r30, 0x6B	; 107
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	82 95       	swap	r24
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	83 70       	andi	r24, 0x03	; 3
    1df2:	98 2f       	mov	r25, r24
    1df4:	91 70       	andi	r25, 0x01	; 1
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	65 e0       	ldi	r22, 0x05	; 5
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin7));
    1e00:	fe 01       	movw	r30, r28
    1e02:	eb 56       	subi	r30, 0x6B	; 107
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	98 2f       	mov	r25, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	99 27       	eor	r25, r25
    1e0e:	99 1f       	adc	r25, r25
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	66 e0       	ldi	r22, 0x06	; 6
    1e14:	49 2f       	mov	r20, r25
    1e16:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ef 59       	subi	r30, 0x9F	; 159
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e8       	ldi	r26, 0x80	; 128
    1e26:	bf e3       	ldi	r27, 0x3F	; 63
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	8e 01       	movw	r16, r28
    1e32:	03 5a       	subi	r16, 0xA3	; 163
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	fe 01       	movw	r30, r28
    1e38:	ef 59       	subi	r30, 0x9F	; 159
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a e7       	ldi	r20, 0x7A	; 122
    1e4a:	55 e4       	ldi	r21, 0x45	; 69
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 5a       	subi	r30, 0xA3	; 163
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	44 f4       	brge	.+16     	; 0x1e8c <LCD_VidSendCommand+0x5ba>
		__ticks = 1;
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e5 5a       	subi	r30, 0xA5	; 165
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	80 83       	st	Z, r24
    1e8a:	64 c0       	rjmp	.+200    	; 0x1f54 <LCD_VidSendCommand+0x682>
	else if (__tmp > 65535)
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e3 5a       	subi	r30, 0xA3	; 163
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	0c f0       	brlt	.+2      	; 0x1eac <LCD_VidSendCommand+0x5da>
    1eaa:	43 c0       	rjmp	.+134    	; 0x1f32 <LCD_VidSendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	fe 01       	movw	r30, r28
    1eae:	ef 59       	subi	r30, 0x9F	; 159
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8e 01       	movw	r16, r28
    1ecc:	05 5a       	subi	r16, 0xA5	; 165
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	1f c0       	rjmp	.+62     	; 0x1f22 <LCD_VidSendCommand+0x650>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e7 5a       	subi	r30, 0xA7	; 167
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 e9       	ldi	r24, 0x90	; 144
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e7 5a       	subi	r30, 0xA7	; 167
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_VidSendCommand+0x62a>
    1f00:	fe 01       	movw	r30, r28
    1f02:	e7 5a       	subi	r30, 0xA7	; 167
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	de 01       	movw	r26, r28
    1f0c:	a5 5a       	subi	r26, 0xA5	; 165
    1f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	e5 5a       	subi	r30, 0xA5	; 165
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	11 96       	adiw	r26, 0x01	; 1
    1f1e:	9c 93       	st	X, r25
    1f20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	fe 01       	movw	r30, r28
    1f24:	e5 5a       	subi	r30, 0xA5	; 165
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	d1 f6       	brne	.-76     	; 0x1ee4 <LCD_VidSendCommand+0x612>
    1f30:	27 c0       	rjmp	.+78     	; 0x1f80 <LCD_VidSendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	8e 01       	movw	r16, r28
    1f34:	05 5a       	subi	r16, 0xA5	; 165
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e3 5a       	subi	r30, 0xA3	; 163
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	f8 01       	movw	r30, r16
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	de 01       	movw	r26, r28
    1f56:	a9 5a       	subi	r26, 0xA9	; 169
    1f58:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5a       	subi	r30, 0xA5	; 165
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	8d 93       	st	X+, r24
    1f66:	9c 93       	st	X, r25
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e9 5a       	subi	r30, 0xA9	; 169
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_VidSendCommand+0x6a0>
    1f76:	fe 01       	movw	r30, r28
    1f78:	e9 5a       	subi	r30, 0xA9	; 169
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	62 e0       	ldi	r22, 0x02	; 2
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ed 5a       	subi	r30, 0xAD	; 173
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a0 e8       	ldi	r26, 0x80	; 128
    1f96:	bf e3       	ldi	r27, 0x3F	; 63
    1f98:	80 83       	st	Z, r24
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	a2 83       	std	Z+2, r26	; 0x02
    1f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	01 5b       	subi	r16, 0xB1	; 177
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ed 5a       	subi	r30, 0xAD	; 173
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	2b ea       	ldi	r18, 0xAB	; 171
    1fb6:	3a ea       	ldi	r19, 0xAA	; 170
    1fb8:	4a ea       	ldi	r20, 0xAA	; 170
    1fba:	50 e4       	ldi	r21, 0x40	; 64
    1fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	80 83       	st	Z, r24
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	a2 83       	std	Z+2, r26	; 0x02
    1fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e1 5b       	subi	r30, 0xB1	; 177
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	34 f4       	brge	.+12     	; 0x1ff8 <LCD_VidSendCommand+0x726>
		__ticks = 1;
    1fec:	fe 01       	movw	r30, r28
    1fee:	e2 5b       	subi	r30, 0xB2	; 178
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	80 83       	st	Z, r24
    1ff6:	e0 c0       	rjmp	.+448    	; 0x21b8 <LCD_VidSendCommand+0x8e6>
	else if (__tmp > 255)
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e1 5b       	subi	r30, 0xB1	; 177
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	0c f0       	brlt	.+2      	; 0x2018 <LCD_VidSendCommand+0x746>
    2016:	c0 c0       	rjmp	.+384    	; 0x2198 <LCD_VidSendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    2018:	fe 01       	movw	r30, r28
    201a:	ed 5a       	subi	r30, 0xAD	; 173
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a e7       	ldi	r20, 0x7A	; 122
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	fe 01       	movw	r30, r28
    2038:	e6 5b       	subi	r30, 0xB6	; 182
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	a2 83       	std	Z+2, r26	; 0x02
    2042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	8e 01       	movw	r16, r28
    2046:	0a 5b       	subi	r16, 0xBA	; 186
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	e6 5b       	subi	r30, 0xB6	; 182
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	f8 01       	movw	r30, r16
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2072:	fe 01       	movw	r30, r28
    2074:	ea 5b       	subi	r30, 0xBA	; 186
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    208c:	88 23       	and	r24, r24
    208e:	44 f4       	brge	.+16     	; 0x20a0 <LCD_VidSendCommand+0x7ce>
		__ticks = 1;
    2090:	fe 01       	movw	r30, r28
    2092:	ec 5b       	subi	r30, 0xBC	; 188
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	64 c0       	rjmp	.+200    	; 0x2168 <LCD_VidSendCommand+0x896>
	else if (__tmp > 65535)
    20a0:	fe 01       	movw	r30, r28
    20a2:	ea 5b       	subi	r30, 0xBA	; 186
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <LCD_VidSendCommand+0x7ee>
    20be:	43 c0       	rjmp	.+134    	; 0x2146 <LCD_VidSendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	fe 01       	movw	r30, r28
    20c2:	e6 5b       	subi	r30, 0xB6	; 182
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8e 01       	movw	r16, r28
    20e0:	0c 5b       	subi	r16, 0xBC	; 188
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	f8 01       	movw	r30, r16
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
    20f6:	1f c0       	rjmp	.+62     	; 0x2136 <LCD_VidSendCommand+0x864>
    20f8:	fe 01       	movw	r30, r28
    20fa:	ee 5b       	subi	r30, 0xBE	; 190
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	80 e9       	ldi	r24, 0x90	; 144
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	fe 01       	movw	r30, r28
    2108:	ee 5b       	subi	r30, 0xBE	; 190
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_VidSendCommand+0x83e>
    2114:	fe 01       	movw	r30, r28
    2116:	ee 5b       	subi	r30, 0xBE	; 190
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	de 01       	movw	r26, r28
    2120:	ac 5b       	subi	r26, 0xBC	; 188
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	ec 5b       	subi	r30, 0xBC	; 188
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	fe 01       	movw	r30, r28
    2138:	ec 5b       	subi	r30, 0xBC	; 188
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	d1 f6       	brne	.-76     	; 0x20f8 <LCD_VidSendCommand+0x826>
    2144:	42 c0       	rjmp	.+132    	; 0x21ca <LCD_VidSendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	8e 01       	movw	r16, r28
    2148:	0c 5b       	subi	r16, 0xBC	; 188
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	ea 5b       	subi	r30, 0xBA	; 186
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	de 01       	movw	r26, r28
    216a:	a0 5c       	subi	r26, 0xC0	; 192
    216c:	bf 4f       	sbci	r27, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	ec 5b       	subi	r30, 0xBC	; 188
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	11 96       	adiw	r26, 0x01	; 1
    217a:	9c 93       	st	X, r25
    217c:	8e 93       	st	-X, r24
    217e:	fe 01       	movw	r30, r28
    2180:	e0 5c       	subi	r30, 0xC0	; 192
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_VidSendCommand+0x8b6>
    218c:	fe 01       	movw	r30, r28
    218e:	e0 5c       	subi	r30, 0xC0	; 192
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	19 c0       	rjmp	.+50     	; 0x21ca <LCD_VidSendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2198:	8e 01       	movw	r16, r28
    219a:	02 5b       	subi	r16, 0xB2	; 178
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	fe 01       	movw	r30, r28
    21a0:	e1 5b       	subi	r30, 0xB1	; 177
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	f8 01       	movw	r30, r16
    21b6:	80 83       	st	Z, r24
    21b8:	fe 01       	movw	r30, r28
    21ba:	e2 5b       	subi	r30, 0xB2	; 178
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    21c4:	8a 95       	dec	r24
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_VidSendCommand+0x8f2>
    21c8:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e8       	ldi	r26, 0x80	; 128
    21da:	bf e3       	ldi	r27, 0x3F	; 63
    21dc:	8b af       	std	Y+59, r24	; 0x3b
    21de:	9c af       	std	Y+60, r25	; 0x3c
    21e0:	ad af       	std	Y+61, r26	; 0x3d
    21e2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21e4:	6b ad       	ldd	r22, Y+59	; 0x3b
    21e6:	7c ad       	ldd	r23, Y+60	; 0x3c
    21e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ec:	2b ea       	ldi	r18, 0xAB	; 171
    21ee:	3a ea       	ldi	r19, 0xAA	; 170
    21f0:	4a ea       	ldi	r20, 0xAA	; 170
    21f2:	50 e4       	ldi	r21, 0x40	; 64
    21f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8f ab       	std	Y+55, r24	; 0x37
    21fe:	98 af       	std	Y+56, r25	; 0x38
    2200:	a9 af       	std	Y+57, r26	; 0x39
    2202:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2204:	6f a9       	ldd	r22, Y+55	; 0x37
    2206:	78 ad       	ldd	r23, Y+56	; 0x38
    2208:	89 ad       	ldd	r24, Y+57	; 0x39
    220a:	9a ad       	ldd	r25, Y+58	; 0x3a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	1c f4       	brge	.+6      	; 0x2222 <LCD_VidSendCommand+0x950>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	8e ab       	std	Y+54, r24	; 0x36
    2220:	91 c0       	rjmp	.+290    	; 0x2344 <LCD_VidSendCommand+0xa72>
	else if (__tmp > 255)
    2222:	6f a9       	ldd	r22, Y+55	; 0x37
    2224:	78 ad       	ldd	r23, Y+56	; 0x38
    2226:	89 ad       	ldd	r24, Y+57	; 0x39
    2228:	9a ad       	ldd	r25, Y+58	; 0x3a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	53 e4       	ldi	r21, 0x43	; 67
    2232:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	0c f0       	brlt	.+2      	; 0x223c <LCD_VidSendCommand+0x96a>
    223a:	7b c0       	rjmp	.+246    	; 0x2332 <LCD_VidSendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    223c:	6b ad       	ldd	r22, Y+59	; 0x3b
    223e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2240:	8d ad       	ldd	r24, Y+61	; 0x3d
    2242:	9e ad       	ldd	r25, Y+62	; 0x3e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	54 e4       	ldi	r21, 0x44	; 68
    224c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8a ab       	std	Y+50, r24	; 0x32
    2256:	9b ab       	std	Y+51, r25	; 0x33
    2258:	ac ab       	std	Y+52, r26	; 0x34
    225a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	6a a9       	ldd	r22, Y+50	; 0x32
    225e:	7b a9       	ldd	r23, Y+51	; 0x33
    2260:	8c a9       	ldd	r24, Y+52	; 0x34
    2262:	9d a9       	ldd	r25, Y+53	; 0x35
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	55 e4       	ldi	r21, 0x45	; 69
    226c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8e a7       	std	Y+46, r24	; 0x2e
    2276:	9f a7       	std	Y+47, r25	; 0x2f
    2278:	a8 ab       	std	Y+48, r26	; 0x30
    227a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    227c:	6e a5       	ldd	r22, Y+46	; 0x2e
    227e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2280:	88 a9       	ldd	r24, Y+48	; 0x30
    2282:	99 a9       	ldd	r25, Y+49	; 0x31
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <LCD_VidSendCommand+0x9cc>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9d a7       	std	Y+45, r25	; 0x2d
    229a:	8c a7       	std	Y+44, r24	; 0x2c
    229c:	3f c0       	rjmp	.+126    	; 0x231c <LCD_VidSendCommand+0xa4a>
	else if (__tmp > 65535)
    229e:	6e a5       	ldd	r22, Y+46	; 0x2e
    22a0:	7f a5       	ldd	r23, Y+47	; 0x2f
    22a2:	88 a9       	ldd	r24, Y+48	; 0x30
    22a4:	99 a9       	ldd	r25, Y+49	; 0x31
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <LCD_VidSendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	6a a9       	ldd	r22, Y+50	; 0x32
    22b8:	7b a9       	ldd	r23, Y+51	; 0x33
    22ba:	8c a9       	ldd	r24, Y+52	; 0x34
    22bc:	9d a9       	ldd	r25, Y+53	; 0x35
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9d a7       	std	Y+45, r25	; 0x2d
    22dc:	8c a7       	std	Y+44, r24	; 0x2c
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <LCD_VidSendCommand+0xa2c>
    22e0:	80 e9       	ldi	r24, 0x90	; 144
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	9b a7       	std	Y+43, r25	; 0x2b
    22e6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    22ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_VidSendCommand+0xa1a>
    22f0:	9b a7       	std	Y+43, r25	; 0x2b
    22f2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    22f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9d a7       	std	Y+45, r25	; 0x2d
    22fc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    2300:	9d a5       	ldd	r25, Y+45	; 0x2d
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <LCD_VidSendCommand+0xa0e>
    2306:	24 c0       	rjmp	.+72     	; 0x2350 <LCD_VidSendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6e a5       	ldd	r22, Y+46	; 0x2e
    230a:	7f a5       	ldd	r23, Y+47	; 0x2f
    230c:	88 a9       	ldd	r24, Y+48	; 0x30
    230e:	99 a9       	ldd	r25, Y+49	; 0x31
    2310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9d a7       	std	Y+45, r25	; 0x2d
    231a:	8c a7       	std	Y+44, r24	; 0x2c
    231c:	8c a5       	ldd	r24, Y+44	; 0x2c
    231e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2320:	99 a7       	std	Y+41, r25	; 0x29
    2322:	88 a7       	std	Y+40, r24	; 0x28
    2324:	88 a5       	ldd	r24, Y+40	; 0x28
    2326:	99 a5       	ldd	r25, Y+41	; 0x29
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_VidSendCommand+0xa56>
    232c:	99 a7       	std	Y+41, r25	; 0x29
    232e:	88 a7       	std	Y+40, r24	; 0x28
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <LCD_VidSendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2332:	6f a9       	ldd	r22, Y+55	; 0x37
    2334:	78 ad       	ldd	r23, Y+56	; 0x38
    2336:	89 ad       	ldd	r24, Y+57	; 0x39
    2338:	9a ad       	ldd	r25, Y+58	; 0x3a
    233a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8e ab       	std	Y+54, r24	; 0x36
    2344:	8e a9       	ldd	r24, Y+54	; 0x36
    2346:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2348:	8f a1       	ldd	r24, Y+39	; 0x27
    234a:	8a 95       	dec	r24
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_VidSendCommand+0xa78>
    234e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin0));
    2350:	fe 01       	movw	r30, r28
    2352:	eb 56       	subi	r30, 0x6B	; 107
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	98 2f       	mov	r25, r24
    235a:	91 70       	andi	r25, 0x01	; 1
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	63 e0       	ldi	r22, 0x03	; 3
    2360:	49 2f       	mov	r20, r25
    2362:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin1));
    2366:	fe 01       	movw	r30, r28
    2368:	eb 56       	subi	r30, 0x6B	; 107
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	86 95       	lsr	r24
    2370:	98 2f       	mov	r25, r24
    2372:	91 70       	andi	r25, 0x01	; 1
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	64 e0       	ldi	r22, 0x04	; 4
    2378:	49 2f       	mov	r20, r25
    237a:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin2));
    237e:	fe 01       	movw	r30, r28
    2380:	eb 56       	subi	r30, 0x6B	; 107
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	86 95       	lsr	r24
    2388:	86 95       	lsr	r24
    238a:	98 2f       	mov	r25, r24
    238c:	91 70       	andi	r25, 0x01	; 1
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	65 e0       	ldi	r22, 0x05	; 5
    2392:	49 2f       	mov	r20, r25
    2394:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin3));
    2398:	fe 01       	movw	r30, r28
    239a:	eb 56       	subi	r30, 0x6B	; 107
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	86 95       	lsr	r24
    23a2:	86 95       	lsr	r24
    23a4:	86 95       	lsr	r24
    23a6:	98 2f       	mov	r25, r24
    23a8:	91 70       	andi	r25, 0x01	; 1
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	66 e0       	ldi	r22, 0x06	; 6
    23ae:	49 2f       	mov	r20, r25
    23b0:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	8b a3       	std	Y+35, r24	; 0x23
    23be:	9c a3       	std	Y+36, r25	; 0x24
    23c0:	ad a3       	std	Y+37, r26	; 0x25
    23c2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4a e7       	ldi	r20, 0x7A	; 122
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8f 8f       	std	Y+31, r24	; 0x1f
    23de:	98 a3       	std	Y+32, r25	; 0x20
    23e0:	a9 a3       	std	Y+33, r26	; 0x21
    23e2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23e6:	78 a1       	ldd	r23, Y+32	; 0x20
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <LCD_VidSendCommand+0xb34>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9e 8f       	std	Y+30, r25	; 0x1e
    2402:	8d 8f       	std	Y+29, r24	; 0x1d
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <LCD_VidSendCommand+0xbb2>
	else if (__tmp > 65535)
    2406:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2408:	78 a1       	ldd	r23, Y+32	; 0x20
    240a:	89 a1       	ldd	r24, Y+33	; 0x21
    240c:	9a a1       	ldd	r25, Y+34	; 0x22
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <LCD_VidSendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	6b a1       	ldd	r22, Y+35	; 0x23
    2420:	7c a1       	ldd	r23, Y+36	; 0x24
    2422:	8d a1       	ldd	r24, Y+37	; 0x25
    2424:	9e a1       	ldd	r25, Y+38	; 0x26
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 8f       	std	Y+30, r25	; 0x1e
    2444:	8d 8f       	std	Y+29, r24	; 0x1d
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <LCD_VidSendCommand+0xb94>
    2448:	80 e9       	ldi	r24, 0x90	; 144
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	9c 8f       	std	Y+28, r25	; 0x1c
    244e:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_VidSendCommand+0xb82>
    2458:	9c 8f       	std	Y+28, r25	; 0x1c
    245a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9e 8f       	std	Y+30, r25	; 0x1e
    2464:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	69 f7       	brne	.-38     	; 0x2448 <LCD_VidSendCommand+0xb76>
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <LCD_VidSendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2472:	78 a1       	ldd	r23, Y+32	; 0x20
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 8f       	std	Y+30, r25	; 0x1e
    2482:	8d 8f       	std	Y+29, r24	; 0x1d
    2484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2488:	9a 8f       	std	Y+26, r25	; 0x1a
    248a:	89 8f       	std	Y+25, r24	; 0x19
    248c:	89 8d       	ldd	r24, Y+25	; 0x19
    248e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_VidSendCommand+0xbbe>
    2494:	9a 8f       	std	Y+26, r25	; 0x1a
    2496:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	62 e0       	ldi	r22, 0x02	; 2
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e8       	ldi	r26, 0x80	; 128
    24a8:	bf e3       	ldi	r27, 0x3F	; 63
    24aa:	8d 8b       	std	Y+21, r24	; 0x15
    24ac:	9e 8b       	std	Y+22, r25	; 0x16
    24ae:	af 8b       	std	Y+23, r26	; 0x17
    24b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24b2:	6d 89       	ldd	r22, Y+21	; 0x15
    24b4:	7e 89       	ldd	r23, Y+22	; 0x16
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ba:	2b ea       	ldi	r18, 0xAB	; 171
    24bc:	3a ea       	ldi	r19, 0xAA	; 170
    24be:	4a ea       	ldi	r20, 0xAA	; 170
    24c0:	50 e4       	ldi	r21, 0x40	; 64
    24c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	89 8b       	std	Y+17, r24	; 0x11
    24cc:	9a 8b       	std	Y+18, r25	; 0x12
    24ce:	ab 8b       	std	Y+19, r26	; 0x13
    24d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24d2:	69 89       	ldd	r22, Y+17	; 0x11
    24d4:	7a 89       	ldd	r23, Y+18	; 0x12
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	1c f4       	brge	.+6      	; 0x24f0 <LCD_VidSendCommand+0xc1e>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	88 8b       	std	Y+16, r24	; 0x10
    24ee:	91 c0       	rjmp	.+290    	; 0x2612 <LCD_VidSendCommand+0xd40>
	else if (__tmp > 255)
    24f0:	69 89       	ldd	r22, Y+17	; 0x11
    24f2:	7a 89       	ldd	r23, Y+18	; 0x12
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	0c f0       	brlt	.+2      	; 0x250a <LCD_VidSendCommand+0xc38>
    2508:	7b c0       	rjmp	.+246    	; 0x2600 <LCD_VidSendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a e7       	ldi	r20, 0x7A	; 122
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8c 87       	std	Y+12, r24	; 0x0c
    2524:	9d 87       	std	Y+13, r25	; 0x0d
    2526:	ae 87       	std	Y+14, r26	; 0x0e
    2528:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6c 85       	ldd	r22, Y+12	; 0x0c
    252c:	7d 85       	ldd	r23, Y+13	; 0x0d
    252e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2530:	9f 85       	ldd	r25, Y+15	; 0x0f
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	55 e4       	ldi	r21, 0x45	; 69
    253a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	88 87       	std	Y+8, r24	; 0x08
    2544:	99 87       	std	Y+9, r25	; 0x09
    2546:	aa 87       	std	Y+10, r26	; 0x0a
    2548:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    254a:	68 85       	ldd	r22, Y+8	; 0x08
    254c:	79 85       	ldd	r23, Y+9	; 0x09
    254e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2550:	9b 85       	ldd	r25, Y+11	; 0x0b
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <LCD_VidSendCommand+0xc9a>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9f 83       	std	Y+7, r25	; 0x07
    2568:	8e 83       	std	Y+6, r24	; 0x06
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <LCD_VidSendCommand+0xd18>
	else if (__tmp > 65535)
    256c:	68 85       	ldd	r22, Y+8	; 0x08
    256e:	79 85       	ldd	r23, Y+9	; 0x09
    2570:	8a 85       	ldd	r24, Y+10	; 0x0a
    2572:	9b 85       	ldd	r25, Y+11	; 0x0b
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <LCD_VidSendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6c 85       	ldd	r22, Y+12	; 0x0c
    2586:	7d 85       	ldd	r23, Y+13	; 0x0d
    2588:	8e 85       	ldd	r24, Y+14	; 0x0e
    258a:	9f 85       	ldd	r25, Y+15	; 0x0f
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9f 83       	std	Y+7, r25	; 0x07
    25aa:	8e 83       	std	Y+6, r24	; 0x06
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <LCD_VidSendCommand+0xcfa>
    25ae:	80 e9       	ldi	r24, 0x90	; 144
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	9d 83       	std	Y+5, r25	; 0x05
    25b4:	8c 83       	std	Y+4, r24	; 0x04
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_VidSendCommand+0xce8>
    25be:	9d 83       	std	Y+5, r25	; 0x05
    25c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	8e 81       	ldd	r24, Y+6	; 0x06
    25c4:	9f 81       	ldd	r25, Y+7	; 0x07
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9f 83       	std	Y+7, r25	; 0x07
    25ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	9f 81       	ldd	r25, Y+7	; 0x07
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <LCD_VidSendCommand+0xcdc>
    25d4:	24 c0       	rjmp	.+72     	; 0x261e <LCD_VidSendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	68 85       	ldd	r22, Y+8	; 0x08
    25d8:	79 85       	ldd	r23, Y+9	; 0x09
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9f 83       	std	Y+7, r25	; 0x07
    25e8:	8e 83       	std	Y+6, r24	; 0x06
    25ea:	8e 81       	ldd	r24, Y+6	; 0x06
    25ec:	9f 81       	ldd	r25, Y+7	; 0x07
    25ee:	9b 83       	std	Y+3, r25	; 0x03
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_VidSendCommand+0xd24>
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <LCD_VidSendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2600:	69 89       	ldd	r22, Y+17	; 0x11
    2602:	7a 89       	ldd	r23, Y+18	; 0x12
    2604:	8b 89       	ldd	r24, Y+19	; 0x13
    2606:	9c 89       	ldd	r25, Y+20	; 0x14
    2608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	88 8b       	std	Y+16, r24	; 0x10
    2612:	88 89       	ldd	r24, Y+16	; 0x10
    2614:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	8a 95       	dec	r24
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_VidSendCommand+0xd46>
    261c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    261e:	cb 56       	subi	r28, 0x6B	; 107
    2620:	df 4f       	sbci	r29, 0xFF	; 255
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	08 95       	ret

00002636 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_u8Data)
{
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	c5 59       	subi	r28, 0x95	; 149
    2644:	d0 40       	sbci	r29, 0x00	; 0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	fe 01       	movw	r30, r28
    2652:	eb 56       	subi	r30, 0x6B	; 107
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 83       	st	Z, r24

	//Set RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinHigh);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    2662:	fe 01       	movw	r30, r28
    2664:	ef 56       	subi	r30, 0x6F	; 111
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e8       	ldi	r26, 0x80	; 128
    266e:	bf e3       	ldi	r27, 0x3F	; 63
    2670:	80 83       	st	Z, r24
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	a2 83       	std	Z+2, r26	; 0x02
    2676:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2678:	8e 01       	movw	r16, r28
    267a:	03 57       	subi	r16, 0x73	; 115
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	ef 56       	subi	r30, 0x6F	; 111
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	2b ea       	ldi	r18, 0xAB	; 171
    268e:	3a ea       	ldi	r19, 0xAA	; 170
    2690:	4a ea       	ldi	r20, 0xAA	; 170
    2692:	50 e4       	ldi	r21, 0x40	; 64
    2694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	f8 01       	movw	r30, r16
    269e:	80 83       	st	Z, r24
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	a2 83       	std	Z+2, r26	; 0x02
    26a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a6:	fe 01       	movw	r30, r28
    26a8:	e3 57       	subi	r30, 0x73	; 115
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	34 f4       	brge	.+12     	; 0x26d0 <LCD_VidSendChar+0x9a>
		__ticks = 1;
    26c4:	fe 01       	movw	r30, r28
    26c6:	e4 57       	subi	r30, 0x74	; 116
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	80 83       	st	Z, r24
    26ce:	e0 c0       	rjmp	.+448    	; 0x2890 <LCD_VidSendChar+0x25a>
	else if (__tmp > 255)
    26d0:	fe 01       	movw	r30, r28
    26d2:	e3 57       	subi	r30, 0x73	; 115
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	53 e4       	ldi	r21, 0x43	; 67
    26e6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	0c f0       	brlt	.+2      	; 0x26f0 <LCD_VidSendChar+0xba>
    26ee:	c0 c0       	rjmp	.+384    	; 0x2870 <LCD_VidSendChar+0x23a>
	{
		_delay_ms(__us / 1000.0);
    26f0:	fe 01       	movw	r30, r28
    26f2:	ef 56       	subi	r30, 0x6F	; 111
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a e7       	ldi	r20, 0x7A	; 122
    2704:	54 e4       	ldi	r21, 0x44	; 68
    2706:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	fe 01       	movw	r30, r28
    2710:	e8 57       	subi	r30, 0x78	; 120
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 83       	st	Z, r24
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	a2 83       	std	Z+2, r26	; 0x02
    271a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	8e 01       	movw	r16, r28
    271e:	0c 57       	subi	r16, 0x7C	; 124
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	e8 57       	subi	r30, 0x78	; 120
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	55 e4       	ldi	r21, 0x45	; 69
    2738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	f8 01       	movw	r30, r16
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274a:	fe 01       	movw	r30, r28
    274c:	ec 57       	subi	r30, 0x7C	; 124
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	44 f4       	brge	.+16     	; 0x2778 <LCD_VidSendChar+0x142>
		__ticks = 1;
    2768:	fe 01       	movw	r30, r28
    276a:	ee 57       	subi	r30, 0x7E	; 126
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	64 c0       	rjmp	.+200    	; 0x2840 <LCD_VidSendChar+0x20a>
	else if (__tmp > 65535)
    2778:	fe 01       	movw	r30, r28
    277a:	ec 57       	subi	r30, 0x7C	; 124
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	0c f0       	brlt	.+2      	; 0x2798 <LCD_VidSendChar+0x162>
    2796:	43 c0       	rjmp	.+134    	; 0x281e <LCD_VidSendChar+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	fe 01       	movw	r30, r28
    279a:	e8 57       	subi	r30, 0x78	; 120
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8e 01       	movw	r16, r28
    27b8:	0e 57       	subi	r16, 0x7E	; 126
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	f8 01       	movw	r30, r16
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	1f c0       	rjmp	.+62     	; 0x280e <LCD_VidSendChar+0x1d8>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e0 58       	subi	r30, 0x80	; 128
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 e9       	ldi	r24, 0x90	; 144
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27de:	fe 01       	movw	r30, r28
    27e0:	e0 58       	subi	r30, 0x80	; 128
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_VidSendChar+0x1b2>
    27ec:	fe 01       	movw	r30, r28
    27ee:	e0 58       	subi	r30, 0x80	; 128
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	de 01       	movw	r26, r28
    27f8:	ae 57       	subi	r26, 0x7E	; 126
    27fa:	bf 4f       	sbci	r27, 0xFF	; 255
    27fc:	fe 01       	movw	r30, r28
    27fe:	ee 57       	subi	r30, 0x7E	; 126
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	9c 93       	st	X, r25
    280c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	fe 01       	movw	r30, r28
    2810:	ee 57       	subi	r30, 0x7E	; 126
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	d1 f6       	brne	.-76     	; 0x27d0 <LCD_VidSendChar+0x19a>
    281c:	4b c0       	rjmp	.+150    	; 0x28b4 <LCD_VidSendChar+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	8e 01       	movw	r16, r28
    2820:	0e 57       	subi	r16, 0x7E	; 126
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	ec 57       	subi	r30, 0x7C	; 124
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	de 01       	movw	r26, r28
    2842:	a2 58       	subi	r26, 0x82	; 130
    2844:	bf 4f       	sbci	r27, 0xFF	; 255
    2846:	fe 01       	movw	r30, r28
    2848:	ee 57       	subi	r30, 0x7E	; 126
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	9c 93       	st	X, r25
    2854:	8e 93       	st	-X, r24
    2856:	fe 01       	movw	r30, r28
    2858:	e2 58       	subi	r30, 0x82	; 130
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_VidSendChar+0x22a>
    2864:	fe 01       	movw	r30, r28
    2866:	e2 58       	subi	r30, 0x82	; 130
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
    286e:	22 c0       	rjmp	.+68     	; 0x28b4 <LCD_VidSendChar+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2870:	8e 01       	movw	r16, r28
    2872:	04 57       	subi	r16, 0x74	; 116
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e3 57       	subi	r30, 0x73	; 115
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	80 83       	st	Z, r24
    2890:	de 01       	movw	r26, r28
    2892:	a3 58       	subi	r26, 0x83	; 131
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	e4 57       	subi	r30, 0x74	; 116
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a0:	fe 01       	movw	r30, r28
    28a2:	e3 58       	subi	r30, 0x83	; 131
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	8a 95       	dec	r24
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_VidSendChar+0x272>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e3 58       	subi	r30, 0x83	; 131
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	62 e0       	ldi	r22, 0x02	; 2
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    28be:	fe 01       	movw	r30, r28
    28c0:	e7 58       	subi	r30, 0x87	; 135
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e8       	ldi	r26, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	80 83       	st	Z, r24
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	a2 83       	std	Z+2, r26	; 0x02
    28d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28d4:	8e 01       	movw	r16, r28
    28d6:	0b 58       	subi	r16, 0x8B	; 139
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 58       	subi	r30, 0x87	; 135
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	2b ea       	ldi	r18, 0xAB	; 171
    28ea:	3a ea       	ldi	r19, 0xAA	; 170
    28ec:	4a ea       	ldi	r20, 0xAA	; 170
    28ee:	50 e4       	ldi	r21, 0x40	; 64
    28f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	f8 01       	movw	r30, r16
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2902:	fe 01       	movw	r30, r28
    2904:	eb 58       	subi	r30, 0x8B	; 139
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	34 f4       	brge	.+12     	; 0x292c <LCD_VidSendChar+0x2f6>
		__ticks = 1;
    2920:	fe 01       	movw	r30, r28
    2922:	ec 58       	subi	r30, 0x8C	; 140
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	80 83       	st	Z, r24
    292a:	e0 c0       	rjmp	.+448    	; 0x2aec <LCD_VidSendChar+0x4b6>
	else if (__tmp > 255)
    292c:	fe 01       	movw	r30, r28
    292e:	eb 58       	subi	r30, 0x8B	; 139
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <LCD_VidSendChar+0x316>
    294a:	c0 c0       	rjmp	.+384    	; 0x2acc <LCD_VidSendChar+0x496>
	{
		_delay_ms(__us / 1000.0);
    294c:	fe 01       	movw	r30, r28
    294e:	e7 58       	subi	r30, 0x87	; 135
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a e7       	ldi	r20, 0x7A	; 122
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	fe 01       	movw	r30, r28
    296c:	e0 59       	subi	r30, 0x90	; 144
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2978:	8e 01       	movw	r16, r28
    297a:	04 59       	subi	r16, 0x94	; 148
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	fe 01       	movw	r30, r28
    2980:	e0 59       	subi	r30, 0x90	; 144
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a e7       	ldi	r20, 0x7A	; 122
    2992:	55 e4       	ldi	r21, 0x45	; 69
    2994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	80 83       	st	Z, r24
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	a2 83       	std	Z+2, r26	; 0x02
    29a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a6:	fe 01       	movw	r30, r28
    29a8:	e4 59       	subi	r30, 0x94	; 148
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	44 f4       	brge	.+16     	; 0x29d4 <LCD_VidSendChar+0x39e>
		__ticks = 1;
    29c4:	fe 01       	movw	r30, r28
    29c6:	e6 59       	subi	r30, 0x96	; 150
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	64 c0       	rjmp	.+200    	; 0x2a9c <LCD_VidSendChar+0x466>
	else if (__tmp > 65535)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e4 59       	subi	r30, 0x94	; 148
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	0c f0       	brlt	.+2      	; 0x29f4 <LCD_VidSendChar+0x3be>
    29f2:	43 c0       	rjmp	.+134    	; 0x2a7a <LCD_VidSendChar+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	fe 01       	movw	r30, r28
    29f6:	e0 59       	subi	r30, 0x90	; 144
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	8e 01       	movw	r16, r28
    2a14:	06 59       	subi	r16, 0x96	; 150
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	f8 01       	movw	r30, r16
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	80 83       	st	Z, r24
    2a2a:	1f c0       	rjmp	.+62     	; 0x2a6a <LCD_VidSendChar+0x434>
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e8 59       	subi	r30, 0x98	; 152
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e8 59       	subi	r30, 0x98	; 152
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_VidSendChar+0x40e>
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e8 59       	subi	r30, 0x98	; 152
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	de 01       	movw	r26, r28
    2a54:	a6 59       	subi	r26, 0x96	; 150
    2a56:	bf 4f       	sbci	r27, 0xFF	; 255
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e6 59       	subi	r30, 0x96	; 150
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	91 81       	ldd	r25, Z+1	; 0x01
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	11 96       	adiw	r26, 0x01	; 1
    2a66:	9c 93       	st	X, r25
    2a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e6 59       	subi	r30, 0x96	; 150
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	d1 f6       	brne	.-76     	; 0x2a2c <LCD_VidSendChar+0x3f6>
    2a78:	4b c0       	rjmp	.+150    	; 0x2b10 <LCD_VidSendChar+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	06 59       	subi	r16, 0x96	; 150
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e4 59       	subi	r30, 0x94	; 148
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
    2a9c:	de 01       	movw	r26, r28
    2a9e:	aa 59       	subi	r26, 0x9A	; 154
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e6 59       	subi	r30, 0x96	; 150
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	11 96       	adiw	r26, 0x01	; 1
    2aae:	9c 93       	st	X, r25
    2ab0:	8e 93       	st	-X, r24
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ea 59       	subi	r30, 0x9A	; 154
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_VidSendChar+0x486>
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ea 59       	subi	r30, 0x9A	; 154
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
    2aca:	22 c0       	rjmp	.+68     	; 0x2b10 <LCD_VidSendChar+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2acc:	8e 01       	movw	r16, r28
    2ace:	0c 58       	subi	r16, 0x8C	; 140
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	eb 58       	subi	r30, 0x8B	; 139
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	f8 01       	movw	r30, r16
    2aea:	80 83       	st	Z, r24
    2aec:	de 01       	movw	r26, r28
    2aee:	ab 59       	subi	r26, 0x9B	; 155
    2af0:	bf 4f       	sbci	r27, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	ec 58       	subi	r30, 0x8C	; 140
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2afc:	fe 01       	movw	r30, r28
    2afe:	eb 59       	subi	r30, 0x9B	; 155
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 81       	ld	r24, Z
    2b04:	8a 95       	dec	r24
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <LCD_VidSendChar+0x4ce>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	eb 59       	subi	r30, 0x9B	; 155
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin4));
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 56       	subi	r30, 0x6B	; 107
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	82 95       	swap	r24
    2b1a:	8f 70       	andi	r24, 0x0F	; 15
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	91 70       	andi	r25, 0x01	; 1
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	63 e0       	ldi	r22, 0x03	; 3
    2b24:	49 2f       	mov	r20, r25
    2b26:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin5));
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	eb 56       	subi	r30, 0x6B	; 107
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	82 95       	swap	r24
    2b34:	86 95       	lsr	r24
    2b36:	87 70       	andi	r24, 0x07	; 7
    2b38:	98 2f       	mov	r25, r24
    2b3a:	91 70       	andi	r25, 0x01	; 1
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	64 e0       	ldi	r22, 0x04	; 4
    2b40:	49 2f       	mov	r20, r25
    2b42:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin6));
    2b46:	fe 01       	movw	r30, r28
    2b48:	eb 56       	subi	r30, 0x6B	; 107
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	82 95       	swap	r24
    2b50:	86 95       	lsr	r24
    2b52:	86 95       	lsr	r24
    2b54:	83 70       	andi	r24, 0x03	; 3
    2b56:	98 2f       	mov	r25, r24
    2b58:	91 70       	andi	r25, 0x01	; 1
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	65 e0       	ldi	r22, 0x05	; 5
    2b5e:	49 2f       	mov	r20, r25
    2b60:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin7));
    2b64:	fe 01       	movw	r30, r28
    2b66:	eb 56       	subi	r30, 0x6B	; 107
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	98 2f       	mov	r25, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	99 27       	eor	r25, r25
    2b72:	99 1f       	adc	r25, r25
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	66 e0       	ldi	r22, 0x06	; 6
    2b78:	49 2f       	mov	r20, r25
    2b7a:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 59       	subi	r30, 0x9F	; 159
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e8       	ldi	r26, 0x80	; 128
    2b8a:	bf e3       	ldi	r27, 0x3F	; 63
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b94:	8e 01       	movw	r16, r28
    2b96:	03 5a       	subi	r16, 0xA3	; 163
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ef 59       	subi	r30, 0x9F	; 159
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	60 81       	ld	r22, Z
    2ba2:	71 81       	ldd	r23, Z+1	; 0x01
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	93 81       	ldd	r25, Z+3	; 0x03
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a e7       	ldi	r20, 0x7A	; 122
    2bae:	55 e4       	ldi	r21, 0x45	; 69
    2bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e3 5a       	subi	r30, 0xA3	; 163
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	44 f4       	brge	.+16     	; 0x2bf0 <LCD_VidSendChar+0x5ba>
		__ticks = 1;
    2be0:	fe 01       	movw	r30, r28
    2be2:	e5 5a       	subi	r30, 0xA5	; 165
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	64 c0       	rjmp	.+200    	; 0x2cb8 <LCD_VidSendChar+0x682>
	else if (__tmp > 65535)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e3 5a       	subi	r30, 0xA3	; 163
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	4f e7       	ldi	r20, 0x7F	; 127
    2c04:	57 e4       	ldi	r21, 0x47	; 71
    2c06:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2c0a:	18 16       	cp	r1, r24
    2c0c:	0c f0       	brlt	.+2      	; 0x2c10 <LCD_VidSendChar+0x5da>
    2c0e:	43 c0       	rjmp	.+134    	; 0x2c96 <LCD_VidSendChar+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c10:	fe 01       	movw	r30, r28
    2c12:	ef 59       	subi	r30, 0x9F	; 159
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8e 01       	movw	r16, r28
    2c30:	05 5a       	subi	r16, 0xA5	; 165
    2c32:	1f 4f       	sbci	r17, 0xFF	; 255
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	f8 01       	movw	r30, r16
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
    2c46:	1f c0       	rjmp	.+62     	; 0x2c86 <LCD_VidSendChar+0x650>
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e7 5a       	subi	r30, 0xA7	; 167
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 e9       	ldi	r24, 0x90	; 144
    2c50:	91 e0       	ldi	r25, 0x01	; 1
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c56:	fe 01       	movw	r30, r28
    2c58:	e7 5a       	subi	r30, 0xA7	; 167
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 81       	ld	r24, Z
    2c5e:	91 81       	ldd	r25, Z+1	; 0x01
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_VidSendChar+0x62a>
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 5a       	subi	r30, 0xA7	; 167
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	de 01       	movw	r26, r28
    2c70:	a5 5a       	subi	r26, 0xA5	; 165
    2c72:	bf 4f       	sbci	r27, 0xFF	; 255
    2c74:	fe 01       	movw	r30, r28
    2c76:	e5 5a       	subi	r30, 0xA5	; 165
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	11 96       	adiw	r26, 0x01	; 1
    2c82:	9c 93       	st	X, r25
    2c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 5a       	subi	r30, 0xA5	; 165
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	d1 f6       	brne	.-76     	; 0x2c48 <LCD_VidSendChar+0x612>
    2c94:	27 c0       	rjmp	.+78     	; 0x2ce4 <LCD_VidSendChar+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	8e 01       	movw	r16, r28
    2c98:	05 5a       	subi	r16, 0xA5	; 165
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e3 5a       	subi	r30, 0xA3	; 163
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
    2cb8:	de 01       	movw	r26, r28
    2cba:	a9 5a       	subi	r26, 0xA9	; 169
    2cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e5 5a       	subi	r30, 0xA5	; 165
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	80 81       	ld	r24, Z
    2cc6:	91 81       	ldd	r25, Z+1	; 0x01
    2cc8:	8d 93       	st	X+, r24
    2cca:	9c 93       	st	X, r25
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e9 5a       	subi	r30, 0xA9	; 169
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_VidSendChar+0x6a0>
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e9 5a       	subi	r30, 0xA9	; 169
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	62 e0       	ldi	r22, 0x02	; 2
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ed 5a       	subi	r30, 0xAD	; 173
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e8       	ldi	r26, 0x80	; 128
    2cfa:	bf e3       	ldi	r27, 0x3F	; 63
    2cfc:	80 83       	st	Z, r24
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	a2 83       	std	Z+2, r26	; 0x02
    2d02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d04:	8e 01       	movw	r16, r28
    2d06:	01 5b       	subi	r16, 0xB1	; 177
    2d08:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ed 5a       	subi	r30, 0xAD	; 173
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	2b ea       	ldi	r18, 0xAB	; 171
    2d1a:	3a ea       	ldi	r19, 0xAA	; 170
    2d1c:	4a ea       	ldi	r20, 0xAA	; 170
    2d1e:	50 e4       	ldi	r21, 0x40	; 64
    2d20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	f8 01       	movw	r30, r16
    2d2a:	80 83       	st	Z, r24
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	a2 83       	std	Z+2, r26	; 0x02
    2d30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d32:	fe 01       	movw	r30, r28
    2d34:	e1 5b       	subi	r30, 0xB1	; 177
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	34 f4       	brge	.+12     	; 0x2d5c <LCD_VidSendChar+0x726>
		__ticks = 1;
    2d50:	fe 01       	movw	r30, r28
    2d52:	e2 5b       	subi	r30, 0xB2	; 178
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	80 83       	st	Z, r24
    2d5a:	e0 c0       	rjmp	.+448    	; 0x2f1c <LCD_VidSendChar+0x8e6>
	else if (__tmp > 255)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e1 5b       	subi	r30, 0xB1	; 177
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	53 e4       	ldi	r21, 0x43	; 67
    2d72:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	0c f0       	brlt	.+2      	; 0x2d7c <LCD_VidSendChar+0x746>
    2d7a:	c0 c0       	rjmp	.+384    	; 0x2efc <LCD_VidSendChar+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ed 5a       	subi	r30, 0xAD	; 173
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	4a e7       	ldi	r20, 0x7A	; 122
    2d90:	54 e4       	ldi	r21, 0x44	; 68
    2d92:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e6 5b       	subi	r30, 0xB6	; 182
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 83       	st	Z, r24
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	a2 83       	std	Z+2, r26	; 0x02
    2da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	8e 01       	movw	r16, r28
    2daa:	0a 5b       	subi	r16, 0xBA	; 186
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	e6 5b       	subi	r30, 0xB6	; 182
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a e7       	ldi	r20, 0x7A	; 122
    2dc2:	55 e4       	ldi	r21, 0x45	; 69
    2dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	80 83       	st	Z, r24
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	a2 83       	std	Z+2, r26	; 0x02
    2dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ea 5b       	subi	r30, 0xBA	; 186
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e8       	ldi	r20, 0x80	; 128
    2dea:	5f e3       	ldi	r21, 0x3F	; 63
    2dec:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2df0:	88 23       	and	r24, r24
    2df2:	44 f4       	brge	.+16     	; 0x2e04 <LCD_VidSendChar+0x7ce>
		__ticks = 1;
    2df4:	fe 01       	movw	r30, r28
    2df6:	ec 5b       	subi	r30, 0xBC	; 188
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	64 c0       	rjmp	.+200    	; 0x2ecc <LCD_VidSendChar+0x896>
	else if (__tmp > 65535)
    2e04:	fe 01       	movw	r30, r28
    2e06:	ea 5b       	subi	r30, 0xBA	; 186
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <LCD_VidSendChar+0x7ee>
    2e22:	43 c0       	rjmp	.+134    	; 0x2eaa <LCD_VidSendChar+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	fe 01       	movw	r30, r28
    2e26:	e6 5b       	subi	r30, 0xB6	; 182
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e2       	ldi	r20, 0x20	; 32
    2e38:	51 e4       	ldi	r21, 0x41	; 65
    2e3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8e 01       	movw	r16, r28
    2e44:	0c 5b       	subi	r16, 0xBC	; 188
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	bc 01       	movw	r22, r24
    2e4a:	cd 01       	movw	r24, r26
    2e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	f8 01       	movw	r30, r16
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <LCD_VidSendChar+0x864>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ee 5b       	subi	r30, 0xBE	; 190
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 e9       	ldi	r24, 0x90	; 144
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ee 5b       	subi	r30, 0xBE	; 190
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <LCD_VidSendChar+0x83e>
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ee 5b       	subi	r30, 0xBE	; 190
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	de 01       	movw	r26, r28
    2e84:	ac 5b       	subi	r26, 0xBC	; 188
    2e86:	bf 4f       	sbci	r27, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ec 5b       	subi	r30, 0xBC	; 188
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	11 96       	adiw	r26, 0x01	; 1
    2e96:	9c 93       	st	X, r25
    2e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ec 5b       	subi	r30, 0xBC	; 188
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	d1 f6       	brne	.-76     	; 0x2e5c <LCD_VidSendChar+0x826>
    2ea8:	42 c0       	rjmp	.+132    	; 0x2f2e <LCD_VidSendChar+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	8e 01       	movw	r16, r28
    2eac:	0c 5b       	subi	r16, 0xBC	; 188
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ea 5b       	subi	r30, 0xBA	; 186
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	de 01       	movw	r26, r28
    2ece:	a0 5c       	subi	r26, 0xC0	; 192
    2ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ec 5b       	subi	r30, 0xBC	; 188
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	9c 93       	st	X, r25
    2ee0:	8e 93       	st	-X, r24
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e0 5c       	subi	r30, 0xC0	; 192
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_VidSendChar+0x8b6>
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e0 5c       	subi	r30, 0xC0	; 192
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
    2efa:	19 c0       	rjmp	.+50     	; 0x2f2e <LCD_VidSendChar+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2efc:	8e 01       	movw	r16, r28
    2efe:	02 5b       	subi	r16, 0xB2	; 178
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	fe 01       	movw	r30, r28
    2f04:	e1 5b       	subi	r30, 0xB1	; 177
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	f8 01       	movw	r30, r16
    2f1a:	80 83       	st	Z, r24
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e2 5b       	subi	r30, 0xB2	; 178
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f26:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f28:	8a 95       	dec	r24
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_VidSendChar+0x8f2>
    2f2c:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	41 e0       	ldi	r20, 0x01	; 1
    2f34:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	8b af       	std	Y+59, r24	; 0x3b
    2f42:	9c af       	std	Y+60, r25	; 0x3c
    2f44:	ad af       	std	Y+61, r26	; 0x3d
    2f46:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f48:	6b ad       	ldd	r22, Y+59	; 0x3b
    2f4a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f50:	2b ea       	ldi	r18, 0xAB	; 171
    2f52:	3a ea       	ldi	r19, 0xAA	; 170
    2f54:	4a ea       	ldi	r20, 0xAA	; 170
    2f56:	50 e4       	ldi	r21, 0x40	; 64
    2f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8f ab       	std	Y+55, r24	; 0x37
    2f62:	98 af       	std	Y+56, r25	; 0x38
    2f64:	a9 af       	std	Y+57, r26	; 0x39
    2f66:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2f68:	6f a9       	ldd	r22, Y+55	; 0x37
    2f6a:	78 ad       	ldd	r23, Y+56	; 0x38
    2f6c:	89 ad       	ldd	r24, Y+57	; 0x39
    2f6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	1c f4       	brge	.+6      	; 0x2f86 <LCD_VidSendChar+0x950>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	8e ab       	std	Y+54, r24	; 0x36
    2f84:	91 c0       	rjmp	.+290    	; 0x30a8 <LCD_VidSendChar+0xa72>
	else if (__tmp > 255)
    2f86:	6f a9       	ldd	r22, Y+55	; 0x37
    2f88:	78 ad       	ldd	r23, Y+56	; 0x38
    2f8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	53 e4       	ldi	r21, 0x43	; 67
    2f96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	0c f0       	brlt	.+2      	; 0x2fa0 <LCD_VidSendChar+0x96a>
    2f9e:	7b c0       	rjmp	.+246    	; 0x3096 <LCD_VidSendChar+0xa60>
	{
		_delay_ms(__us / 1000.0);
    2fa0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2fa2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	4a e7       	ldi	r20, 0x7A	; 122
    2fae:	54 e4       	ldi	r21, 0x44	; 68
    2fb0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	8a ab       	std	Y+50, r24	; 0x32
    2fba:	9b ab       	std	Y+51, r25	; 0x33
    2fbc:	ac ab       	std	Y+52, r26	; 0x34
    2fbe:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	6a a9       	ldd	r22, Y+50	; 0x32
    2fc2:	7b a9       	ldd	r23, Y+51	; 0x33
    2fc4:	8c a9       	ldd	r24, Y+52	; 0x34
    2fc6:	9d a9       	ldd	r25, Y+53	; 0x35
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a e7       	ldi	r20, 0x7A	; 122
    2fce:	55 e4       	ldi	r21, 0x45	; 69
    2fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8e a7       	std	Y+46, r24	; 0x2e
    2fda:	9f a7       	std	Y+47, r25	; 0x2f
    2fdc:	a8 ab       	std	Y+48, r26	; 0x30
    2fde:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2fe0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2fe2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2fe4:	88 a9       	ldd	r24, Y+48	; 0x30
    2fe6:	99 a9       	ldd	r25, Y+49	; 0x31
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <LCD_VidSendChar+0x9cc>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9d a7       	std	Y+45, r25	; 0x2d
    2ffe:	8c a7       	std	Y+44, r24	; 0x2c
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <LCD_VidSendChar+0xa4a>
	else if (__tmp > 65535)
    3002:	6e a5       	ldd	r22, Y+46	; 0x2e
    3004:	7f a5       	ldd	r23, Y+47	; 0x2f
    3006:	88 a9       	ldd	r24, Y+48	; 0x30
    3008:	99 a9       	ldd	r25, Y+49	; 0x31
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <LCD_VidSendChar+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	6a a9       	ldd	r22, Y+50	; 0x32
    301c:	7b a9       	ldd	r23, Y+51	; 0x33
    301e:	8c a9       	ldd	r24, Y+52	; 0x34
    3020:	9d a9       	ldd	r25, Y+53	; 0x35
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9d a7       	std	Y+45, r25	; 0x2d
    3040:	8c a7       	std	Y+44, r24	; 0x2c
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <LCD_VidSendChar+0xa2c>
    3044:	80 e9       	ldi	r24, 0x90	; 144
    3046:	91 e0       	ldi	r25, 0x01	; 1
    3048:	9b a7       	std	Y+43, r25	; 0x2b
    304a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    304c:	8a a5       	ldd	r24, Y+42	; 0x2a
    304e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <LCD_VidSendChar+0xa1a>
    3054:	9b a7       	std	Y+43, r25	; 0x2b
    3056:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8c a5       	ldd	r24, Y+44	; 0x2c
    305a:	9d a5       	ldd	r25, Y+45	; 0x2d
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	9d a7       	std	Y+45, r25	; 0x2d
    3060:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8c a5       	ldd	r24, Y+44	; 0x2c
    3064:	9d a5       	ldd	r25, Y+45	; 0x2d
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <LCD_VidSendChar+0xa0e>
    306a:	24 c0       	rjmp	.+72     	; 0x30b4 <LCD_VidSendChar+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	6e a5       	ldd	r22, Y+46	; 0x2e
    306e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3070:	88 a9       	ldd	r24, Y+48	; 0x30
    3072:	99 a9       	ldd	r25, Y+49	; 0x31
    3074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9d a7       	std	Y+45, r25	; 0x2d
    307e:	8c a7       	std	Y+44, r24	; 0x2c
    3080:	8c a5       	ldd	r24, Y+44	; 0x2c
    3082:	9d a5       	ldd	r25, Y+45	; 0x2d
    3084:	99 a7       	std	Y+41, r25	; 0x29
    3086:	88 a7       	std	Y+40, r24	; 0x28
    3088:	88 a5       	ldd	r24, Y+40	; 0x28
    308a:	99 a5       	ldd	r25, Y+41	; 0x29
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <LCD_VidSendChar+0xa56>
    3090:	99 a7       	std	Y+41, r25	; 0x29
    3092:	88 a7       	std	Y+40, r24	; 0x28
    3094:	0f c0       	rjmp	.+30     	; 0x30b4 <LCD_VidSendChar+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3096:	6f a9       	ldd	r22, Y+55	; 0x37
    3098:	78 ad       	ldd	r23, Y+56	; 0x38
    309a:	89 ad       	ldd	r24, Y+57	; 0x39
    309c:	9a ad       	ldd	r25, Y+58	; 0x3a
    309e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8e ab       	std	Y+54, r24	; 0x36
    30a8:	8e a9       	ldd	r24, Y+54	; 0x36
    30aa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30ac:	8f a1       	ldd	r24, Y+39	; 0x27
    30ae:	8a 95       	dec	r24
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_VidSendChar+0xa78>
    30b2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin0));
    30b4:	fe 01       	movw	r30, r28
    30b6:	eb 56       	subi	r30, 0x6B	; 107
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	98 2f       	mov	r25, r24
    30be:	91 70       	andi	r25, 0x01	; 1
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	63 e0       	ldi	r22, 0x03	; 3
    30c4:	49 2f       	mov	r20, r25
    30c6:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin1));
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 56       	subi	r30, 0x6B	; 107
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	86 95       	lsr	r24
    30d4:	98 2f       	mov	r25, r24
    30d6:	91 70       	andi	r25, 0x01	; 1
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	64 e0       	ldi	r22, 0x04	; 4
    30dc:	49 2f       	mov	r20, r25
    30de:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin2));
    30e2:	fe 01       	movw	r30, r28
    30e4:	eb 56       	subi	r30, 0x6B	; 107
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	86 95       	lsr	r24
    30ec:	86 95       	lsr	r24
    30ee:	98 2f       	mov	r25, r24
    30f0:	91 70       	andi	r25, 0x01	; 1
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	65 e0       	ldi	r22, 0x05	; 5
    30f6:	49 2f       	mov	r20, r25
    30f8:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin3));
    30fc:	fe 01       	movw	r30, r28
    30fe:	eb 56       	subi	r30, 0x6B	; 107
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	86 95       	lsr	r24
    3106:	86 95       	lsr	r24
    3108:	86 95       	lsr	r24
    310a:	98 2f       	mov	r25, r24
    310c:	91 70       	andi	r25, 0x01	; 1
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	66 e0       	ldi	r22, 0x06	; 6
    3112:	49 2f       	mov	r20, r25
    3114:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e8       	ldi	r26, 0x80	; 128
    311e:	bf e3       	ldi	r27, 0x3F	; 63
    3120:	8b a3       	std	Y+35, r24	; 0x23
    3122:	9c a3       	std	Y+36, r25	; 0x24
    3124:	ad a3       	std	Y+37, r26	; 0x25
    3126:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	6b a1       	ldd	r22, Y+35	; 0x23
    312a:	7c a1       	ldd	r23, Y+36	; 0x24
    312c:	8d a1       	ldd	r24, Y+37	; 0x25
    312e:	9e a1       	ldd	r25, Y+38	; 0x26
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a e7       	ldi	r20, 0x7A	; 122
    3136:	55 e4       	ldi	r21, 0x45	; 69
    3138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8f 8f       	std	Y+31, r24	; 0x1f
    3142:	98 a3       	std	Y+32, r25	; 0x20
    3144:	a9 a3       	std	Y+33, r26	; 0x21
    3146:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3148:	6f 8d       	ldd	r22, Y+31	; 0x1f
    314a:	78 a1       	ldd	r23, Y+32	; 0x20
    314c:	89 a1       	ldd	r24, Y+33	; 0x21
    314e:	9a a1       	ldd	r25, Y+34	; 0x22
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e8       	ldi	r20, 0x80	; 128
    3156:	5f e3       	ldi	r21, 0x3F	; 63
    3158:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    315c:	88 23       	and	r24, r24
    315e:	2c f4       	brge	.+10     	; 0x316a <LCD_VidSendChar+0xb34>
		__ticks = 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9e 8f       	std	Y+30, r25	; 0x1e
    3166:	8d 8f       	std	Y+29, r24	; 0x1d
    3168:	3f c0       	rjmp	.+126    	; 0x31e8 <LCD_VidSendChar+0xbb2>
	else if (__tmp > 65535)
    316a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    316c:	78 a1       	ldd	r23, Y+32	; 0x20
    316e:	89 a1       	ldd	r24, Y+33	; 0x21
    3170:	9a a1       	ldd	r25, Y+34	; 0x22
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	3f ef       	ldi	r19, 0xFF	; 255
    3176:	4f e7       	ldi	r20, 0x7F	; 127
    3178:	57 e4       	ldi	r21, 0x47	; 71
    317a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    317e:	18 16       	cp	r1, r24
    3180:	4c f5       	brge	.+82     	; 0x31d4 <LCD_VidSendChar+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3182:	6b a1       	ldd	r22, Y+35	; 0x23
    3184:	7c a1       	ldd	r23, Y+36	; 0x24
    3186:	8d a1       	ldd	r24, Y+37	; 0x25
    3188:	9e a1       	ldd	r25, Y+38	; 0x26
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e2       	ldi	r20, 0x20	; 32
    3190:	51 e4       	ldi	r21, 0x41	; 65
    3192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	bc 01       	movw	r22, r24
    319c:	cd 01       	movw	r24, r26
    319e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9e 8f       	std	Y+30, r25	; 0x1e
    31a8:	8d 8f       	std	Y+29, r24	; 0x1d
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <LCD_VidSendChar+0xb94>
    31ac:	80 e9       	ldi	r24, 0x90	; 144
    31ae:	91 e0       	ldi	r25, 0x01	; 1
    31b0:	9c 8f       	std	Y+28, r25	; 0x1c
    31b2:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_VidSendChar+0xb82>
    31bc:	9c 8f       	std	Y+28, r25	; 0x1c
    31be:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	9e 8f       	std	Y+30, r25	; 0x1e
    31c8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	69 f7       	brne	.-38     	; 0x31ac <LCD_VidSendChar+0xb76>
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <LCD_VidSendChar+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31d6:	78 a1       	ldd	r23, Y+32	; 0x20
    31d8:	89 a1       	ldd	r24, Y+33	; 0x21
    31da:	9a a1       	ldd	r25, Y+34	; 0x22
    31dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9e 8f       	std	Y+30, r25	; 0x1e
    31e6:	8d 8f       	std	Y+29, r24	; 0x1d
    31e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ec:	9a 8f       	std	Y+26, r25	; 0x1a
    31ee:	89 8f       	std	Y+25, r24	; 0x19
    31f0:	89 8d       	ldd	r24, Y+25	; 0x19
    31f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <LCD_VidSendChar+0xbbe>
    31f8:	9a 8f       	std	Y+26, r25	; 0x1a
    31fa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	62 e0       	ldi	r22, 0x02	; 2
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_VidSetPinValue>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a0 e8       	ldi	r26, 0x80	; 128
    320c:	bf e3       	ldi	r27, 0x3F	; 63
    320e:	8d 8b       	std	Y+21, r24	; 0x15
    3210:	9e 8b       	std	Y+22, r25	; 0x16
    3212:	af 8b       	std	Y+23, r26	; 0x17
    3214:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	2b ea       	ldi	r18, 0xAB	; 171
    3220:	3a ea       	ldi	r19, 0xAA	; 170
    3222:	4a ea       	ldi	r20, 0xAA	; 170
    3224:	50 e4       	ldi	r21, 0x40	; 64
    3226:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	89 8b       	std	Y+17, r24	; 0x11
    3230:	9a 8b       	std	Y+18, r25	; 0x12
    3232:	ab 8b       	std	Y+19, r26	; 0x13
    3234:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3236:	69 89       	ldd	r22, Y+17	; 0x11
    3238:	7a 89       	ldd	r23, Y+18	; 0x12
    323a:	8b 89       	ldd	r24, Y+19	; 0x13
    323c:	9c 89       	ldd	r25, Y+20	; 0x14
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	1c f4       	brge	.+6      	; 0x3254 <LCD_VidSendChar+0xc1e>
		__ticks = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	88 8b       	std	Y+16, r24	; 0x10
    3252:	91 c0       	rjmp	.+290    	; 0x3376 <LCD_VidSendChar+0xd40>
	else if (__tmp > 255)
    3254:	69 89       	ldd	r22, Y+17	; 0x11
    3256:	7a 89       	ldd	r23, Y+18	; 0x12
    3258:	8b 89       	ldd	r24, Y+19	; 0x13
    325a:	9c 89       	ldd	r25, Y+20	; 0x14
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	53 e4       	ldi	r21, 0x43	; 67
    3264:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	0c f0       	brlt	.+2      	; 0x326e <LCD_VidSendChar+0xc38>
    326c:	7b c0       	rjmp	.+246    	; 0x3364 <LCD_VidSendChar+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    326e:	6d 89       	ldd	r22, Y+21	; 0x15
    3270:	7e 89       	ldd	r23, Y+22	; 0x16
    3272:	8f 89       	ldd	r24, Y+23	; 0x17
    3274:	98 8d       	ldd	r25, Y+24	; 0x18
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a e7       	ldi	r20, 0x7A	; 122
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	8c 87       	std	Y+12, r24	; 0x0c
    3288:	9d 87       	std	Y+13, r25	; 0x0d
    328a:	ae 87       	std	Y+14, r26	; 0x0e
    328c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3290:	7d 85       	ldd	r23, Y+13	; 0x0d
    3292:	8e 85       	ldd	r24, Y+14	; 0x0e
    3294:	9f 85       	ldd	r25, Y+15	; 0x0f
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a e7       	ldi	r20, 0x7A	; 122
    329c:	55 e4       	ldi	r21, 0x45	; 69
    329e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	88 87       	std	Y+8, r24	; 0x08
    32a8:	99 87       	std	Y+9, r25	; 0x09
    32aa:	aa 87       	std	Y+10, r26	; 0x0a
    32ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32ae:	68 85       	ldd	r22, Y+8	; 0x08
    32b0:	79 85       	ldd	r23, Y+9	; 0x09
    32b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	5f e3       	ldi	r21, 0x3F	; 63
    32be:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    32c2:	88 23       	and	r24, r24
    32c4:	2c f4       	brge	.+10     	; 0x32d0 <LCD_VidSendChar+0xc9a>
		__ticks = 1;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9f 83       	std	Y+7, r25	; 0x07
    32cc:	8e 83       	std	Y+6, r24	; 0x06
    32ce:	3f c0       	rjmp	.+126    	; 0x334e <LCD_VidSendChar+0xd18>
	else if (__tmp > 65535)
    32d0:	68 85       	ldd	r22, Y+8	; 0x08
    32d2:	79 85       	ldd	r23, Y+9	; 0x09
    32d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	4f e7       	ldi	r20, 0x7F	; 127
    32de:	57 e4       	ldi	r21, 0x47	; 71
    32e0:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    32e4:	18 16       	cp	r1, r24
    32e6:	4c f5       	brge	.+82     	; 0x333a <LCD_VidSendChar+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    32ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    32ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    32ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e2       	ldi	r20, 0x20	; 32
    32f6:	51 e4       	ldi	r21, 0x41	; 65
    32f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9f 83       	std	Y+7, r25	; 0x07
    330e:	8e 83       	std	Y+6, r24	; 0x06
    3310:	0f c0       	rjmp	.+30     	; 0x3330 <LCD_VidSendChar+0xcfa>
    3312:	80 e9       	ldi	r24, 0x90	; 144
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	9d 83       	std	Y+5, r25	; 0x05
    3318:	8c 83       	std	Y+4, r24	; 0x04
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	9d 81       	ldd	r25, Y+5	; 0x05
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <LCD_VidSendChar+0xce8>
    3322:	9d 83       	std	Y+5, r25	; 0x05
    3324:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3326:	8e 81       	ldd	r24, Y+6	; 0x06
    3328:	9f 81       	ldd	r25, Y+7	; 0x07
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	9f 83       	std	Y+7, r25	; 0x07
    332e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3330:	8e 81       	ldd	r24, Y+6	; 0x06
    3332:	9f 81       	ldd	r25, Y+7	; 0x07
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	69 f7       	brne	.-38     	; 0x3312 <LCD_VidSendChar+0xcdc>
    3338:	24 c0       	rjmp	.+72     	; 0x3382 <LCD_VidSendChar+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333a:	68 85       	ldd	r22, Y+8	; 0x08
    333c:	79 85       	ldd	r23, Y+9	; 0x09
    333e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3340:	9b 85       	ldd	r25, Y+11	; 0x0b
    3342:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9f 83       	std	Y+7, r25	; 0x07
    334c:	8e 83       	std	Y+6, r24	; 0x06
    334e:	8e 81       	ldd	r24, Y+6	; 0x06
    3350:	9f 81       	ldd	r25, Y+7	; 0x07
    3352:	9b 83       	std	Y+3, r25	; 0x03
    3354:	8a 83       	std	Y+2, r24	; 0x02
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	f1 f7       	brne	.-4      	; 0x335a <LCD_VidSendChar+0xd24>
    335e:	9b 83       	std	Y+3, r25	; 0x03
    3360:	8a 83       	std	Y+2, r24	; 0x02
    3362:	0f c0       	rjmp	.+30     	; 0x3382 <LCD_VidSendChar+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3364:	69 89       	ldd	r22, Y+17	; 0x11
    3366:	7a 89       	ldd	r23, Y+18	; 0x12
    3368:	8b 89       	ldd	r24, Y+19	; 0x13
    336a:	9c 89       	ldd	r25, Y+20	; 0x14
    336c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	88 8b       	std	Y+16, r24	; 0x10
    3376:	88 89       	ldd	r24, Y+16	; 0x10
    3378:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	8a 95       	dec	r24
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_VidSendChar+0xd46>
    3380:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);


}
    3382:	cb 56       	subi	r28, 0x6B	; 107
    3384:	df 4f       	sbci	r29, 0xFF	; 255
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <LCD_VidSendString>:

void LCD_VidSendString(char *Copy_u8Data)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <LCD_VidSendString+0x6>
    33a0:	0f 92       	push	r0
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	9b 83       	std	Y+3, r25	; 0x03
    33a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    33aa:	19 82       	std	Y+1, r1	; 0x01
    33ac:	0e c0       	rjmp	.+28     	; 0x33ca <LCD_VidSendString+0x30>
		LCD_VidSendChar(Copy_u8Data[i]);
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
    33b6:	9b 81       	ldd	r25, Y+3	; 0x03
    33b8:	fc 01       	movw	r30, r24
    33ba:	e2 0f       	add	r30, r18
    33bc:	f3 1f       	adc	r31, r19
    33be:	80 81       	ld	r24, Z
    33c0:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_VidSendChar>
}

void LCD_VidSendString(char *Copy_u8Data)
{
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	8f 5f       	subi	r24, 0xFF	; 255
    33c8:	89 83       	std	Y+1, r24	; 0x01
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	fc 01       	movw	r30, r24
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	80 81       	ld	r24, Z
    33dc:	88 23       	and	r24, r24
    33de:	39 f7       	brne	.-50     	; 0x33ae <LCD_VidSendString+0x14>
		LCD_VidSendChar(Copy_u8Data[i]);

}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <LCD_VidIntegerToString>:

void LCD_VidIntegerToString(u16 data)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	62 97       	sbiw	r28, 0x12	; 18
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	9a 8b       	std	Y+18, r25	; 0x12
    3402:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   itoa(data,arr,10);
    3404:	89 89       	ldd	r24, Y+17	; 0x11
    3406:	9a 89       	ldd	r25, Y+18	; 0x12
    3408:	9e 01       	movw	r18, r28
    340a:	2f 5f       	subi	r18, 0xFF	; 255
    340c:	3f 4f       	sbci	r19, 0xFF	; 255
    340e:	b9 01       	movw	r22, r18
    3410:	4a e0       	ldi	r20, 0x0A	; 10
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <itoa>

   LCD_VidSendString(arr);
    3418:	ce 01       	movw	r24, r28
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_VidSendString>
}
    3420:	62 96       	adiw	r28, 0x12	; 18
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <LCD_VidMoveCursor>:

void LCD_VidMoveCursor(u8 row, u8 column)
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	00 d0       	rcall	.+0      	; 0x3438 <LCD_VidMoveCursor+0x6>
    3438:	00 d0       	rcall	.+0      	; 0x343a <LCD_VidMoveCursor+0x8>
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	8a 83       	std	Y+2, r24	; 0x02
    3442:	6b 83       	std	Y+3, r22	; 0x03

	u8 position;
	switch(row)
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	3d 83       	std	Y+5, r19	; 0x05
    344c:	2c 83       	std	Y+4, r18	; 0x04
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	9d 81       	ldd	r25, Y+5	; 0x05
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	31 f0       	breq	.+12     	; 0x3462 <LCD_VidMoveCursor+0x30>
    3456:	2c 81       	ldd	r18, Y+4	; 0x04
    3458:	3d 81       	ldd	r19, Y+5	; 0x05
    345a:	21 30       	cpi	r18, 0x01	; 1
    345c:	31 05       	cpc	r19, r1
    345e:	21 f0       	breq	.+8      	; 0x3468 <LCD_VidMoveCursor+0x36>
    3460:	06 c0       	rjmp	.+12     	; 0x346e <LCD_VidMoveCursor+0x3c>
	{
	case 0 :
		position=0x00+column; //first row position is 0x00 + column
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	03 c0       	rjmp	.+6      	; 0x346e <LCD_VidMoveCursor+0x3c>
		break;
	case 1 :
		position=0x40+column; //second row position is 0x040 + column
    3468:	8b 81       	ldd	r24, Y+3	; 0x03
    346a:	80 5c       	subi	r24, 0xC0	; 192
    346c:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_VidSendCommand(position|0x80);
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	80 68       	ori	r24, 0x80	; 128
    3472:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
}
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <LCD_VidSendString_XY>:
void LCD_VidSendString_XY(char *Copy_u8Data,u8 row, u8 column)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	00 d0       	rcall	.+0      	; 0x348c <LCD_VidSendString_XY+0x6>
    348c:	00 d0       	rcall	.+0      	; 0x348e <LCD_VidSendString_XY+0x8>
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	6b 83       	std	Y+3, r22	; 0x03
    3498:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	6c 81       	ldd	r22, Y+4	; 0x04
    349e:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VidMoveCursor>
	LCD_VidSendString(Copy_u8Data);
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_VidSendString>
}
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <LCD_VidIntegerToString_XY>:
void LCD_VidIntegerToString_XY(u16 data,u8 row, u8 column)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	00 d0       	rcall	.+0      	; 0x34be <LCD_VidIntegerToString_XY+0x6>
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <LCD_VidIntegerToString_XY+0x8>
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	6b 83       	std	Y+3, r22	; 0x03
    34ca:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	6c 81       	ldd	r22, Y+4	; 0x04
    34d0:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VidMoveCursor>
	LCD_VidIntegerToString(data);
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	0e 94 f6 19 	call	0x33ec	; 0x33ec <LCD_VidIntegerToString>
}
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	08 95       	ret

000034ea <LCD_VidClearScreen>:
void LCD_VidClearScreen()
{
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x01);
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <LCD_VidSendCommand>
}
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <LCD_VidSendFloat>:
void LCD_VidSendFloat(f32 data)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	28 97       	sbiw	r28, 0x08	; 8
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	6d 83       	std	Y+5, r22	; 0x05
    3514:	7e 83       	std	Y+6, r23	; 0x06
    3516:	8f 83       	std	Y+7, r24	; 0x07
    3518:	98 87       	std	Y+8, r25	; 0x08
	s16 _dot,dot_;
	_dot = data;
    351a:	6d 81       	ldd	r22, Y+5	; 0x05
    351c:	7e 81       	ldd	r23, Y+6	; 0x06
    351e:	8f 81       	ldd	r24, Y+7	; 0x07
    3520:	98 85       	ldd	r25, Y+8	; 0x08
    3522:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9c 83       	std	Y+4, r25	; 0x04
    352c:	8b 83       	std	Y+3, r24	; 0x03
	dot_ = (data- _dot)*1000;  //1000 For accuracy
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	aa 27       	eor	r26, r26
    3534:	97 fd       	sbrc	r25, 7
    3536:	a0 95       	com	r26
    3538:	ba 2f       	mov	r27, r26
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    3542:	9b 01       	movw	r18, r22
    3544:	ac 01       	movw	r20, r24
    3546:	6d 81       	ldd	r22, Y+5	; 0x05
    3548:	7e 81       	ldd	r23, Y+6	; 0x06
    354a:	8f 81       	ldd	r24, Y+7	; 0x07
    354c:	98 85       	ldd	r25, Y+8	; 0x08
    354e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	bc 01       	movw	r22, r24
    3558:	cd 01       	movw	r24, r26
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a e7       	ldi	r20, 0x7A	; 122
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidIntegerToString(_dot);
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	9c 81       	ldd	r25, Y+4	; 0x04
    357e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <LCD_VidIntegerToString>
	if(dot_>0)
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	18 16       	cp	r1, r24
    3588:	19 06       	cpc	r1, r25
    358a:	3c f4       	brge	.+14     	; 0x359a <LCD_VidSendFloat+0x9c>
	{
		LCD_VidSendChar('.');
    358c:	8e e2       	ldi	r24, 0x2E	; 46
    358e:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_VidSendChar>
		LCD_VidIntegerToString(dot_);
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	0e 94 f6 19 	call	0x33ec	; 0x33ec <LCD_VidIntegerToString>
	else
	{

	}

}
    359a:	28 96       	adiw	r28, 0x08	; 8
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	cf 91       	pop	r28
    35a8:	df 91       	pop	r29
    35aa:	08 95       	ret

000035ac <main>:
#include "DIO_interface.h"
#include "KPD_interface.h"
#include "LCD_interface.h"

int main()
{
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	6e 97       	sbiw	r28, 0x1e	; 30
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    35c8:	0e 94 45 0b 	call	0x168a	; 0x168a <LCD_VidInit>
	KPD_VidInit();
    35cc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <KPD_VidInit>
	LCD_VidClearScreen();
    35d0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_VidClearScreen>
	LCD_VidSendString_XY("WELCOME", 0, 4);
    35d4:	80 e6       	ldi	r24, 0x60	; 96
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	44 e0       	ldi	r20, 0x04	; 4
    35dc:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_VidSendString_XY>
	LCD_VidSendString_XY("CALCULATOR", 1, 3);
    35e0:	88 e6       	ldi	r24, 0x68	; 104
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	43 e0       	ldi	r20, 0x03	; 3
    35e8:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_VidSendString_XY>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e4       	ldi	r25, 0x40	; 64
    35f0:	ac e1       	ldi	r26, 0x1C	; 28
    35f2:	b6 e4       	ldi	r27, 0x46	; 70
    35f4:	8b 87       	std	Y+11, r24	; 0x0b
    35f6:	9c 87       	std	Y+12, r25	; 0x0c
    35f8:	ad 87       	std	Y+13, r26	; 0x0d
    35fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3600:	8d 85       	ldd	r24, Y+13	; 0x0d
    3602:	9e 85       	ldd	r25, Y+14	; 0x0e
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a e7       	ldi	r20, 0x7A	; 122
    360a:	55 e4       	ldi	r21, 0x45	; 69
    360c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	8f 83       	std	Y+7, r24	; 0x07
    3616:	98 87       	std	Y+8, r25	; 0x08
    3618:	a9 87       	std	Y+9, r26	; 0x09
    361a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    361c:	6f 81       	ldd	r22, Y+7	; 0x07
    361e:	78 85       	ldd	r23, Y+8	; 0x08
    3620:	89 85       	ldd	r24, Y+9	; 0x09
    3622:	9a 85       	ldd	r25, Y+10	; 0x0a
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e8       	ldi	r20, 0x80	; 128
    362a:	5f e3       	ldi	r21, 0x3F	; 63
    362c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    3630:	88 23       	and	r24, r24
    3632:	2c f4       	brge	.+10     	; 0x363e <main+0x92>
		__ticks = 1;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	3f c0       	rjmp	.+126    	; 0x36bc <main+0x110>
	else if (__tmp > 65535)
    363e:	6f 81       	ldd	r22, Y+7	; 0x07
    3640:	78 85       	ldd	r23, Y+8	; 0x08
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	3f ef       	ldi	r19, 0xFF	; 255
    364a:	4f e7       	ldi	r20, 0x7F	; 127
    364c:	57 e4       	ldi	r21, 0x47	; 71
    364e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    3652:	18 16       	cp	r1, r24
    3654:	4c f5       	brge	.+82     	; 0x36a8 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	6b 85       	ldd	r22, Y+11	; 0x0b
    3658:	7c 85       	ldd	r23, Y+12	; 0x0c
    365a:	8d 85       	ldd	r24, Y+13	; 0x0d
    365c:	9e 85       	ldd	r25, Y+14	; 0x0e
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e2       	ldi	r20, 0x20	; 32
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	0f c0       	rjmp	.+30     	; 0x369e <main+0xf2>
    3680:	80 e9       	ldi	r24, 0x90	; 144
    3682:	91 e0       	ldi	r25, 0x01	; 1
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	9c 81       	ldd	r25, Y+4	; 0x04
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <main+0xe0>
    3690:	9c 83       	std	Y+4, r25	; 0x04
    3692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
    36a0:	9e 81       	ldd	r25, Y+6	; 0x06
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	69 f7       	brne	.-38     	; 0x3680 <main+0xd4>
    36a6:	14 c0       	rjmp	.+40     	; 0x36d0 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a8:	6f 81       	ldd	r22, Y+7	; 0x07
    36aa:	78 85       	ldd	r23, Y+8	; 0x08
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <main+0x11c>
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);
	LCD_VidClearScreen();
    36d0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_VidClearScreen>

	u8 PressedKey,Operator = '\0';
    36d4:	1b 8e       	std	Y+27, r1	; 0x1b
	f32 Num1 = 0, Num2 = 0, Res;
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	8f 8b       	std	Y+23, r24	; 0x17
    36e0:	98 8f       	std	Y+24, r25	; 0x18
    36e2:	a9 8f       	std	Y+25, r26	; 0x19
    36e4:	ba 8f       	std	Y+26, r27	; 0x1a
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	a0 e0       	ldi	r26, 0x00	; 0
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	8b 8b       	std	Y+19, r24	; 0x13
    36f0:	9c 8b       	std	Y+20, r25	; 0x14
    36f2:	ad 8b       	std	Y+21, r26	; 0x15
    36f4:	be 8b       	std	Y+22, r27	; 0x16

	while (1)
	{
		PressedKey = Kpd_U8GetPressedKey();
    36f6:	0e 94 cd 0a 	call	0x159a	; 0x159a <Kpd_U8GetPressedKey>
    36fa:	8c 8f       	std	Y+28, r24	; 0x1c

		if (PressedKey >= '0' && PressedKey <= '9')
    36fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36fe:	80 33       	cpi	r24, 0x30	; 48
    3700:	08 f4       	brcc	.+2      	; 0x3704 <main+0x158>
    3702:	58 c0       	rjmp	.+176    	; 0x37b4 <main+0x208>
    3704:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3706:	8a 33       	cpi	r24, 0x3A	; 58
    3708:	08 f0       	brcs	.+2      	; 0x370c <main+0x160>
    370a:	54 c0       	rjmp	.+168    	; 0x37b4 <main+0x208>
		{
			LCD_VidSendChar(PressedKey);
    370c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    370e:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_VidSendChar>
			if (Operator == '\0')
    3712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3714:	88 23       	and	r24, r24
    3716:	39 f5       	brne	.+78     	; 0x3766 <main+0x1ba>
			{
				Num1 = Num1 * 10 + (PressedKey - '0');
    3718:	6f 89       	ldd	r22, Y+23	; 0x17
    371a:	78 8d       	ldd	r23, Y+24	; 0x18
    371c:	89 8d       	ldd	r24, Y+25	; 0x19
    371e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e2       	ldi	r20, 0x20	; 32
    3726:	51 e4       	ldi	r21, 0x41	; 65
    3728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	7c 01       	movw	r14, r24
    3732:	8d 01       	movw	r16, r26
    3734:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	c0 97       	sbiw	r24, 0x30	; 48
    373c:	aa 27       	eor	r26, r26
    373e:	97 fd       	sbrc	r25, 7
    3740:	a0 95       	com	r26
    3742:	ba 2f       	mov	r27, r26
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    374c:	9b 01       	movw	r18, r22
    374e:	ac 01       	movw	r20, r24
    3750:	c8 01       	movw	r24, r16
    3752:	b7 01       	movw	r22, r14
    3754:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8f 8b       	std	Y+23, r24	; 0x17
    375e:	98 8f       	std	Y+24, r25	; 0x18
    3760:	a9 8f       	std	Y+25, r26	; 0x19
    3762:	ba 8f       	std	Y+26, r27	; 0x1a
    3764:	c8 cf       	rjmp	.-112    	; 0x36f6 <main+0x14a>
			}
			else
			{
				Num2 = Num2 * 10 + (PressedKey - '0');
    3766:	6b 89       	ldd	r22, Y+19	; 0x13
    3768:	7c 89       	ldd	r23, Y+20	; 0x14
    376a:	8d 89       	ldd	r24, Y+21	; 0x15
    376c:	9e 89       	ldd	r25, Y+22	; 0x16
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e2       	ldi	r20, 0x20	; 32
    3774:	51 e4       	ldi	r21, 0x41	; 65
    3776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	7c 01       	movw	r14, r24
    3780:	8d 01       	movw	r16, r26
    3782:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	c0 97       	sbiw	r24, 0x30	; 48
    378a:	aa 27       	eor	r26, r26
    378c:	97 fd       	sbrc	r25, 7
    378e:	a0 95       	com	r26
    3790:	ba 2f       	mov	r27, r26
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    379a:	9b 01       	movw	r18, r22
    379c:	ac 01       	movw	r20, r24
    379e:	c8 01       	movw	r24, r16
    37a0:	b7 01       	movw	r22, r14
    37a2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8b 8b       	std	Y+19, r24	; 0x13
    37ac:	9c 8b       	std	Y+20, r25	; 0x14
    37ae:	ad 8b       	std	Y+21, r26	; 0x15
    37b0:	be 8b       	std	Y+22, r27	; 0x16
    37b2:	a1 cf       	rjmp	.-190    	; 0x36f6 <main+0x14a>
			}
		}
		else if (PressedKey == '+' || PressedKey == '-' || PressedKey == '*' || PressedKey == '/')
    37b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37b6:	8b 32       	cpi	r24, 0x2B	; 43
    37b8:	49 f0       	breq	.+18     	; 0x37cc <main+0x220>
    37ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37bc:	8d 32       	cpi	r24, 0x2D	; 45
    37be:	31 f0       	breq	.+12     	; 0x37cc <main+0x220>
    37c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37c2:	8a 32       	cpi	r24, 0x2A	; 42
    37c4:	19 f0       	breq	.+6      	; 0x37cc <main+0x220>
    37c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37c8:	8f 32       	cpi	r24, 0x2F	; 47
    37ca:	31 f4       	brne	.+12     	; 0x37d8 <main+0x22c>
		{
			LCD_VidSendChar(PressedKey);
    37cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37ce:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_VidSendChar>
			Operator = PressedKey;
    37d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37d4:	8b 8f       	std	Y+27, r24	; 0x1b
    37d6:	8f cf       	rjmp	.-226    	; 0x36f6 <main+0x14a>
		}
		else if (PressedKey == '=')
    37d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37da:	8d 33       	cpi	r24, 0x3D	; 61
    37dc:	09 f0       	breq	.+2      	; 0x37e0 <main+0x234>
    37de:	9a c0       	rjmp	.+308    	; 0x3914 <main+0x368>
		{
			LCD_VidSendChar(PressedKey);
    37e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37e2:	0e 94 1b 13 	call	0x2636	; 0x2636 <LCD_VidSendChar>
			switch (Operator)
    37e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e8:	28 2f       	mov	r18, r24
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	3e 8f       	std	Y+30, r19	; 0x1e
    37ee:	2d 8f       	std	Y+29, r18	; 0x1d
    37f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37f4:	8b 32       	cpi	r24, 0x2B	; 43
    37f6:	91 05       	cpc	r25, r1
    37f8:	b1 f0       	breq	.+44     	; 0x3826 <main+0x27a>
    37fa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    37fc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    37fe:	2c 32       	cpi	r18, 0x2C	; 44
    3800:	31 05       	cpc	r19, r1
    3802:	34 f4       	brge	.+12     	; 0x3810 <main+0x264>
    3804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3808:	8a 32       	cpi	r24, 0x2A	; 42
    380a:	91 05       	cpc	r25, r1
    380c:	71 f1       	breq	.+92     	; 0x386a <main+0x2be>
    380e:	62 c0       	rjmp	.+196    	; 0x38d4 <main+0x328>
    3810:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3812:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3814:	2d 32       	cpi	r18, 0x2D	; 45
    3816:	31 05       	cpc	r19, r1
    3818:	b9 f0       	breq	.+46     	; 0x3848 <main+0x29c>
    381a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    381c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    381e:	8f 32       	cpi	r24, 0x2F	; 47
    3820:	91 05       	cpc	r25, r1
    3822:	a1 f1       	breq	.+104    	; 0x388c <main+0x2e0>
    3824:	57 c0       	rjmp	.+174    	; 0x38d4 <main+0x328>
			{
				case '+':
					Res = Num1 + Num2;
    3826:	6f 89       	ldd	r22, Y+23	; 0x17
    3828:	78 8d       	ldd	r23, Y+24	; 0x18
    382a:	89 8d       	ldd	r24, Y+25	; 0x19
    382c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    382e:	2b 89       	ldd	r18, Y+19	; 0x13
    3830:	3c 89       	ldd	r19, Y+20	; 0x14
    3832:	4d 89       	ldd	r20, Y+21	; 0x15
    3834:	5e 89       	ldd	r21, Y+22	; 0x16
    3836:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8f 87       	std	Y+15, r24	; 0x0f
    3840:	98 8b       	std	Y+16, r25	; 0x10
    3842:	a9 8b       	std	Y+17, r26	; 0x11
    3844:	ba 8b       	std	Y+18, r27	; 0x12
    3846:	4c c0       	rjmp	.+152    	; 0x38e0 <main+0x334>
					break;
				case '-':
					Res = Num1 - Num2;
    3848:	6f 89       	ldd	r22, Y+23	; 0x17
    384a:	78 8d       	ldd	r23, Y+24	; 0x18
    384c:	89 8d       	ldd	r24, Y+25	; 0x19
    384e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3850:	2b 89       	ldd	r18, Y+19	; 0x13
    3852:	3c 89       	ldd	r19, Y+20	; 0x14
    3854:	4d 89       	ldd	r20, Y+21	; 0x15
    3856:	5e 89       	ldd	r21, Y+22	; 0x16
    3858:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8f 87       	std	Y+15, r24	; 0x0f
    3862:	98 8b       	std	Y+16, r25	; 0x10
    3864:	a9 8b       	std	Y+17, r26	; 0x11
    3866:	ba 8b       	std	Y+18, r27	; 0x12
    3868:	3b c0       	rjmp	.+118    	; 0x38e0 <main+0x334>
					break;
				case '*':
					Res = Num1 * Num2;
    386a:	6f 89       	ldd	r22, Y+23	; 0x17
    386c:	78 8d       	ldd	r23, Y+24	; 0x18
    386e:	89 8d       	ldd	r24, Y+25	; 0x19
    3870:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3872:	2b 89       	ldd	r18, Y+19	; 0x13
    3874:	3c 89       	ldd	r19, Y+20	; 0x14
    3876:	4d 89       	ldd	r20, Y+21	; 0x15
    3878:	5e 89       	ldd	r21, Y+22	; 0x16
    387a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8f 87       	std	Y+15, r24	; 0x0f
    3884:	98 8b       	std	Y+16, r25	; 0x10
    3886:	a9 8b       	std	Y+17, r26	; 0x11
    3888:	ba 8b       	std	Y+18, r27	; 0x12
    388a:	2a c0       	rjmp	.+84     	; 0x38e0 <main+0x334>
					break;
				case '/':
					if (Num2 != 0)
    388c:	6b 89       	ldd	r22, Y+19	; 0x13
    388e:	7c 89       	ldd	r23, Y+20	; 0x14
    3890:	8d 89       	ldd	r24, Y+21	; 0x15
    3892:	9e 89       	ldd	r25, Y+22	; 0x16
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e0       	ldi	r20, 0x00	; 0
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	0e 94 bd 03 	call	0x77a	; 0x77a <__nesf2>
    38a0:	88 23       	and	r24, r24
    38a2:	89 f0       	breq	.+34     	; 0x38c6 <main+0x31a>
					{
						Res = Num1 / Num2;
    38a4:	6f 89       	ldd	r22, Y+23	; 0x17
    38a6:	78 8d       	ldd	r23, Y+24	; 0x18
    38a8:	89 8d       	ldd	r24, Y+25	; 0x19
    38aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38ac:	2b 89       	ldd	r18, Y+19	; 0x13
    38ae:	3c 89       	ldd	r19, Y+20	; 0x14
    38b0:	4d 89       	ldd	r20, Y+21	; 0x15
    38b2:	5e 89       	ldd	r21, Y+22	; 0x16
    38b4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	8f 87       	std	Y+15, r24	; 0x0f
    38be:	98 8b       	std	Y+16, r25	; 0x10
    38c0:	a9 8b       	std	Y+17, r26	; 0x11
    38c2:	ba 8b       	std	Y+18, r27	; 0x12
    38c4:	0d c0       	rjmp	.+26     	; 0x38e0 <main+0x334>
					}
					else
					{
						LCD_VidClearScreen();
    38c6:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_VidClearScreen>
						LCD_VidSendString("Division By Zero");
    38ca:	83 e7       	ldi	r24, 0x73	; 115
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_VidSendString>
    38d2:	11 cf       	rjmp	.-478    	; 0x36f6 <main+0x14a>
						continue;
					}
					break;
				default:
					LCD_VidClearScreen();
    38d4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_VidClearScreen>
					LCD_VidSendString("Invalid Operator!");
    38d8:	84 e8       	ldi	r24, 0x84	; 132
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_VidSendString>
			}

			LCD_VidSendFloat(Res);
    38e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e2:	98 89       	ldd	r25, Y+16	; 0x10
    38e4:	a9 89       	ldd	r26, Y+17	; 0x11
    38e6:	ba 89       	ldd	r27, Y+18	; 0x12
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <LCD_VidSendFloat>
			Num1 = Res;
    38f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f2:	98 89       	ldd	r25, Y+16	; 0x10
    38f4:	a9 89       	ldd	r26, Y+17	; 0x11
    38f6:	ba 89       	ldd	r27, Y+18	; 0x12
    38f8:	8f 8b       	std	Y+23, r24	; 0x17
    38fa:	98 8f       	std	Y+24, r25	; 0x18
    38fc:	a9 8f       	std	Y+25, r26	; 0x19
    38fe:	ba 8f       	std	Y+26, r27	; 0x1a
			Num2 = 0;
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 e0       	ldi	r26, 0x00	; 0
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	8b 8b       	std	Y+19, r24	; 0x13
    390a:	9c 8b       	std	Y+20, r25	; 0x14
    390c:	ad 8b       	std	Y+21, r26	; 0x15
    390e:	be 8b       	std	Y+22, r27	; 0x16
			Operator = '\0';
    3910:	1b 8e       	std	Y+27, r1	; 0x1b
    3912:	f1 ce       	rjmp	.-542    	; 0x36f6 <main+0x14a>
		}
		else if (PressedKey == 'C')
    3914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3916:	83 34       	cpi	r24, 0x43	; 67
    3918:	09 f0       	breq	.+2      	; 0x391c <main+0x370>
    391a:	ed ce       	rjmp	.-550    	; 0x36f6 <main+0x14a>
		{
			LCD_VidClearScreen();
    391c:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_VidClearScreen>
			Num1 = 0;
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	a0 e0       	ldi	r26, 0x00	; 0
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	8f 8b       	std	Y+23, r24	; 0x17
    392a:	98 8f       	std	Y+24, r25	; 0x18
    392c:	a9 8f       	std	Y+25, r26	; 0x19
    392e:	ba 8f       	std	Y+26, r27	; 0x1a
			Num2 = 0;
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	a0 e0       	ldi	r26, 0x00	; 0
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	8b 8b       	std	Y+19, r24	; 0x13
    393a:	9c 8b       	std	Y+20, r25	; 0x14
    393c:	ad 8b       	std	Y+21, r26	; 0x15
    393e:	be 8b       	std	Y+22, r27	; 0x16
			Operator = '\0';
    3940:	1b 8e       	std	Y+27, r1	; 0x1b
    3942:	d9 ce       	rjmp	.-590    	; 0x36f6 <main+0x14a>

00003944 <__prologue_saves__>:
    3944:	2f 92       	push	r2
    3946:	3f 92       	push	r3
    3948:	4f 92       	push	r4
    394a:	5f 92       	push	r5
    394c:	6f 92       	push	r6
    394e:	7f 92       	push	r7
    3950:	8f 92       	push	r8
    3952:	9f 92       	push	r9
    3954:	af 92       	push	r10
    3956:	bf 92       	push	r11
    3958:	cf 92       	push	r12
    395a:	df 92       	push	r13
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	ca 1b       	sub	r28, r26
    396e:	db 0b       	sbc	r29, r27
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	09 94       	ijmp

0000397c <__epilogue_restores__>:
    397c:	2a 88       	ldd	r2, Y+18	; 0x12
    397e:	39 88       	ldd	r3, Y+17	; 0x11
    3980:	48 88       	ldd	r4, Y+16	; 0x10
    3982:	5f 84       	ldd	r5, Y+15	; 0x0f
    3984:	6e 84       	ldd	r6, Y+14	; 0x0e
    3986:	7d 84       	ldd	r7, Y+13	; 0x0d
    3988:	8c 84       	ldd	r8, Y+12	; 0x0c
    398a:	9b 84       	ldd	r9, Y+11	; 0x0b
    398c:	aa 84       	ldd	r10, Y+10	; 0x0a
    398e:	b9 84       	ldd	r11, Y+9	; 0x09
    3990:	c8 84       	ldd	r12, Y+8	; 0x08
    3992:	df 80       	ldd	r13, Y+7	; 0x07
    3994:	ee 80       	ldd	r14, Y+6	; 0x06
    3996:	fd 80       	ldd	r15, Y+5	; 0x05
    3998:	0c 81       	ldd	r16, Y+4	; 0x04
    399a:	1b 81       	ldd	r17, Y+3	; 0x03
    399c:	aa 81       	ldd	r26, Y+2	; 0x02
    399e:	b9 81       	ldd	r27, Y+1	; 0x01
    39a0:	ce 0f       	add	r28, r30
    39a2:	d1 1d       	adc	r29, r1
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	ed 01       	movw	r28, r26
    39b0:	08 95       	ret

000039b2 <itoa>:
    39b2:	fb 01       	movw	r30, r22
    39b4:	9f 01       	movw	r18, r30
    39b6:	e8 94       	clt
    39b8:	42 30       	cpi	r20, 0x02	; 2
    39ba:	c4 f0       	brlt	.+48     	; 0x39ec <itoa+0x3a>
    39bc:	45 32       	cpi	r20, 0x25	; 37
    39be:	b4 f4       	brge	.+44     	; 0x39ec <itoa+0x3a>
    39c0:	4a 30       	cpi	r20, 0x0A	; 10
    39c2:	29 f4       	brne	.+10     	; 0x39ce <itoa+0x1c>
    39c4:	97 fb       	bst	r25, 7
    39c6:	1e f4       	brtc	.+6      	; 0x39ce <itoa+0x1c>
    39c8:	90 95       	com	r25
    39ca:	81 95       	neg	r24
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	64 2f       	mov	r22, r20
    39d0:	77 27       	eor	r23, r23
    39d2:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <__udivmodhi4>
    39d6:	80 5d       	subi	r24, 0xD0	; 208
    39d8:	8a 33       	cpi	r24, 0x3A	; 58
    39da:	0c f0       	brlt	.+2      	; 0x39de <itoa+0x2c>
    39dc:	89 5d       	subi	r24, 0xD9	; 217
    39de:	81 93       	st	Z+, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	a1 f7       	brne	.-24     	; 0x39ce <itoa+0x1c>
    39e6:	16 f4       	brtc	.+4      	; 0x39ec <itoa+0x3a>
    39e8:	5d e2       	ldi	r21, 0x2D	; 45
    39ea:	51 93       	st	Z+, r21
    39ec:	10 82       	st	Z, r1
    39ee:	c9 01       	movw	r24, r18
    39f0:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <strrev>

000039f4 <strrev>:
    39f4:	dc 01       	movw	r26, r24
    39f6:	fc 01       	movw	r30, r24
    39f8:	67 2f       	mov	r22, r23
    39fa:	71 91       	ld	r23, Z+
    39fc:	77 23       	and	r23, r23
    39fe:	e1 f7       	brne	.-8      	; 0x39f8 <strrev+0x4>
    3a00:	32 97       	sbiw	r30, 0x02	; 2
    3a02:	04 c0       	rjmp	.+8      	; 0x3a0c <strrev+0x18>
    3a04:	7c 91       	ld	r23, X
    3a06:	6d 93       	st	X+, r22
    3a08:	70 83       	st	Z, r23
    3a0a:	62 91       	ld	r22, -Z
    3a0c:	ae 17       	cp	r26, r30
    3a0e:	bf 07       	cpc	r27, r31
    3a10:	c8 f3       	brcs	.-14     	; 0x3a04 <strrev+0x10>
    3a12:	08 95       	ret

00003a14 <__udivmodhi4>:
    3a14:	aa 1b       	sub	r26, r26
    3a16:	bb 1b       	sub	r27, r27
    3a18:	51 e1       	ldi	r21, 0x11	; 17
    3a1a:	07 c0       	rjmp	.+14     	; 0x3a2a <__udivmodhi4_ep>

00003a1c <__udivmodhi4_loop>:
    3a1c:	aa 1f       	adc	r26, r26
    3a1e:	bb 1f       	adc	r27, r27
    3a20:	a6 17       	cp	r26, r22
    3a22:	b7 07       	cpc	r27, r23
    3a24:	10 f0       	brcs	.+4      	; 0x3a2a <__udivmodhi4_ep>
    3a26:	a6 1b       	sub	r26, r22
    3a28:	b7 0b       	sbc	r27, r23

00003a2a <__udivmodhi4_ep>:
    3a2a:	88 1f       	adc	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	5a 95       	dec	r21
    3a30:	a9 f7       	brne	.-22     	; 0x3a1c <__udivmodhi4_loop>
    3a32:	80 95       	com	r24
    3a34:	90 95       	com	r25
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	08 95       	ret

00003a3c <_exit>:
    3a3c:	f8 94       	cli

00003a3e <__stop_program>:
    3a3e:	ff cf       	rjmp	.-2      	; 0x3a3e <__stop_program>
