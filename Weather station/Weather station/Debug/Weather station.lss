
Weather station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000ec0  00000f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c8f  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b3d  00000000  00000000  00002e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001056  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000398  00000000  00000000  00004998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c0  00000000  00000000  00004d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010cd  00000000  00000000  000056f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000067bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ed 03 	call	0x7da	; 0x7da <main>
  7a:	0c 94 5e 07 	jmp	0xebc	; 0xebc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_voidInit>:
#include "ADC_register.h"


void ADC_voidInit(ADC_refVolt_t copy_tReferenceVoltage)
{
	switch(copy_tReferenceVoltage)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	59 f0       	breq	.+22     	; 0x9c <ADC_voidInit+0x1a>
  86:	18 f0       	brcs	.+6      	; 0x8e <ADC_voidInit+0xc>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	79 f0       	breq	.+30     	; 0xaa <ADC_voidInit+0x28>
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG, REFS0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 64       	ori	r24, 0x40	; 64
  92:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	87 b9       	out	0x07, r24	; 7
		break;
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG, REFS0);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 7b       	andi	r24, 0xBF	; 191
  a0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG, REFS1);
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	87 b9       	out	0x07, r24	; 7
		break;
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG, REFS0);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG, REFS1);
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	// Select Right Adjustment
	CLR_BIT(ADCSRA_REG, ADLAR);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	86 b9       	out	0x06, r24	; 6
	
	// Single Conversion Mode
	CLR_BIT(ADCSRA_REG, ADATE);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG, ADIE);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG, ADPS0);
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS1);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG, ADPS2);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA_REG, ADEN);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(ADC_channelIds_t copy_tChannelId, u16* copy_pu16DigitalValue)
{
	if((copy_pu16DigitalValue != NULL)&&(copy_tChannelId <= 31))
  e2:	61 15       	cp	r22, r1
  e4:	71 05       	cpc	r23, r1
  e6:	a9 f0       	breq	.+42     	; 0x112 <ADC_voidGetDigitalValue+0x30>
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	98 f4       	brcc	.+38     	; 0x112 <ADC_voidGetDigitalValue+0x30>
	{
		//Clear ADMUX Channel Bits
		ADMUX_REG &= 0xE0; //0b11100000
  ec:	97 b1       	in	r25, 0x07	; 7
  ee:	90 7e       	andi	r25, 0xE0	; 224
  f0:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number
		ADMUX_REG |= copy_tChannelId;
  f2:	97 b1       	in	r25, 0x07	; 7
  f4:	89 2b       	or	r24, r25
  f6:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversition
		SET_BIT(ADCSRA_REG, ADSC);
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	86 b9       	out	0x06, r24	; 6
		
		// Busy Wait for ADC Flag  /* Time Out */
		while(0 == GET_BIT(ADCSRA_REG ,ADIF));
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <ADC_voidGetDigitalValue+0x1c>
		
		// Clear ADC flag (WROC >> Write One to Clear)
		SET_BIT(ADCSRA_REG ,ADIF);
 102:	86 b1       	in	r24, 0x06	; 6
 104:	80 61       	ori	r24, 0x10	; 16
 106:	86 b9       	out	0x06, r24	; 6
		
		// Pass out ADC data 
		*copy_pu16DigitalValue = ADC_u16_REG;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	fb 01       	movw	r30, r22
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <DCM_voidInit>:


void DCM_voidInit(u8 copy_u8MotorId)
{
	/* Initializ H-Bridge As Output Pins depend on motor id*/
	switch(copy_u8MotorId)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	19 f0       	breq	.+6      	; 0x11e <DCM_voidInit+0xa>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	89 f0       	breq	.+34     	; 0x13e <DCM_voidInit+0x2a>
 11c:	08 95       	ret
	{
	case DCM_MOTOR_A:
		DIO_voidSetPinDirection(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_OUTPUT);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	63 e0       	ldi	r22, 0x03	; 3
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_OUTPUT);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, DIO_PIN_OUTPUT);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
		break;
 13c:	08 95       	ret

	case DCM_MOTOR_B:
		DIO_voidSetPinDirection(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_OUTPUT);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	65 e0       	ldi	r22, 0x05	; 5
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_OUTPUT);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	66 e0       	ldi	r22, 0x06	; 6
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, DIO_PIN_OUTPUT);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	65 e0       	ldi	r22, 0x05	; 5
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 15c:	08 95       	ret

0000015e <DCM_voidOn>:


void DCM_voidOn(u8 copy_u8MotorId, u8 Copy_u8MotorDirection)
{
	/* Turn DC motor on using H-Bridge Pins depend on Copy_u8Direction*/
	switch(copy_u8MotorId)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	19 f0       	breq	.+6      	; 0x168 <DCM_voidOn+0xa>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	09 f1       	breq	.+66     	; 0x1a8 <DCM_voidOn+0x4a>
 166:	08 95       	ret
	{
	case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
 168:	61 30       	cpi	r22, 0x01	; 1
 16a:	19 f0       	breq	.+6      	; 0x172 <DCM_voidOn+0x14>
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	61 f0       	breq	.+24     	; 0x188 <DCM_voidOn+0x2a>
 170:	15 c0       	rjmp	.+42     	; 0x19c <DCM_voidOn+0x3e>
		{
		case DCM_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_HIGH);
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_LOW);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			break;
 186:	0a c0       	rjmp	.+20     	; 0x19c <DCM_voidOn+0x3e>

		case DCM_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_LOW);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_HIGH);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			break;
		}
		DIO_voidSetPinValue(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, DIO_PIN_HIGH);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
		break;
 1a6:	08 95       	ret

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <DCM_voidOn+0x54>
 1ac:	62 30       	cpi	r22, 0x02	; 2
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <DCM_voidOn+0x6a>
 1b0:	15 c0       	rjmp	.+42     	; 0x1dc <DCM_voidOn+0x7e>
			{
			case DCM_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_HIGH);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_LOW);
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				break;
 1c6:	0a c0       	rjmp	.+20     	; 0x1dc <DCM_voidOn+0x7e>

			case DCM_COUNTER_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_LOW);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_HIGH);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	66 e0       	ldi	r22, 0x06	; 6
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				break;
			}
			DIO_voidSetPinValue(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, DIO_PIN_HIGH);
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	65 e0       	ldi	r22, 0x05	; 5
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 1e6:	08 95       	ret

000001e8 <DCM_voidControlSpeed>:
	}
}


void DCM_voidControlSpeed(u8 copy_u8MotorId, u8 Copy_u8MotorDirection, u8 Copy_u8Speed)
{
 1e8:	cf 93       	push	r28
 1ea:	c4 2f       	mov	r28, r20
	/* Turn DC motor on with Controlling desired(motorId) DC motor speed using PWM0 by setting Duty Cycle and turn it on using H-Bridge
	 By Setting Dir and Enable pins depend on motorDirection*/
	switch(copy_u8MotorId)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <DCM_voidControlSpeed+0xe>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	41 f1       	breq	.+80     	; 0x244 <DCM_voidControlSpeed+0x5c>
 1f4:	4d c0       	rjmp	.+154    	; 0x290 <DCM_voidControlSpeed+0xa8>
	{
	    case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	19 f0       	breq	.+6      	; 0x200 <DCM_voidControlSpeed+0x18>
 1fa:	62 30       	cpi	r22, 0x02	; 2
 1fc:	61 f0       	breq	.+24     	; 0x216 <DCM_voidControlSpeed+0x2e>
 1fe:	15 c0       	rjmp	.+42     	; 0x22a <DCM_voidControlSpeed+0x42>
		{
		case DCM_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_HIGH);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_LOW);
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			break;
 214:	0a c0       	rjmp	.+20     	; 0x22a <DCM_voidControlSpeed+0x42>

		case DCM_COUNTER_CLOCK_WISE:
			DIO_voidSetPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, DIO_PIN_LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, DIO_PIN_HIGH);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
			break;
		}
		PWM_voidInitChannel_1B();
 22a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <PWM_voidInitChannel_1B>
		PWM_voidGenerate_PWM_Channel_1B(Copy_u8Speed, 1000);
 22e:	6c 2f       	mov	r22, r28
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
 23a:	48 ee       	ldi	r20, 0xE8	; 232
 23c:	53 e0       	ldi	r21, 0x03	; 3
 23e:	0e 94 b1 04 	call	0x962	; 0x962 <PWM_voidGenerate_PWM_Channel_1B>
		break;
 242:	26 c0       	rjmp	.+76     	; 0x290 <DCM_voidControlSpeed+0xa8>

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
 244:	61 30       	cpi	r22, 0x01	; 1
 246:	19 f0       	breq	.+6      	; 0x24e <DCM_voidControlSpeed+0x66>
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	61 f0       	breq	.+24     	; 0x264 <DCM_voidControlSpeed+0x7c>
 24c:	15 c0       	rjmp	.+42     	; 0x278 <DCM_voidControlSpeed+0x90>
			{
			case DCM_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_HIGH);
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_LOW);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	66 e0       	ldi	r22, 0x06	; 6
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				break;
 262:	0a c0       	rjmp	.+20     	; 0x278 <DCM_voidControlSpeed+0x90>

			case DCM_COUNTER_CLOCK_WISE:
				DIO_voidSetPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, DIO_PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	65 e0       	ldi	r22, 0x05	; 5
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, DIO_PIN_HIGH);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
				break;
			}
			PWM_voidInitChannel_1A();
 278:	0e 94 41 04 	call	0x882	; 0x882 <PWM_voidInitChannel_1A>
			PWM_voidGenerate_PWM_Channel_1A(Copy_u8Speed, 1000);
 27c:	6c 2f       	mov	r22, r28
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
 288:	48 ee       	ldi	r20, 0xE8	; 232
 28a:	53 e0       	ldi	r21, 0x03	; 3
 28c:	0e 94 67 04 	call	0x8ce	; 0x8ce <PWM_voidGenerate_PWM_Channel_1A>
			break;
	}
}
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinDirection<=DIO_PIN_OUTPUT))
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	08 f0       	brcs	.+2      	; 0x29a <DIO_voidSetPinDirection+0x6>
 298:	7e c0       	rjmp	.+252    	; 0x396 <DIO_voidSetPinDirection+0x102>
 29a:	68 30       	cpi	r22, 0x08	; 8
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <DIO_voidSetPinDirection+0xc>
 29e:	7b c0       	rjmp	.+246    	; 0x396 <DIO_voidSetPinDirection+0x102>
 2a0:	42 30       	cpi	r20, 0x02	; 2
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <DIO_voidSetPinDirection+0x12>
 2a4:	78 c0       	rjmp	.+240    	; 0x396 <DIO_voidSetPinDirection+0x102>
	{
		switch(copy_u8PortId)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	19 f1       	breq	.+70     	; 0x2f0 <DIO_voidSetPinDirection+0x5c>
 2aa:	30 f0       	brcs	.+12     	; 0x2b8 <DIO_voidSetPinDirection+0x24>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	e1 f1       	breq	.+120    	; 0x328 <DIO_voidSetPinDirection+0x94>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_voidSetPinDirection+0x22>
 2b4:	55 c0       	rjmp	.+170    	; 0x360 <DIO_voidSetPinDirection+0xcc>
 2b6:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinDirection)
 2b8:	44 23       	and	r20, r20
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <DIO_voidSetPinDirection+0x2e>
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	69 f0       	breq	.+26     	; 0x2da <DIO_voidSetPinDirection+0x46>
 2c0:	08 95       	ret
			{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG, copy_u8PinId);
 2c2:	2a b3       	in	r18, 0x1a	; 26
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_voidSetPinDirection+0x3a>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_voidSetPinDirection+0x36>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	8a bb       	out	0x1a, r24	; 26
				break;
 2d8:	08 95       	ret

			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG, copy_u8PinId);
 2da:	2a b3       	in	r18, 0x1a	; 26
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_voidSetPinDirection+0x52>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_voidSetPinDirection+0x4e>
 2ea:	82 2b       	or	r24, r18
 2ec:	8a bb       	out	0x1a, r24	; 26
				break;
 2ee:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinDirection)
 2f0:	44 23       	and	r20, r20
 2f2:	19 f0       	breq	.+6      	; 0x2fa <DIO_voidSetPinDirection+0x66>
 2f4:	41 30       	cpi	r20, 0x01	; 1
 2f6:	69 f0       	breq	.+26     	; 0x312 <DIO_voidSetPinDirection+0x7e>
 2f8:	08 95       	ret
				{
				case DIO_PIN_INPUT:
					CLR_BIT(DDRB_REG, copy_u8PinId);
 2fa:	27 b3       	in	r18, 0x17	; 23
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinDirection+0x72>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinDirection+0x6e>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	87 bb       	out	0x17, r24	; 23
					break;
 310:	08 95       	ret

				case DIO_PIN_OUTPUT:
					SET_BIT(DDRB_REG, copy_u8PinId);
 312:	27 b3       	in	r18, 0x17	; 23
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_voidSetPinDirection+0x8a>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_voidSetPinDirection+0x86>
 322:	82 2b       	or	r24, r18
 324:	87 bb       	out	0x17, r24	; 23
					break;
 326:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinDirection)
 328:	44 23       	and	r20, r20
 32a:	19 f0       	breq	.+6      	; 0x332 <DIO_voidSetPinDirection+0x9e>
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	69 f0       	breq	.+26     	; 0x34a <DIO_voidSetPinDirection+0xb6>
 330:	08 95       	ret
					{
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG, copy_u8PinId);
 332:	24 b3       	in	r18, 0x14	; 20
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_voidSetPinDirection+0xaa>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_voidSetPinDirection+0xa6>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	84 bb       	out	0x14, r24	; 20
						break;
 348:	08 95       	ret

					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG, copy_u8PinId);
 34a:	24 b3       	in	r18, 0x14	; 20
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_voidSetPinDirection+0xc2>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_voidSetPinDirection+0xbe>
 35a:	82 2b       	or	r24, r18
 35c:	84 bb       	out	0x14, r24	; 20
						break;
 35e:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinDirection)
 360:	44 23       	and	r20, r20
 362:	19 f0       	breq	.+6      	; 0x36a <DIO_voidSetPinDirection+0xd6>
 364:	41 30       	cpi	r20, 0x01	; 1
 366:	69 f0       	breq	.+26     	; 0x382 <DIO_voidSetPinDirection+0xee>
 368:	08 95       	ret
						{
						case DIO_PIN_INPUT:
							CLR_BIT(DDRD_REG, copy_u8PinId);
 36a:	21 b3       	in	r18, 0x11	; 17
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidSetPinDirection+0xe2>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidSetPinDirection+0xde>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	81 bb       	out	0x11, r24	; 17
							break;
 380:	08 95       	ret

						case DIO_PIN_OUTPUT:
							SET_BIT(DDRD_REG, copy_u8PinId);
 382:	21 b3       	in	r18, 0x11	; 17
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_voidSetPinDirection+0xfa>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_voidSetPinDirection+0xf6>
 392:	82 2b       	or	r24, r18
 394:	81 bb       	out	0x11, r24	; 17
 396:	08 95       	ret

00000398 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinValue<=DIO_PIN_HIGH))
 398:	84 30       	cpi	r24, 0x04	; 4
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_voidSetPinValue+0x6>
 39c:	7e c0       	rjmp	.+252    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 39e:	68 30       	cpi	r22, 0x08	; 8
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <DIO_voidSetPinValue+0xc>
 3a2:	7b c0       	rjmp	.+246    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 3a4:	42 30       	cpi	r20, 0x02	; 2
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_voidSetPinValue+0x12>
 3a8:	78 c0       	rjmp	.+240    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
	{
		switch(copy_u8PortId)
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	19 f1       	breq	.+70     	; 0x3f4 <DIO_voidSetPinValue+0x5c>
 3ae:	30 f0       	brcs	.+12     	; 0x3bc <DIO_voidSetPinValue+0x24>
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	e1 f1       	breq	.+120    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_voidSetPinValue+0x22>
 3b8:	55 c0       	rjmp	.+170    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 3ba:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinValue)
 3bc:	44 23       	and	r20, r20
 3be:	19 f0       	breq	.+6      	; 0x3c6 <DIO_voidSetPinValue+0x2e>
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	69 f0       	breq	.+26     	; 0x3de <DIO_voidSetPinValue+0x46>
 3c4:	08 95       	ret
			{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
 3c6:	2b b3       	in	r18, 0x1b	; 27
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_voidSetPinValue+0x3a>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_voidSetPinValue+0x36>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	8b bb       	out	0x1b, r24	; 27
				break;
 3dc:	08 95       	ret

			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
 3de:	2b b3       	in	r18, 0x1b	; 27
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_voidSetPinValue+0x52>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_voidSetPinValue+0x4e>
 3ee:	82 2b       	or	r24, r18
 3f0:	8b bb       	out	0x1b, r24	; 27
				break;
 3f2:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinValue)
 3f4:	44 23       	and	r20, r20
 3f6:	19 f0       	breq	.+6      	; 0x3fe <DIO_voidSetPinValue+0x66>
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	69 f0       	breq	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3fc:	08 95       	ret
				{
				case DIO_PIN_LOW:
					CLR_BIT(PORTB_REG, copy_u8PinId);
 3fe:	28 b3       	in	r18, 0x18	; 24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	82 23       	and	r24, r18
 412:	88 bb       	out	0x18, r24	; 24
					break;
 414:	08 95       	ret

				case DIO_PIN_HIGH:
					SET_BIT(PORTB_REG, copy_u8PinId);
 416:	28 b3       	in	r18, 0x18	; 24
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	88 bb       	out	0x18, r24	; 24
					break;
 42a:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinValue)
 42c:	44 23       	and	r20, r20
 42e:	19 f0       	breq	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	69 f0       	breq	.+26     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 434:	08 95       	ret
					{
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG, copy_u8PinId);
 436:	25 b3       	in	r18, 0x15	; 21
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	80 95       	com	r24
 448:	82 23       	and	r24, r18
 44a:	85 bb       	out	0x15, r24	; 21
						break;
 44c:	08 95       	ret

					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG, copy_u8PinId);
 44e:	25 b3       	in	r18, 0x15	; 21
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	82 2b       	or	r24, r18
 460:	85 bb       	out	0x15, r24	; 21
						break;
 462:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinValue)
 464:	44 23       	and	r20, r20
 466:	19 f0       	breq	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f0       	breq	.+26     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 46c:	08 95       	ret
						{
						case DIO_PIN_LOW:
							CLR_BIT(PORTD_REG, copy_u8PinId);
 46e:	22 b3       	in	r18, 0x12	; 18
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	82 bb       	out	0x12, r24	; 18
							break;
 484:	08 95       	ret

						case DIO_PIN_HIGH:
							SET_BIT(PORTD_REG, copy_u8PinId);
 486:	22 b3       	in	r18, 0x12	; 18
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	82 2b       	or	r24, r18
 498:	82 bb       	out	0x12, r24	; 18
 49a:	08 95       	ret

0000049c <PRV_voidWriteHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	cf 93       	push	r28
 49e:	c8 2f       	mov	r28, r24
 4a0:	80 fd       	sbrc	r24, 0
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <PRV_voidWriteHalfPort+0x14>
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	64 e0       	ldi	r22, 0x04	; 4
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <PRV_voidWriteHalfPort+0x1e>
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4ba:	c1 fd       	sbrc	r28, 1
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <PRV_voidWriteHalfPort+0x2e>
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	65 e0       	ldi	r22, 0x05	; 5
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <PRV_voidWriteHalfPort+0x38>
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	65 e0       	ldi	r22, 0x05	; 5
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4d4:	c2 fd       	sbrc	r28, 2
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <PRV_voidWriteHalfPort+0x48>
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	66 e0       	ldi	r22, 0x06	; 6
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <PRV_voidWriteHalfPort+0x52>
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	66 e0       	ldi	r22, 0x06	; 6
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4ee:	c3 fd       	sbrc	r28, 3
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <PRV_voidWriteHalfPort+0x62>
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	67 e0       	ldi	r22, 0x07	; 7
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <PRV_voidWriteHalfPort+0x6c>
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	67 e0       	ldi	r22, 0x07	; 7
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <PRV_voidEnableTriggerWrite>:
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	63 e0       	ldi	r22, 0x03	; 3
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 516:	8f e9       	ldi	r24, 0x9F	; 159
 518:	9f e0       	ldi	r25, 0x0F	; 15
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <PRV_voidEnableTriggerWrite+0xe>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <PRV_voidEnableTriggerWrite+0x14>
 520:	00 00       	nop
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 52c:	08 95       	ret

0000052e <LCD_voidDisplayChar>:
 52e:	cf 93       	push	r28
 530:	c8 2f       	mov	r28, r24
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 546:	8c 2f       	mov	r24, r28
 548:	82 95       	swap	r24
 54a:	8f 70       	andi	r24, 0x0F	; 15
 54c:	0e 94 4e 02 	call	0x49c	; 0x49c <PRV_voidWriteHalfPort>
 550:	0e 94 86 02 	call	0x50c	; 0x50c <PRV_voidEnableTriggerWrite>
 554:	8c 2f       	mov	r24, r28
 556:	0e 94 4e 02 	call	0x49c	; 0x49c <PRV_voidWriteHalfPort>
 55a:	0e 94 86 02 	call	0x50c	; 0x50c <PRV_voidEnableTriggerWrite>
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <LCD_voidSendCommand>:
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 57a:	8c 2f       	mov	r24, r28
 57c:	82 95       	swap	r24
 57e:	8f 70       	andi	r24, 0x0F	; 15
 580:	0e 94 4e 02 	call	0x49c	; 0x49c <PRV_voidWriteHalfPort>
 584:	0e 94 86 02 	call	0x50c	; 0x50c <PRV_voidEnableTriggerWrite>
 588:	8c 2f       	mov	r24, r28
 58a:	0e 94 4e 02 	call	0x49c	; 0x49c <PRV_voidWriteHalfPort>
 58e:	0e 94 86 02 	call	0x50c	; 0x50c <PRV_voidEnableTriggerWrite>
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <LCD_voidInit>:
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	62 e0       	ldi	r22, 0x02	; 2
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	63 e0       	ldi	r22, 0x03	; 3
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	64 e0       	ldi	r22, 0x04	; 4
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	65 e0       	ldi	r22, 0x05	; 5
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	66 e0       	ldi	r22, 0x06	; 6
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	67 e0       	ldi	r22, 0x07	; 7
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
 5dc:	2f e7       	ldi	r18, 0x7F	; 127
 5de:	85 eb       	ldi	r24, 0xB5	; 181
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <LCD_voidInit+0x4c>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_voidInit+0x56>
 5ec:	00 00       	nop
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_voidSetPinValue>
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	0e 94 4e 02 	call	0x49c	; 0x49c <PRV_voidWriteHalfPort>
 608:	0e 94 86 02 	call	0x50c	; 0x50c <PRV_voidEnableTriggerWrite>
 60c:	88 e2       	ldi	r24, 0x28	; 40
 60e:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 612:	20 ef       	ldi	r18, 0xF0	; 240
 614:	2a 95       	dec	r18
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_voidInit+0x7e>
 618:	8f e0       	ldi	r24, 0x0F	; 15
 61a:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 61e:	80 ef       	ldi	r24, 0xF0	; 240
 620:	8a 95       	dec	r24
 622:	f1 f7       	brne	.-4      	; 0x620 <LCD_voidInit+0x8a>
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 62a:	8f e3       	ldi	r24, 0x3F	; 63
 62c:	9f e1       	ldi	r25, 0x1F	; 31
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <LCD_voidInit+0x98>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_voidInit+0x9e>
 634:	00 00       	nop
 636:	86 e0       	ldi	r24, 0x06	; 6
 638:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 63c:	08 95       	ret

0000063e <LCD_voidDisplayString>:
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	29 f4       	brne	.+10     	; 0x652 <LCD_voidDisplayString+0x14>
 648:	0c c0       	rjmp	.+24     	; 0x662 <LCD_voidDisplayString+0x24>
 64a:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidDisplayChar>
 64e:	cf 5f       	subi	r28, 0xFF	; 255
 650:	02 c0       	rjmp	.+4      	; 0x656 <LCD_voidDisplayString+0x18>
 652:	8c 01       	movw	r16, r24
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	f8 01       	movw	r30, r16
 658:	ec 0f       	add	r30, r28
 65a:	f1 1d       	adc	r31, r1
 65c:	80 81       	ld	r24, Z
 65e:	81 11       	cpse	r24, r1
 660:	f4 cf       	rjmp	.-24     	; 0x64a <LCD_voidDisplayString+0xc>
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <LCD_voidClear>:
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 670:	8f e3       	ldi	r24, 0x3F	; 63
 672:	9f e1       	ldi	r25, 0x1F	; 31
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_voidClear+0xa>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_voidClear+0x10>
 67a:	00 00       	nop
 67c:	08 95       	ret

0000067e <LCD_voidDisplayNumber>:
	}
}


void LCD_voidDisplayNumber(u32 copy_u32Number)
{
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	8b 01       	movw	r16, r22
 68c:	9c 01       	movw	r18, r24
	u32 local_u32ReversedNumber = 1;
	if(copy_u32Number == 0)
 68e:	67 2b       	or	r22, r23
 690:	68 2b       	or	r22, r24
 692:	69 2b       	or	r22, r25
 694:	49 f5       	brne	.+82     	; 0x6e8 <LCD_voidDisplayNumber+0x6a>
	{
		LCD_voidDisplayChar('0');
 696:	80 e3       	ldi	r24, 0x30	; 48
 698:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidDisplayChar>
 69c:	45 c0       	rjmp	.+138    	; 0x728 <LCD_voidDisplayNumber+0xaa>
	}
	else
	{
		while(copy_u32Number != 0)
		{
			local_u32ReversedNumber = (local_u32ReversedNumber*10) + (copy_u32Number%10);
 69e:	dc 01       	movw	r26, r24
 6a0:	cb 01       	movw	r24, r22
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	6c 01       	movw	r12, r24
 6ac:	7d 01       	movw	r14, r26
 6ae:	cc 0c       	add	r12, r12
 6b0:	dd 1c       	adc	r13, r13
 6b2:	ee 1c       	adc	r14, r14
 6b4:	ff 1c       	adc	r15, r15
 6b6:	cc 0c       	add	r12, r12
 6b8:	dd 1c       	adc	r13, r13
 6ba:	ee 1c       	adc	r14, r14
 6bc:	ff 1c       	adc	r15, r15
 6be:	c8 0e       	add	r12, r24
 6c0:	d9 1e       	adc	r13, r25
 6c2:	ea 1e       	adc	r14, r26
 6c4:	fb 1e       	adc	r15, r27
 6c6:	c9 01       	movw	r24, r18
 6c8:	b8 01       	movw	r22, r16
 6ca:	2a e0       	ldi	r18, 0x0A	; 10
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__udivmodsi4>
 6d6:	6c 0d       	add	r22, r12
 6d8:	7d 1d       	adc	r23, r13
 6da:	8e 1d       	adc	r24, r14
 6dc:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
 6de:	02 2f       	mov	r16, r18
 6e0:	13 2f       	mov	r17, r19
 6e2:	24 2f       	mov	r18, r20
 6e4:	35 2f       	mov	r19, r21
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <LCD_voidDisplayNumber+0x72>
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_voidDisplayChar('0');
	}
	else
	{
		while(copy_u32Number != 0)
 6f0:	01 15       	cp	r16, r1
 6f2:	11 05       	cpc	r17, r1
 6f4:	21 05       	cpc	r18, r1
 6f6:	31 05       	cpc	r19, r1
 6f8:	91 f6       	brne	.-92     	; 0x69e <LCD_voidDisplayNumber+0x20>
			copy_u32Number /= 10;
		}

		do
		{
			LCD_voidDisplayChar((local_u32ReversedNumber%10) + '0');
 6fa:	2a e0       	ldi	r18, 0x0A	; 10
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__udivmodsi4>
 706:	e2 2e       	mov	r14, r18
 708:	f3 2e       	mov	r15, r19
 70a:	04 2f       	mov	r16, r20
 70c:	15 2f       	mov	r17, r21
 70e:	80 e3       	ldi	r24, 0x30	; 48
 710:	86 0f       	add	r24, r22
 712:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10;
 716:	6e 2d       	mov	r22, r14
 718:	7f 2d       	mov	r23, r15
 71a:	80 2f       	mov	r24, r16
 71c:	91 2f       	mov	r25, r17
		} while (local_u32ReversedNumber != 1);
 71e:	61 30       	cpi	r22, 0x01	; 1
 720:	71 05       	cpc	r23, r1
 722:	81 05       	cpc	r24, r1
 724:	91 05       	cpc	r25, r1
 726:	49 f7       	brne	.-46     	; 0x6fa <LCD_voidDisplayNumber+0x7c>
	}
}
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	08 95       	ret

00000736 <LCD_voidGoToSpecificPosition>:


void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
{
	switch(copy_u8LineNumber)
 736:	88 23       	and	r24, r24
 738:	19 f0       	breq	.+6      	; 0x740 <LCD_voidGoToSpecificPosition+0xa>
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	49 f0       	breq	.+18     	; 0x750 <LCD_voidGoToSpecificPosition+0x1a>
 73e:	08 95       	ret
	{
	case LCD_LINE_ONE:
		LCD_voidSendCommand(0b10000000+copy_u8Position); //0x80+copy_u8Position
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	86 0f       	add	r24, r22
 744:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 748:	80 ef       	ldi	r24, 0xF0	; 240
 74a:	8a 95       	dec	r24
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_voidGoToSpecificPosition+0x14>
 74e:	08 95       	ret
		_delay_us(45);
		break;

	case LCD_LINE_TWO:
		LCD_voidSendCommand(0b11000000+copy_u8Position); //0xC0+copy_u8Position
 750:	80 ec       	ldi	r24, 0xC0	; 192
 752:	86 0f       	add	r24, r22
 754:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_voidSendCommand>
 758:	80 ef       	ldi	r24, 0xF0	; 240
 75a:	8a 95       	dec	r24
 75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_voidGoToSpecificPosition+0x24>
 75e:	08 95       	ret

00000760 <LM35_voidInit>:
#include "LM35_config.h"


void LM35_voidInit(void)
{
	DIO_voidSetPinDirection(DIO_PORTA, LM35_CHANNEL_NUM, DIO_PIN_INPUT);
 760:	40 e0       	ldi	r20, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_REFERENCE_AVCC);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	0e 94 41 00 	call	0x82	; 0x82 <ADC_voidInit>
 770:	08 95       	ret

00000772 <LM35_voidGetTemperature>:
}


void LM35_voidGetTemperature(u8* copy_u8Temperature)
{
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	00 d0       	rcall	.+0      	; 0x77c <LM35_voidGetTemperature+0xa>
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
	if(copy_u8Temperature!=NULL)
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	21 f1       	breq	.+72     	; 0x7cc <LM35_voidGetTemperature+0x5a>
 784:	8c 01       	movw	r16, r24
	{
		u16 local_u16DigitalVal, local_u16AnalogVal;

		ADC_voidGetDigitalValue(LM35_CHANNEL_NUM, &local_u16DigitalVal);
 786:	be 01       	movw	r22, r28
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_voidGetDigitalValue>
		
		// depend on Refrence volt AVCC (5V)
		local_u16AnalogVal = ((u32)local_u16DigitalVal*5000)/1024;
 792:	29 81       	ldd	r18, Y+1	; 0x01
 794:	3a 81       	ldd	r19, Y+2	; 0x02
 796:	a8 e8       	ldi	r26, 0x88	; 136
 798:	b3 e1       	ldi	r27, 0x13	; 19
 79a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__umulhisi3>
 79e:	9b 01       	movw	r18, r22
 7a0:	ac 01       	movw	r20, r24
 7a2:	01 2e       	mov	r0, r17
 7a4:	1a e0       	ldi	r17, 0x0A	; 10
 7a6:	56 95       	lsr	r21
 7a8:	47 95       	ror	r20
 7aa:	37 95       	ror	r19
 7ac:	27 95       	ror	r18
 7ae:	1a 95       	dec	r17
 7b0:	d1 f7       	brne	.-12     	; 0x7a6 <LM35_voidGetTemperature+0x34>
 7b2:	10 2d       	mov	r17, r0

		*copy_u8Temperature = local_u16AnalogVal/10;
 7b4:	ad ec       	ldi	r26, 0xCD	; 205
 7b6:	bc ec       	ldi	r27, 0xCC	; 204
 7b8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__umulhisi3>
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	f8 01       	movw	r30, r16
 7ca:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	08 95       	ret

000007da <main>:
#include "PWM_config.h"  
#include "PWM_private.h"  
#include "PWM_register.h"  

int main(void)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	1f 92       	push	r1
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
	// Initialize the LCD
	LCD_voidInit();
 7e4:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_voidInit>

	// Initialize the ADC and LM35 sensor
	LM35_voidInit();
 7e8:	0e 94 b0 03 	call	0x760	; 0x760 <LM35_voidInit>

	// Initialize the DC motor
	DCM_voidInit(DCM_MOTOR_A);
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 8a 00 	call	0x114	; 0x114 <DCM_voidInit>
	
		// Initialize the PWM Signal
		PWM_voidInitChannel_0();
 7f2:	0e 94 34 04 	call	0x868	; 0x868 <PWM_voidInitChannel_0>
		
	while (1)
	{
		// Read the temperature from the LM35 sensor
		u8 temperature;
		LM35_voidGetTemperature(&temperature);
 7f6:	ce 01       	movw	r24, r28
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	0e 94 b9 03 	call	0x772	; 0x772 <LM35_voidGetTemperature>

		// Control the DC motor based on the temperature
		u8 duty_cycle;
		if (temperature < 20)
 7fe:	89 81       	ldd	r24, Y+1	; 0x01
 800:	84 31       	cpi	r24, 0x14	; 20
 802:	40 f0       	brcs	.+16     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		{
			duty_cycle = 50;
		}
		else if (temperature < 25)
 804:	89 31       	cpi	r24, 0x19	; 25
 806:	40 f0       	brcs	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		{
			duty_cycle = 75;
		}
		else if (temperature < 30)
 808:	8e 31       	cpi	r24, 0x1E	; 30
 80a:	40 f0       	brcs	.+16     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		{
			duty_cycle = 90;
		}
		else if (temperature <= 40)
 80c:	89 32       	cpi	r24, 0x29	; 41
 80e:	40 f4       	brcc	.+16     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			duty_cycle = 100;
 810:	14 e6       	ldi	r17, 0x64	; 100
 812:	07 c0       	rjmp	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>

		// Control the DC motor based on the temperature
		u8 duty_cycle;
		if (temperature < 20)
		{
			duty_cycle = 50;
 814:	12 e3       	ldi	r17, 0x32	; 50
 816:	05 c0       	rjmp	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
		else if (temperature < 25)
		{
			duty_cycle = 75;
 818:	1b e4       	ldi	r17, 0x4B	; 75
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
		else if (temperature < 30)
		{
			duty_cycle = 90;
 81c:	1a e5       	ldi	r17, 0x5A	; 90
 81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		{
			duty_cycle = 100;
		}
		else
		{
			duty_cycle = 0;
 820:	10 e0       	ldi	r17, 0x00	; 0
		}
		DCM_voidOn(DCM_MOTOR_A, DCM_CLOCK_WISE);
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 af 00 	call	0x15e	; 0x15e <DCM_voidOn>
		DCM_voidControlSpeed(DCM_MOTOR_A, DCM_CLOCK_WISE, duty_cycle);
 82a:	41 2f       	mov	r20, r17
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DCM_voidControlSpeed>

		// Display the temperature on the LCD
		LCD_voidClear();
 834:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_voidClear>
		LCD_voidGoToSpecificPosition(LCD_LINE_ONE, 0);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayNumber(temperature);
 840:	69 81       	ldd	r22, Y+1	; 0x01
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_voidDisplayNumber>
		LCD_voidDisplayString(" C");
 84c:	80 e6       	ldi	r24, 0x60	; 96
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 1f 03 	call	0x63e	; 0x63e <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 854:	2f ef       	ldi	r18, 0xFF	; 255
 856:	83 ed       	ldi	r24, 0xD3	; 211
 858:	90 e3       	ldi	r25, 0x30	; 48
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop

		_delay_ms(1000);
	}
 866:	c7 cf       	rjmp	.-114    	; 0x7f6 <main+0x1c>

00000868 <PWM_voidInitChannel_0>:
		
		
		// Select Prescaler Value = 64 
	    SET_BIT(TCCR0_REG,CS00);
	    SET_BIT(TCCR0_REG,CS01);
	    CLR_BIT(TCCR0_REG,CS02);
 868:	83 b7       	in	r24, 0x33	; 51
 86a:	80 64       	ori	r24, 0x40	; 64
 86c:	83 bf       	out	0x33, r24	; 51
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	88 60       	ori	r24, 0x08	; 8
 872:	83 bf       	out	0x33, r24	; 51
 874:	83 b7       	in	r24, 0x33	; 51
 876:	8f 7e       	andi	r24, 0xEF	; 239
 878:	83 bf       	out	0x33, r24	; 51
 87a:	83 b7       	in	r24, 0x33	; 51
 87c:	80 62       	ori	r24, 0x20	; 32
 87e:	83 bf       	out	0x33, r24	; 51
 880:	08 95       	ret

00000882 <PWM_voidInitChannel_1A>:
 882:	8f b5       	in	r24, 0x2f	; 47
 884:	8e 7f       	andi	r24, 0xFE	; 254
 886:	8f bd       	out	0x2f, r24	; 47
 888:	8f b5       	in	r24, 0x2f	; 47
 88a:	82 60       	ori	r24, 0x02	; 2
 88c:	8f bd       	out	0x2f, r24	; 47
 88e:	8e b5       	in	r24, 0x2e	; 46
 890:	88 60       	ori	r24, 0x08	; 8
 892:	8e bd       	out	0x2e, r24	; 46
 894:	8e b5       	in	r24, 0x2e	; 46
 896:	80 61       	ori	r24, 0x10	; 16
 898:	8e bd       	out	0x2e, r24	; 46
 89a:	8f b5       	in	r24, 0x2f	; 47
 89c:	8f 7b       	andi	r24, 0xBF	; 191
 89e:	8f bd       	out	0x2f, r24	; 47
 8a0:	8f b5       	in	r24, 0x2f	; 47
 8a2:	80 68       	ori	r24, 0x80	; 128
 8a4:	8f bd       	out	0x2f, r24	; 47
 8a6:	08 95       	ret

000008a8 <PWM_voidInitChannel_1B>:
 8a8:	8f b5       	in	r24, 0x2f	; 47
 8aa:	81 60       	ori	r24, 0x01	; 1
 8ac:	8f bd       	out	0x2f, r24	; 47
 8ae:	8f b5       	in	r24, 0x2f	; 47
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	8f bd       	out	0x2f, r24	; 47
 8b4:	8e b5       	in	r24, 0x2e	; 46
 8b6:	88 60       	ori	r24, 0x08	; 8
 8b8:	8e bd       	out	0x2e, r24	; 46
 8ba:	8e b5       	in	r24, 0x2e	; 46
 8bc:	80 61       	ori	r24, 0x10	; 16
 8be:	8e bd       	out	0x2e, r24	; 46
 8c0:	8f b5       	in	r24, 0x2f	; 47
 8c2:	8f 7e       	andi	r24, 0xEF	; 239
 8c4:	8f bd       	out	0x2f, r24	; 47
 8c6:	8f b5       	in	r24, 0x2f	; 47
 8c8:	80 62       	ori	r24, 0x20	; 32
 8ca:	8f bd       	out	0x2f, r24	; 47
 8cc:	08 95       	ret

000008ce <PWM_voidGenerate_PWM_Channel_1A>:
	}
}


void PWM_voidGenerate_PWM_Channel_1A(f32 copy_f32DutyCycle, u16 copy_u16Frequency_hz)
{
 8ce:	cf 92       	push	r12
 8d0:	df 92       	push	r13
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	6b 01       	movw	r12, r22
 8dc:	7c 01       	movw	r14, r24
 8de:	ea 01       	movw	r28, r20
	if(copy_f32DutyCycle<=100)
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	48 ec       	ldi	r20, 0xC8	; 200
 8e6:	52 e4       	ldi	r21, 0x42	; 66
 8e8:	0e 94 68 05 	call	0xad0	; 0xad0 <__cmpsf2>
 8ec:	18 16       	cp	r1, r24
 8ee:	94 f1       	brlt	.+100    	; 0x954 <PWM_voidGenerate_PWM_Channel_1A+0x86>
	{
		// under condition tick time 4 MS by setting prescaller 64
	    ICR1_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
 8f0:	9e 01       	movw	r18, r28
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	60 e9       	ldi	r22, 0x90	; 144
 8f8:	70 ed       	ldi	r23, 0xD0	; 208
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__udivmodsi4>
 902:	21 50       	subi	r18, 0x01	; 1
 904:	31 09       	sbc	r19, r1
 906:	37 bd       	out	0x27, r19	; 39
 908:	26 bd       	out	0x26, r18	; 38
		
		#if PWM_CHANNEL_1A_OUTPUT_MODE == PWM_CHANNEL_1A_NONINVERTING
		      OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
 90a:	66 b5       	in	r22, 0x26	; 38
 90c:	77 b5       	in	r23, 0x27	; 39
 90e:	6f 5f       	subi	r22, 0xFF	; 255
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
 91a:	a7 01       	movw	r20, r14
 91c:	96 01       	movw	r18, r12
 91e:	0e 94 c0 06 	call	0xd80	; 0xd80 <__mulsf3>
 922:	20 e0       	ldi	r18, 0x00	; 0
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	48 ec       	ldi	r20, 0xC8	; 200
 928:	52 e4       	ldi	r21, 0x42	; 66
 92a:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3>
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	40 e8       	ldi	r20, 0x80	; 128
 934:	5f e3       	ldi	r21, 0x3F	; 63
 936:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__subsf3>
 93a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fixunssfsi>
 93e:	7b bd       	out	0x2b, r23	; 43
 940:	6a bd       	out	0x2a, r22	; 42
		      OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
		#endif


        // Select Prescaler Value = 64
	    SET_BIT(TCCR1B_REG,CS10);
 942:	8e b5       	in	r24, 0x2e	; 46
 944:	81 60       	ori	r24, 0x01	; 1
 946:	8e bd       	out	0x2e, r24	; 46
	    SET_BIT(TCCR1B_REG,CS11);
 948:	8e b5       	in	r24, 0x2e	; 46
 94a:	82 60       	ori	r24, 0x02	; 2
 94c:	8e bd       	out	0x2e, r24	; 46
	    CLR_BIT(TCCR1B_REG,CS12);		
 94e:	8e b5       	in	r24, 0x2e	; 46
 950:	8b 7f       	andi	r24, 0xFB	; 251
 952:	8e bd       	out	0x2e, r24	; 46
	}
}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	ff 90       	pop	r15
 95a:	ef 90       	pop	r14
 95c:	df 90       	pop	r13
 95e:	cf 90       	pop	r12
 960:	08 95       	ret

00000962 <PWM_voidGenerate_PWM_Channel_1B>:


void PWM_voidGenerate_PWM_Channel_1B(f32 copy_f32DutyCycle, u16 copy_u16Frequency_hz)
{
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	6b 01       	movw	r12, r22
 970:	7c 01       	movw	r14, r24
 972:	ea 01       	movw	r28, r20
	if(copy_f32DutyCycle<=100)
 974:	20 e0       	ldi	r18, 0x00	; 0
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	48 ec       	ldi	r20, 0xC8	; 200
 97a:	52 e4       	ldi	r21, 0x42	; 66
 97c:	0e 94 68 05 	call	0xad0	; 0xad0 <__cmpsf2>
 980:	18 16       	cp	r1, r24
 982:	94 f1       	brlt	.+100    	; 0x9e8 <PWM_voidGenerate_PWM_Channel_1B+0x86>
	{
		// under condition tick time 4 MS by setting prescaller 64
	    OCR1A_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
 984:	9e 01       	movw	r18, r28
 986:	40 e0       	ldi	r20, 0x00	; 0
 988:	50 e0       	ldi	r21, 0x00	; 0
 98a:	60 e9       	ldi	r22, 0x90	; 144
 98c:	70 ed       	ldi	r23, 0xD0	; 208
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__udivmodsi4>
 996:	21 50       	subi	r18, 0x01	; 1
 998:	31 09       	sbc	r19, r1
 99a:	3b bd       	out	0x2b, r19	; 43
 99c:	2a bd       	out	0x2a, r18	; 42
		
		#if PWM_CHANNEL_1B_OUTPUT_MODE == PWM_CHANNEL_1B_NONINVERTING
		      OCR1B_u16_REG = ((copy_f32DutyCycle*(OCR1A_u16_REG+1))/100)-1;
 99e:	6a b5       	in	r22, 0x2a	; 42
 9a0:	7b b5       	in	r23, 0x2b	; 43
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
 9ae:	a7 01       	movw	r20, r14
 9b0:	96 01       	movw	r18, r12
 9b2:	0e 94 c0 06 	call	0xd80	; 0xd80 <__mulsf3>
 9b6:	20 e0       	ldi	r18, 0x00	; 0
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	48 ec       	ldi	r20, 0xC8	; 200
 9bc:	52 e4       	ldi	r21, 0x42	; 66
 9be:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3>
 9c2:	20 e0       	ldi	r18, 0x00	; 0
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	40 e8       	ldi	r20, 0x80	; 128
 9c8:	5f e3       	ldi	r21, 0x3F	; 63
 9ca:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__subsf3>
 9ce:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fixunssfsi>
 9d2:	79 bd       	out	0x29, r23	; 41
 9d4:	68 bd       	out	0x28, r22	; 40
		      OCR1B_u16_REG = ((copy_f32DutyCycle*(OCR1A_u16_REG+1))/100)-1;
		#endif	


        // Select Prescaler Value = 64
	    SET_BIT(TCCR1B_REG,CS10);
 9d6:	8e b5       	in	r24, 0x2e	; 46
 9d8:	81 60       	ori	r24, 0x01	; 1
 9da:	8e bd       	out	0x2e, r24	; 46
	    SET_BIT(TCCR1B_REG,CS11);
 9dc:	8e b5       	in	r24, 0x2e	; 46
 9de:	82 60       	ori	r24, 0x02	; 2
 9e0:	8e bd       	out	0x2e, r24	; 46
	    CLR_BIT(TCCR1B_REG,CS12);			
 9e2:	8e b5       	in	r24, 0x2e	; 46
 9e4:	8b 7f       	andi	r24, 0xFB	; 251
 9e6:	8e bd       	out	0x2e, r24	; 46
	}
}
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	08 95       	ret

000009f6 <__subsf3>:
 9f6:	50 58       	subi	r21, 0x80	; 128

000009f8 <__addsf3>:
 9f8:	bb 27       	eor	r27, r27
 9fa:	aa 27       	eor	r26, r26
 9fc:	0e 94 13 05 	call	0xa26	; 0xa26 <__addsf3x>
 a00:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
 a04:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
 a08:	38 f0       	brcs	.+14     	; 0xa18 <__addsf3+0x20>
 a0a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__addsf3+0x20>
 a10:	39 f4       	brne	.+14     	; 0xa20 <__addsf3+0x28>
 a12:	9f 3f       	cpi	r25, 0xFF	; 255
 a14:	19 f4       	brne	.+6      	; 0xa1c <__addsf3+0x24>
 a16:	26 f4       	brtc	.+8      	; 0xa20 <__addsf3+0x28>
 a18:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>
 a1c:	0e f4       	brtc	.+2      	; 0xa20 <__addsf3+0x28>
 a1e:	e0 95       	com	r30
 a20:	e7 fb       	bst	r30, 7
 a22:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>

00000a26 <__addsf3x>:
 a26:	e9 2f       	mov	r30, r25
 a28:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
 a2c:	58 f3       	brcs	.-42     	; 0xa04 <__addsf3+0xc>
 a2e:	ba 17       	cp	r27, r26
 a30:	62 07       	cpc	r22, r18
 a32:	73 07       	cpc	r23, r19
 a34:	84 07       	cpc	r24, r20
 a36:	95 07       	cpc	r25, r21
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__addsf3x+0x1c>
 a3a:	79 f4       	brne	.+30     	; 0xa5a <__addsf3x+0x34>
 a3c:	a6 f5       	brtc	.+104    	; 0xaa6 <__addsf3x+0x80>
 a3e:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_zero>
 a42:	0e f4       	brtc	.+2      	; 0xa46 <__addsf3x+0x20>
 a44:	e0 95       	com	r30
 a46:	0b 2e       	mov	r0, r27
 a48:	ba 2f       	mov	r27, r26
 a4a:	a0 2d       	mov	r26, r0
 a4c:	0b 01       	movw	r0, r22
 a4e:	b9 01       	movw	r22, r18
 a50:	90 01       	movw	r18, r0
 a52:	0c 01       	movw	r0, r24
 a54:	ca 01       	movw	r24, r20
 a56:	a0 01       	movw	r20, r0
 a58:	11 24       	eor	r1, r1
 a5a:	ff 27       	eor	r31, r31
 a5c:	59 1b       	sub	r21, r25
 a5e:	99 f0       	breq	.+38     	; 0xa86 <__addsf3x+0x60>
 a60:	59 3f       	cpi	r21, 0xF9	; 249
 a62:	50 f4       	brcc	.+20     	; 0xa78 <__addsf3x+0x52>
 a64:	50 3e       	cpi	r21, 0xE0	; 224
 a66:	68 f1       	brcs	.+90     	; 0xac2 <__addsf3x+0x9c>
 a68:	1a 16       	cp	r1, r26
 a6a:	f0 40       	sbci	r31, 0x00	; 0
 a6c:	a2 2f       	mov	r26, r18
 a6e:	23 2f       	mov	r18, r19
 a70:	34 2f       	mov	r19, r20
 a72:	44 27       	eor	r20, r20
 a74:	58 5f       	subi	r21, 0xF8	; 248
 a76:	f3 cf       	rjmp	.-26     	; 0xa5e <__addsf3x+0x38>
 a78:	46 95       	lsr	r20
 a7a:	37 95       	ror	r19
 a7c:	27 95       	ror	r18
 a7e:	a7 95       	ror	r26
 a80:	f0 40       	sbci	r31, 0x00	; 0
 a82:	53 95       	inc	r21
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__addsf3x+0x52>
 a86:	7e f4       	brtc	.+30     	; 0xaa6 <__addsf3x+0x80>
 a88:	1f 16       	cp	r1, r31
 a8a:	ba 0b       	sbc	r27, r26
 a8c:	62 0b       	sbc	r22, r18
 a8e:	73 0b       	sbc	r23, r19
 a90:	84 0b       	sbc	r24, r20
 a92:	ba f0       	brmi	.+46     	; 0xac2 <__addsf3x+0x9c>
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	a1 f0       	breq	.+40     	; 0xac0 <__addsf3x+0x9a>
 a98:	ff 0f       	add	r31, r31
 a9a:	bb 1f       	adc	r27, r27
 a9c:	66 1f       	adc	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	c2 f7       	brpl	.-16     	; 0xa94 <__addsf3x+0x6e>
 aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__addsf3x+0x9c>
 aa6:	ba 0f       	add	r27, r26
 aa8:	62 1f       	adc	r22, r18
 aaa:	73 1f       	adc	r23, r19
 aac:	84 1f       	adc	r24, r20
 aae:	48 f4       	brcc	.+18     	; 0xac2 <__addsf3x+0x9c>
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f7 95       	ror	r31
 aba:	9e 3f       	cpi	r25, 0xFE	; 254
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__addsf3x+0x9a>
 abe:	b0 cf       	rjmp	.-160    	; 0xa20 <__addsf3+0x28>
 ac0:	93 95       	inc	r25
 ac2:	88 0f       	add	r24, r24
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__addsf3x+0xa2>
 ac6:	99 27       	eor	r25, r25
 ac8:	ee 0f       	add	r30, r30
 aca:	97 95       	ror	r25
 acc:	87 95       	ror	r24
 ace:	08 95       	ret

00000ad0 <__cmpsf2>:
 ad0:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_cmp>
 ad4:	08 f4       	brcc	.+2      	; 0xad8 <__cmpsf2+0x8>
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	08 95       	ret

00000ada <__divsf3>:
 ada:	0e 94 81 05 	call	0xb02	; 0xb02 <__divsf3x>
 ade:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
 ae2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
 ae6:	58 f0       	brcs	.+22     	; 0xafe <__divsf3+0x24>
 ae8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
 aec:	40 f0       	brcs	.+16     	; 0xafe <__divsf3+0x24>
 aee:	29 f4       	brne	.+10     	; 0xafa <__divsf3+0x20>
 af0:	5f 3f       	cpi	r21, 0xFF	; 255
 af2:	29 f0       	breq	.+10     	; 0xafe <__divsf3+0x24>
 af4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
 af8:	51 11       	cpse	r21, r1
 afa:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
 afe:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>

00000b02 <__divsf3x>:
 b02:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
 b06:	68 f3       	brcs	.-38     	; 0xae2 <__divsf3+0x8>

00000b08 <__divsf3_pse>:
 b08:	99 23       	and	r25, r25
 b0a:	b1 f3       	breq	.-20     	; 0xaf8 <__divsf3+0x1e>
 b0c:	55 23       	and	r21, r21
 b0e:	91 f3       	breq	.-28     	; 0xaf4 <__divsf3+0x1a>
 b10:	95 1b       	sub	r25, r21
 b12:	55 0b       	sbc	r21, r21
 b14:	bb 27       	eor	r27, r27
 b16:	aa 27       	eor	r26, r26
 b18:	62 17       	cp	r22, r18
 b1a:	73 07       	cpc	r23, r19
 b1c:	84 07       	cpc	r24, r20
 b1e:	38 f0       	brcs	.+14     	; 0xb2e <__divsf3_pse+0x26>
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
 b24:	22 0f       	add	r18, r18
 b26:	33 1f       	adc	r19, r19
 b28:	44 1f       	adc	r20, r20
 b2a:	aa 1f       	adc	r26, r26
 b2c:	a9 f3       	breq	.-22     	; 0xb18 <__divsf3_pse+0x10>
 b2e:	35 d0       	rcall	.+106    	; 0xb9a <__divsf3_pse+0x92>
 b30:	0e 2e       	mov	r0, r30
 b32:	3a f0       	brmi	.+14     	; 0xb42 <__divsf3_pse+0x3a>
 b34:	e0 e8       	ldi	r30, 0x80	; 128
 b36:	32 d0       	rcall	.+100    	; 0xb9c <__divsf3_pse+0x94>
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	e6 95       	lsr	r30
 b3e:	00 1c       	adc	r0, r0
 b40:	ca f7       	brpl	.-14     	; 0xb34 <__divsf3_pse+0x2c>
 b42:	2b d0       	rcall	.+86     	; 0xb9a <__divsf3_pse+0x92>
 b44:	fe 2f       	mov	r31, r30
 b46:	29 d0       	rcall	.+82     	; 0xb9a <__divsf3_pse+0x92>
 b48:	66 0f       	add	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	bb 1f       	adc	r27, r27
 b50:	26 17       	cp	r18, r22
 b52:	37 07       	cpc	r19, r23
 b54:	48 07       	cpc	r20, r24
 b56:	ab 07       	cpc	r26, r27
 b58:	b0 e8       	ldi	r27, 0x80	; 128
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__divsf3_pse+0x56>
 b5c:	bb 0b       	sbc	r27, r27
 b5e:	80 2d       	mov	r24, r0
 b60:	bf 01       	movw	r22, r30
 b62:	ff 27       	eor	r31, r31
 b64:	93 58       	subi	r25, 0x83	; 131
 b66:	5f 4f       	sbci	r21, 0xFF	; 255
 b68:	3a f0       	brmi	.+14     	; 0xb78 <__divsf3_pse+0x70>
 b6a:	9e 3f       	cpi	r25, 0xFE	; 254
 b6c:	51 05       	cpc	r21, r1
 b6e:	78 f0       	brcs	.+30     	; 0xb8e <__divsf3_pse+0x86>
 b70:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
 b74:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
 b78:	5f 3f       	cpi	r21, 0xFF	; 255
 b7a:	e4 f3       	brlt	.-8      	; 0xb74 <__divsf3_pse+0x6c>
 b7c:	98 3e       	cpi	r25, 0xE8	; 232
 b7e:	d4 f3       	brlt	.-12     	; 0xb74 <__divsf3_pse+0x6c>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f7 95       	ror	r31
 b8a:	9f 5f       	subi	r25, 0xFF	; 255
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__divsf3_pse+0x78>
 b8e:	88 0f       	add	r24, r24
 b90:	91 1d       	adc	r25, r1
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret
 b9a:	e1 e0       	ldi	r30, 0x01	; 1
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	bb 1f       	adc	r27, r27
 ba4:	62 17       	cp	r22, r18
 ba6:	73 07       	cpc	r23, r19
 ba8:	84 07       	cpc	r24, r20
 baa:	ba 07       	cpc	r27, r26
 bac:	20 f0       	brcs	.+8      	; 0xbb6 <__divsf3_pse+0xae>
 bae:	62 1b       	sub	r22, r18
 bb0:	73 0b       	sbc	r23, r19
 bb2:	84 0b       	sbc	r24, r20
 bb4:	ba 0b       	sbc	r27, r26
 bb6:	ee 1f       	adc	r30, r30
 bb8:	88 f7       	brcc	.-30     	; 0xb9c <__divsf3_pse+0x94>
 bba:	e0 95       	com	r30
 bbc:	08 95       	ret

00000bbe <__fixunssfsi>:
 bbe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_splitA>
 bc2:	88 f0       	brcs	.+34     	; 0xbe6 <__fixunssfsi+0x28>
 bc4:	9f 57       	subi	r25, 0x7F	; 127
 bc6:	98 f0       	brcs	.+38     	; 0xbee <__fixunssfsi+0x30>
 bc8:	b9 2f       	mov	r27, r25
 bca:	99 27       	eor	r25, r25
 bcc:	b7 51       	subi	r27, 0x17	; 23
 bce:	b0 f0       	brcs	.+44     	; 0xbfc <__fixunssfsi+0x3e>
 bd0:	e1 f0       	breq	.+56     	; 0xc0a <__fixunssfsi+0x4c>
 bd2:	66 0f       	add	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	1a f0       	brmi	.+6      	; 0xbe2 <__fixunssfsi+0x24>
 bdc:	ba 95       	dec	r27
 bde:	c9 f7       	brne	.-14     	; 0xbd2 <__fixunssfsi+0x14>
 be0:	14 c0       	rjmp	.+40     	; 0xc0a <__fixunssfsi+0x4c>
 be2:	b1 30       	cpi	r27, 0x01	; 1
 be4:	91 f0       	breq	.+36     	; 0xc0a <__fixunssfsi+0x4c>
 be6:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_zero>
 bea:	b1 e0       	ldi	r27, 0x01	; 1
 bec:	08 95       	ret
 bee:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_zero>
 bf2:	67 2f       	mov	r22, r23
 bf4:	78 2f       	mov	r23, r24
 bf6:	88 27       	eor	r24, r24
 bf8:	b8 5f       	subi	r27, 0xF8	; 248
 bfa:	39 f0       	breq	.+14     	; 0xc0a <__fixunssfsi+0x4c>
 bfc:	b9 3f       	cpi	r27, 0xF9	; 249
 bfe:	cc f3       	brlt	.-14     	; 0xbf2 <__fixunssfsi+0x34>
 c00:	86 95       	lsr	r24
 c02:	77 95       	ror	r23
 c04:	67 95       	ror	r22
 c06:	b3 95       	inc	r27
 c08:	d9 f7       	brne	.-10     	; 0xc00 <__fixunssfsi+0x42>
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__fixunssfsi+0x5c>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__floatunsisf>:
 c1c:	e8 94       	clt
 c1e:	09 c0       	rjmp	.+18     	; 0xc32 <__floatsisf+0x12>

00000c20 <__floatsisf>:
 c20:	97 fb       	bst	r25, 7
 c22:	3e f4       	brtc	.+14     	; 0xc32 <__floatsisf+0x12>
 c24:	90 95       	com	r25
 c26:	80 95       	com	r24
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255
 c2e:	8f 4f       	sbci	r24, 0xFF	; 255
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	99 23       	and	r25, r25
 c34:	a9 f0       	breq	.+42     	; 0xc60 <__floatsisf+0x40>
 c36:	f9 2f       	mov	r31, r25
 c38:	96 e9       	ldi	r25, 0x96	; 150
 c3a:	bb 27       	eor	r27, r27
 c3c:	93 95       	inc	r25
 c3e:	f6 95       	lsr	r31
 c40:	87 95       	ror	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	b7 95       	ror	r27
 c48:	f1 11       	cpse	r31, r1
 c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <__floatsisf+0x1c>
 c4c:	fa f4       	brpl	.+62     	; 0xc8c <__floatsisf+0x6c>
 c4e:	bb 0f       	add	r27, r27
 c50:	11 f4       	brne	.+4      	; 0xc56 <__floatsisf+0x36>
 c52:	60 ff       	sbrs	r22, 0
 c54:	1b c0       	rjmp	.+54     	; 0xc8c <__floatsisf+0x6c>
 c56:	6f 5f       	subi	r22, 0xFF	; 255
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	16 c0       	rjmp	.+44     	; 0xc8c <__floatsisf+0x6c>
 c60:	88 23       	and	r24, r24
 c62:	11 f0       	breq	.+4      	; 0xc68 <__floatsisf+0x48>
 c64:	96 e9       	ldi	r25, 0x96	; 150
 c66:	11 c0       	rjmp	.+34     	; 0xc8a <__floatsisf+0x6a>
 c68:	77 23       	and	r23, r23
 c6a:	21 f0       	breq	.+8      	; 0xc74 <__floatsisf+0x54>
 c6c:	9e e8       	ldi	r25, 0x8E	; 142
 c6e:	87 2f       	mov	r24, r23
 c70:	76 2f       	mov	r23, r22
 c72:	05 c0       	rjmp	.+10     	; 0xc7e <__floatsisf+0x5e>
 c74:	66 23       	and	r22, r22
 c76:	71 f0       	breq	.+28     	; 0xc94 <__floatsisf+0x74>
 c78:	96 e8       	ldi	r25, 0x86	; 134
 c7a:	86 2f       	mov	r24, r22
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	60 e0       	ldi	r22, 0x00	; 0
 c80:	2a f0       	brmi	.+10     	; 0xc8c <__floatsisf+0x6c>
 c82:	9a 95       	dec	r25
 c84:	66 0f       	add	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	da f7       	brpl	.-10     	; 0xc82 <__floatsisf+0x62>
 c8c:	88 0f       	add	r24, r24
 c8e:	96 95       	lsr	r25
 c90:	87 95       	ror	r24
 c92:	97 f9       	bld	r25, 7
 c94:	08 95       	ret

00000c96 <__fp_cmp>:
 c96:	99 0f       	add	r25, r25
 c98:	00 08       	sbc	r0, r0
 c9a:	55 0f       	add	r21, r21
 c9c:	aa 0b       	sbc	r26, r26
 c9e:	e0 e8       	ldi	r30, 0x80	; 128
 ca0:	fe ef       	ldi	r31, 0xFE	; 254
 ca2:	16 16       	cp	r1, r22
 ca4:	17 06       	cpc	r1, r23
 ca6:	e8 07       	cpc	r30, r24
 ca8:	f9 07       	cpc	r31, r25
 caa:	c0 f0       	brcs	.+48     	; 0xcdc <__fp_cmp+0x46>
 cac:	12 16       	cp	r1, r18
 cae:	13 06       	cpc	r1, r19
 cb0:	e4 07       	cpc	r30, r20
 cb2:	f5 07       	cpc	r31, r21
 cb4:	98 f0       	brcs	.+38     	; 0xcdc <__fp_cmp+0x46>
 cb6:	62 1b       	sub	r22, r18
 cb8:	73 0b       	sbc	r23, r19
 cba:	84 0b       	sbc	r24, r20
 cbc:	95 0b       	sbc	r25, r21
 cbe:	39 f4       	brne	.+14     	; 0xcce <__fp_cmp+0x38>
 cc0:	0a 26       	eor	r0, r26
 cc2:	61 f0       	breq	.+24     	; 0xcdc <__fp_cmp+0x46>
 cc4:	23 2b       	or	r18, r19
 cc6:	24 2b       	or	r18, r20
 cc8:	25 2b       	or	r18, r21
 cca:	21 f4       	brne	.+8      	; 0xcd4 <__fp_cmp+0x3e>
 ccc:	08 95       	ret
 cce:	0a 26       	eor	r0, r26
 cd0:	09 f4       	brne	.+2      	; 0xcd4 <__fp_cmp+0x3e>
 cd2:	a1 40       	sbci	r26, 0x01	; 1
 cd4:	a6 95       	lsr	r26
 cd6:	8f ef       	ldi	r24, 0xFF	; 255
 cd8:	81 1d       	adc	r24, r1
 cda:	81 1d       	adc	r24, r1
 cdc:	08 95       	ret

00000cde <__fp_inf>:
 cde:	97 f9       	bld	r25, 7
 ce0:	9f 67       	ori	r25, 0x7F	; 127
 ce2:	80 e8       	ldi	r24, 0x80	; 128
 ce4:	70 e0       	ldi	r23, 0x00	; 0
 ce6:	60 e0       	ldi	r22, 0x00	; 0
 ce8:	08 95       	ret

00000cea <__fp_nan>:
 cea:	9f ef       	ldi	r25, 0xFF	; 255
 cec:	80 ec       	ldi	r24, 0xC0	; 192
 cee:	08 95       	ret

00000cf0 <__fp_pscA>:
 cf0:	00 24       	eor	r0, r0
 cf2:	0a 94       	dec	r0
 cf4:	16 16       	cp	r1, r22
 cf6:	17 06       	cpc	r1, r23
 cf8:	18 06       	cpc	r1, r24
 cfa:	09 06       	cpc	r0, r25
 cfc:	08 95       	ret

00000cfe <__fp_pscB>:
 cfe:	00 24       	eor	r0, r0
 d00:	0a 94       	dec	r0
 d02:	12 16       	cp	r1, r18
 d04:	13 06       	cpc	r1, r19
 d06:	14 06       	cpc	r1, r20
 d08:	05 06       	cpc	r0, r21
 d0a:	08 95       	ret

00000d0c <__fp_round>:
 d0c:	09 2e       	mov	r0, r25
 d0e:	03 94       	inc	r0
 d10:	00 0c       	add	r0, r0
 d12:	11 f4       	brne	.+4      	; 0xd18 <__fp_round+0xc>
 d14:	88 23       	and	r24, r24
 d16:	52 f0       	brmi	.+20     	; 0xd2c <__fp_round+0x20>
 d18:	bb 0f       	add	r27, r27
 d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fp_round+0x20>
 d1c:	bf 2b       	or	r27, r31
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0x18>
 d20:	60 ff       	sbrs	r22, 0
 d22:	04 c0       	rjmp	.+8      	; 0xd2c <__fp_round+0x20>
 d24:	6f 5f       	subi	r22, 0xFF	; 255
 d26:	7f 4f       	sbci	r23, 0xFF	; 255
 d28:	8f 4f       	sbci	r24, 0xFF	; 255
 d2a:	9f 4f       	sbci	r25, 0xFF	; 255
 d2c:	08 95       	ret

00000d2e <__fp_split3>:
 d2e:	57 fd       	sbrc	r21, 7
 d30:	90 58       	subi	r25, 0x80	; 128
 d32:	44 0f       	add	r20, r20
 d34:	55 1f       	adc	r21, r21
 d36:	59 f0       	breq	.+22     	; 0xd4e <__fp_splitA+0x10>
 d38:	5f 3f       	cpi	r21, 0xFF	; 255
 d3a:	71 f0       	breq	.+28     	; 0xd58 <__fp_splitA+0x1a>
 d3c:	47 95       	ror	r20

00000d3e <__fp_splitA>:
 d3e:	88 0f       	add	r24, r24
 d40:	97 fb       	bst	r25, 7
 d42:	99 1f       	adc	r25, r25
 d44:	61 f0       	breq	.+24     	; 0xd5e <__fp_splitA+0x20>
 d46:	9f 3f       	cpi	r25, 0xFF	; 255
 d48:	79 f0       	breq	.+30     	; 0xd68 <__fp_splitA+0x2a>
 d4a:	87 95       	ror	r24
 d4c:	08 95       	ret
 d4e:	12 16       	cp	r1, r18
 d50:	13 06       	cpc	r1, r19
 d52:	14 06       	cpc	r1, r20
 d54:	55 1f       	adc	r21, r21
 d56:	f2 cf       	rjmp	.-28     	; 0xd3c <__fp_split3+0xe>
 d58:	46 95       	lsr	r20
 d5a:	f1 df       	rcall	.-30     	; 0xd3e <__fp_splitA>
 d5c:	08 c0       	rjmp	.+16     	; 0xd6e <__fp_splitA+0x30>
 d5e:	16 16       	cp	r1, r22
 d60:	17 06       	cpc	r1, r23
 d62:	18 06       	cpc	r1, r24
 d64:	99 1f       	adc	r25, r25
 d66:	f1 cf       	rjmp	.-30     	; 0xd4a <__fp_splitA+0xc>
 d68:	86 95       	lsr	r24
 d6a:	71 05       	cpc	r23, r1
 d6c:	61 05       	cpc	r22, r1
 d6e:	08 94       	sec
 d70:	08 95       	ret

00000d72 <__fp_zero>:
 d72:	e8 94       	clt

00000d74 <__fp_szero>:
 d74:	bb 27       	eor	r27, r27
 d76:	66 27       	eor	r22, r22
 d78:	77 27       	eor	r23, r23
 d7a:	cb 01       	movw	r24, r22
 d7c:	97 f9       	bld	r25, 7
 d7e:	08 95       	ret

00000d80 <__mulsf3>:
 d80:	0e 94 d3 06 	call	0xda6	; 0xda6 <__mulsf3x>
 d84:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_round>
 d88:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_pscA>
 d8c:	38 f0       	brcs	.+14     	; 0xd9c <__mulsf3+0x1c>
 d8e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__fp_pscB>
 d92:	20 f0       	brcs	.+8      	; 0xd9c <__mulsf3+0x1c>
 d94:	95 23       	and	r25, r21
 d96:	11 f0       	breq	.+4      	; 0xd9c <__mulsf3+0x1c>
 d98:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
 d9c:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_nan>
 da0:	11 24       	eor	r1, r1
 da2:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>

00000da6 <__mulsf3x>:
 da6:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
 daa:	70 f3       	brcs	.-36     	; 0xd88 <__mulsf3+0x8>

00000dac <__mulsf3_pse>:
 dac:	95 9f       	mul	r25, r21
 dae:	c1 f3       	breq	.-16     	; 0xda0 <__mulsf3+0x20>
 db0:	95 0f       	add	r25, r21
 db2:	50 e0       	ldi	r21, 0x00	; 0
 db4:	55 1f       	adc	r21, r21
 db6:	62 9f       	mul	r22, r18
 db8:	f0 01       	movw	r30, r0
 dba:	72 9f       	mul	r23, r18
 dbc:	bb 27       	eor	r27, r27
 dbe:	f0 0d       	add	r31, r0
 dc0:	b1 1d       	adc	r27, r1
 dc2:	63 9f       	mul	r22, r19
 dc4:	aa 27       	eor	r26, r26
 dc6:	f0 0d       	add	r31, r0
 dc8:	b1 1d       	adc	r27, r1
 dca:	aa 1f       	adc	r26, r26
 dcc:	64 9f       	mul	r22, r20
 dce:	66 27       	eor	r22, r22
 dd0:	b0 0d       	add	r27, r0
 dd2:	a1 1d       	adc	r26, r1
 dd4:	66 1f       	adc	r22, r22
 dd6:	82 9f       	mul	r24, r18
 dd8:	22 27       	eor	r18, r18
 dda:	b0 0d       	add	r27, r0
 ddc:	a1 1d       	adc	r26, r1
 dde:	62 1f       	adc	r22, r18
 de0:	73 9f       	mul	r23, r19
 de2:	b0 0d       	add	r27, r0
 de4:	a1 1d       	adc	r26, r1
 de6:	62 1f       	adc	r22, r18
 de8:	83 9f       	mul	r24, r19
 dea:	a0 0d       	add	r26, r0
 dec:	61 1d       	adc	r22, r1
 dee:	22 1f       	adc	r18, r18
 df0:	74 9f       	mul	r23, r20
 df2:	33 27       	eor	r19, r19
 df4:	a0 0d       	add	r26, r0
 df6:	61 1d       	adc	r22, r1
 df8:	23 1f       	adc	r18, r19
 dfa:	84 9f       	mul	r24, r20
 dfc:	60 0d       	add	r22, r0
 dfe:	21 1d       	adc	r18, r1
 e00:	82 2f       	mov	r24, r18
 e02:	76 2f       	mov	r23, r22
 e04:	6a 2f       	mov	r22, r26
 e06:	11 24       	eor	r1, r1
 e08:	9f 57       	subi	r25, 0x7F	; 127
 e0a:	50 40       	sbci	r21, 0x00	; 0
 e0c:	9a f0       	brmi	.+38     	; 0xe34 <__mulsf3_pse+0x88>
 e0e:	f1 f0       	breq	.+60     	; 0xe4c <__mulsf3_pse+0xa0>
 e10:	88 23       	and	r24, r24
 e12:	4a f0       	brmi	.+18     	; 0xe26 <__mulsf3_pse+0x7a>
 e14:	ee 0f       	add	r30, r30
 e16:	ff 1f       	adc	r31, r31
 e18:	bb 1f       	adc	r27, r27
 e1a:	66 1f       	adc	r22, r22
 e1c:	77 1f       	adc	r23, r23
 e1e:	88 1f       	adc	r24, r24
 e20:	91 50       	subi	r25, 0x01	; 1
 e22:	50 40       	sbci	r21, 0x00	; 0
 e24:	a9 f7       	brne	.-22     	; 0xe10 <__mulsf3_pse+0x64>
 e26:	9e 3f       	cpi	r25, 0xFE	; 254
 e28:	51 05       	cpc	r21, r1
 e2a:	80 f0       	brcs	.+32     	; 0xe4c <__mulsf3_pse+0xa0>
 e2c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_inf>
 e30:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
 e34:	5f 3f       	cpi	r21, 0xFF	; 255
 e36:	e4 f3       	brlt	.-8      	; 0xe30 <__mulsf3_pse+0x84>
 e38:	98 3e       	cpi	r25, 0xE8	; 232
 e3a:	d4 f3       	brlt	.-12     	; 0xe30 <__mulsf3_pse+0x84>
 e3c:	86 95       	lsr	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	b7 95       	ror	r27
 e44:	f7 95       	ror	r31
 e46:	e7 95       	ror	r30
 e48:	9f 5f       	subi	r25, 0xFF	; 255
 e4a:	c1 f7       	brne	.-16     	; 0xe3c <__mulsf3_pse+0x90>
 e4c:	fe 2b       	or	r31, r30
 e4e:	88 0f       	add	r24, r24
 e50:	91 1d       	adc	r25, r1
 e52:	96 95       	lsr	r25
 e54:	87 95       	ror	r24
 e56:	97 f9       	bld	r25, 7
 e58:	08 95       	ret

00000e5a <__udivmodsi4>:
 e5a:	a1 e2       	ldi	r26, 0x21	; 33
 e5c:	1a 2e       	mov	r1, r26
 e5e:	aa 1b       	sub	r26, r26
 e60:	bb 1b       	sub	r27, r27
 e62:	fd 01       	movw	r30, r26
 e64:	0d c0       	rjmp	.+26     	; 0xe80 <__udivmodsi4_ep>

00000e66 <__udivmodsi4_loop>:
 e66:	aa 1f       	adc	r26, r26
 e68:	bb 1f       	adc	r27, r27
 e6a:	ee 1f       	adc	r30, r30
 e6c:	ff 1f       	adc	r31, r31
 e6e:	a2 17       	cp	r26, r18
 e70:	b3 07       	cpc	r27, r19
 e72:	e4 07       	cpc	r30, r20
 e74:	f5 07       	cpc	r31, r21
 e76:	20 f0       	brcs	.+8      	; 0xe80 <__udivmodsi4_ep>
 e78:	a2 1b       	sub	r26, r18
 e7a:	b3 0b       	sbc	r27, r19
 e7c:	e4 0b       	sbc	r30, r20
 e7e:	f5 0b       	sbc	r31, r21

00000e80 <__udivmodsi4_ep>:
 e80:	66 1f       	adc	r22, r22
 e82:	77 1f       	adc	r23, r23
 e84:	88 1f       	adc	r24, r24
 e86:	99 1f       	adc	r25, r25
 e88:	1a 94       	dec	r1
 e8a:	69 f7       	brne	.-38     	; 0xe66 <__udivmodsi4_loop>
 e8c:	60 95       	com	r22
 e8e:	70 95       	com	r23
 e90:	80 95       	com	r24
 e92:	90 95       	com	r25
 e94:	9b 01       	movw	r18, r22
 e96:	ac 01       	movw	r20, r24
 e98:	bd 01       	movw	r22, r26
 e9a:	cf 01       	movw	r24, r30
 e9c:	08 95       	ret

00000e9e <__umulhisi3>:
 e9e:	a2 9f       	mul	r26, r18
 ea0:	b0 01       	movw	r22, r0
 ea2:	b3 9f       	mul	r27, r19
 ea4:	c0 01       	movw	r24, r0
 ea6:	a3 9f       	mul	r26, r19
 ea8:	70 0d       	add	r23, r0
 eaa:	81 1d       	adc	r24, r1
 eac:	11 24       	eor	r1, r1
 eae:	91 1d       	adc	r25, r1
 eb0:	b2 9f       	mul	r27, r18
 eb2:	70 0d       	add	r23, r0
 eb4:	81 1d       	adc	r24, r1
 eb6:	11 24       	eor	r1, r1
 eb8:	91 1d       	adc	r25, r1
 eba:	08 95       	ret

00000ebc <_exit>:
 ebc:	f8 94       	cli

00000ebe <__stop_program>:
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <__stop_program>
