
RTOS 1st project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080006a  0080006a  0000077c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015cd  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8b  00000000  00000000  00001f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d55  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b07  00000000  00000000  000041e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 22 02 	call	0x444	; 0x444 <main>
  8a:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
		case DIO_PORTC:
			SET_BIT(PORTC_REG, copy_u8PinId);
			break;

		case DIO_PORTD:
			SET_BIT(PORTD_REG, copy_u8PinId);
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	7e c0       	rjmp	.+252    	; 0x194 <DIO_voidSetPinDirection+0x102>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	7b c0       	rjmp	.+246    	; 0x194 <DIO_voidSetPinDirection+0x102>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_voidSetPinDirection+0x12>
  a2:	78 c0       	rjmp	.+240    	; 0x194 <DIO_voidSetPinDirection+0x102>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	19 f1       	breq	.+70     	; 0xee <DIO_voidSetPinDirection+0x5c>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_voidSetPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	e1 f1       	breq	.+120    	; 0x126 <DIO_voidSetPinDirection+0x94>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x22>
  b2:	55 c0       	rjmp	.+170    	; 0x15e <DIO_voidSetPinDirection+0xcc>
  b4:	08 95       	ret
  b6:	44 23       	and	r20, r20
  b8:	19 f0       	breq	.+6      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_voidSetPinDirection+0x46>
  be:	08 95       	ret
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_voidSetPinDirection+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_voidSetPinDirection+0x36>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDirection+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDirection+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
  ec:	08 95       	ret
  ee:	44 23       	and	r20, r20
  f0:	19 f0       	breq	.+6      	; 0xf8 <DIO_voidSetPinDirection+0x66>
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	69 f0       	breq	.+26     	; 0x110 <DIO_voidSetPinDirection+0x7e>
  f6:	08 95       	ret
  f8:	27 b3       	in	r18, 0x17	; 23
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x6e>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	08 95       	ret
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x86>
 120:	82 2b       	or	r24, r18
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <DIO_voidSetPinDirection+0x9e>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f0       	breq	.+26     	; 0x148 <DIO_voidSetPinDirection+0xb6>
 12e:	08 95       	ret
 130:	24 b3       	in	r18, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinDirection+0xaa>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinDirection+0xa6>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
 15e:	44 23       	and	r20, r20
 160:	19 f0       	breq	.+6      	; 0x168 <DIO_voidSetPinDirection+0xd6>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_voidSetPinDirection+0xee>
 166:	08 95       	ret
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0xe2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0xde>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDirection+0xfa>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDirection+0xf6>
 190:	82 2b       	or	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_voidSetPinValue>:
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	08 f0       	brcs	.+2      	; 0x19c <DIO_voidSetPinValue+0x6>
 19a:	7e c0       	rjmp	.+252    	; 0x298 <DIO_voidSetPinValue+0x102>
 19c:	68 30       	cpi	r22, 0x08	; 8
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_voidSetPinValue+0xc>
 1a0:	7b c0       	rjmp	.+246    	; 0x298 <DIO_voidSetPinValue+0x102>
 1a2:	42 30       	cpi	r20, 0x02	; 2
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_voidSetPinValue+0x12>
 1a6:	78 c0       	rjmp	.+240    	; 0x298 <DIO_voidSetPinValue+0x102>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	19 f1       	breq	.+70     	; 0x1f2 <DIO_voidSetPinValue+0x5c>
 1ac:	30 f0       	brcs	.+12     	; 0x1ba <DIO_voidSetPinValue+0x24>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	e1 f1       	breq	.+120    	; 0x22a <DIO_voidSetPinValue+0x94>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_voidSetPinValue+0x22>
 1b6:	55 c0       	rjmp	.+170    	; 0x262 <DIO_voidSetPinValue+0xcc>
 1b8:	08 95       	ret
 1ba:	44 23       	and	r20, r20
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <DIO_voidSetPinValue+0x2e>
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	69 f0       	breq	.+26     	; 0x1dc <DIO_voidSetPinValue+0x46>
 1c2:	08 95       	ret
 1c4:	2b b3       	in	r18, 0x1b	; 27
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_voidSetPinValue+0x3a>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_voidSetPinValue+0x36>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	08 95       	ret
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinValue+0x52>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinValue+0x4e>
 1ec:	82 2b       	or	r24, r18
 1ee:	8b bb       	out	0x1b, r24	; 27
 1f0:	08 95       	ret
 1f2:	44 23       	and	r20, r20
 1f4:	19 f0       	breq	.+6      	; 0x1fc <DIO_voidSetPinValue+0x66>
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	69 f0       	breq	.+26     	; 0x214 <DIO_voidSetPinValue+0x7e>
 1fa:	08 95       	ret
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x72>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x6e>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x8a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x86>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	44 23       	and	r20, r20
 22c:	19 f0       	breq	.+6      	; 0x234 <DIO_voidSetPinValue+0x9e>
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	69 f0       	breq	.+26     	; 0x24c <DIO_voidSetPinValue+0xb6>
 232:	08 95       	ret
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinValue+0xaa>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinValue+0xa6>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	85 bb       	out	0x15, r24	; 21
 24a:	08 95       	ret
 24c:	25 b3       	in	r18, 0x15	; 21
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0xc2>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0xbe>
 25c:	82 2b       	or	r24, r18
 25e:	85 bb       	out	0x15, r24	; 21
 260:	08 95       	ret
 262:	44 23       	and	r20, r20
 264:	19 f0       	breq	.+6      	; 0x26c <DIO_voidSetPinValue+0xd6>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	69 f0       	breq	.+26     	; 0x284 <DIO_voidSetPinValue+0xee>
 26a:	08 95       	ret
 26c:	22 b3       	in	r18, 0x12	; 18
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinValue+0xe2>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinValue+0xde>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinValue+0xfa>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinValue+0xf6>
 294:	82 2b       	or	r24, r18
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret

0000029a <DIO_voidSetPortDirection>:


/* PORTS API's */
void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
	if((copy_u8PortId <= DIO_PORTD)&&((copy_u8PortDirection == DIO_PORT_OUTPUT) || (copy_u8PortDirection == DIO_PORT_INPUT)))
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	98 f5       	brcc	.+102    	; 0x304 <DIO_voidSetPortDirection+0x6a>
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	96 0f       	add	r25, r22
 2a2:	9e 3f       	cpi	r25, 0xFE	; 254
 2a4:	78 f1       	brcs	.+94     	; 0x304 <DIO_voidSetPortDirection+0x6a>
	{
		switch(copy_u8PortId)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	81 f0       	breq	.+32     	; 0x2ca <DIO_voidSetPortDirection+0x30>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_voidSetPortDirection+0x1c>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	b9 f0       	breq	.+46     	; 0x2de <DIO_voidSetPortDirection+0x44>
 2b0:	83 30       	cpi	r24, 0x03	; 3
 2b2:	f9 f0       	breq	.+62     	; 0x2f2 <DIO_voidSetPortDirection+0x58>
 2b4:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PortDirection)
 2b6:	66 23       	and	r22, r22
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <DIO_voidSetPortDirection+0x26>
 2ba:	6f 3f       	cpi	r22, 0xFF	; 255
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <DIO_voidSetPortDirection+0x2a>
 2be:	08 95       	ret
			{
			case DIO_PORT_INPUT:
				DDRA_REG = 0x00;
 2c0:	1a ba       	out	0x1a, r1	; 26
				break;
 2c2:	08 95       	ret

			case DIO_PORT_OUTPUT:
				DDRA_REG = 0xFF;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8a bb       	out	0x1a, r24	; 26
				break;
 2c8:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PortDirection)
 2ca:	66 23       	and	r22, r22
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <DIO_voidSetPortDirection+0x3a>
 2ce:	6f 3f       	cpi	r22, 0xFF	; 255
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <DIO_voidSetPortDirection+0x3e>
 2d2:	08 95       	ret
				{
				case DIO_PORT_INPUT:
					DDRB_REG = 0x00;
 2d4:	17 ba       	out	0x17, r1	; 23
					break;
 2d6:	08 95       	ret

				case DIO_PORT_OUTPUT:
					DDRB_REG = 0xFF;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	87 bb       	out	0x17, r24	; 23
					break;
 2dc:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PortDirection)
 2de:	66 23       	and	r22, r22
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <DIO_voidSetPortDirection+0x4e>
 2e2:	6f 3f       	cpi	r22, 0xFF	; 255
 2e4:	19 f0       	breq	.+6      	; 0x2ec <DIO_voidSetPortDirection+0x52>
 2e6:	08 95       	ret
					{
					case DIO_PORT_INPUT:
						DDRC_REG = 0x00;
 2e8:	14 ba       	out	0x14, r1	; 20
						break;
 2ea:	08 95       	ret

					case DIO_PORT_OUTPUT:
						DDRC_REG = 0xFF;
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	84 bb       	out	0x14, r24	; 20
						break;
 2f0:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PortDirection)
 2f2:	66 23       	and	r22, r22
 2f4:	19 f0       	breq	.+6      	; 0x2fc <DIO_voidSetPortDirection+0x62>
 2f6:	6f 3f       	cpi	r22, 0xFF	; 255
 2f8:	19 f0       	breq	.+6      	; 0x300 <DIO_voidSetPortDirection+0x66>
 2fa:	08 95       	ret
						{
						case DIO_PORT_INPUT:
							DDRD_REG = 0x00;
 2fc:	11 ba       	out	0x11, r1	; 17
							break;
 2fe:	08 95       	ret

						case DIO_PORT_OUTPUT:
							DDRD_REG = 0xFF;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	81 bb       	out	0x11, r24	; 17
 304:	08 95       	ret

00000306 <DIO_voidSetPortValue>:
}


void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
	if((copy_u8PortId <= DIO_PORTD))
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	78 f4       	brcc	.+30     	; 0x328 <DIO_voidSetPortValue+0x22>
	{
		switch(copy_u8PortId)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	41 f0       	breq	.+16     	; 0x31e <DIO_voidSetPortValue+0x18>
 30e:	28 f0       	brcs	.+10     	; 0x31a <DIO_voidSetPortValue+0x14>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	39 f0       	breq	.+14     	; 0x322 <DIO_voidSetPortValue+0x1c>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	39 f0       	breq	.+14     	; 0x326 <DIO_voidSetPortValue+0x20>
 318:	08 95       	ret
		{
		case DIO_PORTA:
			PORTA_REG = copy_u8PortValue;
 31a:	6b bb       	out	0x1b, r22	; 27
			break;
 31c:	08 95       	ret

		case DIO_PORTB:
			PORTB_REG = copy_u8PortValue;
 31e:	68 bb       	out	0x18, r22	; 24
			break;
 320:	08 95       	ret

		case DIO_PORTC:
			PORTC_REG = copy_u8PortValue;
 322:	65 bb       	out	0x15, r22	; 21
			break;
 324:	08 95       	ret

		case DIO_PORTD:
			PORTD_REG = copy_u8PortValue;
 326:	62 bb       	out	0x12, r22	; 18
 328:	08 95       	ret

0000032a <GI_voidEnable>:
#include "GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG, I);
 32a:	8f b7       	in	r24, 0x3f	; 63
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	8f bf       	out	0x3f, r24	; 63
 330:	08 95       	ret

00000332 <LED_voidInit>:
#include "LED_interface.h"


void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
	DIO_voidSetPinDirection(copy_u8LedPort, copy_u8LedPin, DIO_PIN_OUTPUT);
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 338:	08 95       	ret

0000033a <LED_voidOn>:
}


void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
 33a:	41 30       	cpi	r20, 0x01	; 1
 33c:	19 f0       	breq	.+6      	; 0x344 <LED_voidOn+0xa>
 33e:	42 30       	cpi	r20, 0x02	; 2
 340:	29 f0       	breq	.+10     	; 0x34c <LED_voidOn+0x12>
 342:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
		break;
 34a:	08 95       	ret

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
 352:	08 95       	ret

00000354 <LED_voidOff>:
}


void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	19 f0       	breq	.+6      	; 0x35e <LED_voidOff+0xa>
 358:	42 30       	cpi	r20, 0x02	; 2
 35a:	29 f0       	breq	.+10     	; 0x366 <LED_voidOff+0x12>
 35c:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
		break;
 364:	08 95       	ret

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
 36c:	08 95       	ret

0000036e <leds>:




void leds(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
	// ------------Red Led Pin 0 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	64 e0       	ldi	r22, 0x04	; 4
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_voidOn>
	for (int i = 1; i <= 60; i++)
 390:	c1 e0       	ldi	r28, 0x01	; 1
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <leds+0x42>
	{
		SSD_voidDisplayMultiplexedNumber(i);
 396:	8c 2f       	mov	r24, r28
 398:	0e 94 03 03 	call	0x606	; 0x606 <SSD_voidDisplayMultiplexedNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	2f e3       	ldi	r18, 0x3F	; 63
 39e:	82 e4       	ldi	r24, 0x42	; 66
 3a0:	9f e0       	ldi	r25, 0x0F	; 15
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <leds+0x34>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <leds+0x3e>
 3ac:	00 00       	nop
{
	// ------------Red Led Pin 0 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
	LED_voidOn(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 60; i++)
 3ae:	21 96       	adiw	r28, 0x01	; 1
 3b0:	cd 33       	cpi	r28, 0x3D	; 61
 3b2:	d1 05       	cpc	r29, r1
 3b4:	84 f3       	brlt	.-32     	; 0x396 <leds+0x28>
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}
	
	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	67 e0       	ldi	r22, 0x07	; 7
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_voidOn>
	for (int i = 1; i <= 5; i++)
 3d4:	c1 e0       	ldi	r28, 0x01	; 1
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <leds+0x86>
	{
		SSD_voidDisplayMultiplexedNumber(i);
 3da:	8c 2f       	mov	r24, r28
 3dc:	0e 94 03 03 	call	0x606	; 0x606 <SSD_voidDisplayMultiplexedNumber>
 3e0:	2f e3       	ldi	r18, 0x3F	; 63
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <leds+0x78>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <leds+0x82>
 3f0:	00 00       	nop
	
	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 5; i++)
 3f2:	21 96       	adiw	r28, 0x01	; 1
 3f4:	c6 30       	cpi	r28, 0x06	; 6
 3f6:	d1 05       	cpc	r29, r1
 3f8:	84 f3       	brlt	.-32     	; 0x3da <leds+0x6c>
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}
	
	// ------------Green Led Pin 7 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	0e 94 aa 01 	call	0x354	; 0x354 <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	67 e0       	ldi	r22, 0x07	; 7
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_voidOn>
	for (int i = 1; i <= 60; i++)
 418:	c1 e0       	ldi	r28, 0x01	; 1
 41a:	d0 e0       	ldi	r29, 0x00	; 0
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{
		SSD_voidDisplayMultiplexedNumber(i);
 41e:	8c 2f       	mov	r24, r28
 420:	0e 94 03 03 	call	0x606	; 0x606 <SSD_voidDisplayMultiplexedNumber>
 424:	2f e3       	ldi	r18, 0x3F	; 63
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	9f e0       	ldi	r25, 0x0F	; 15
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	
	// ------------Green Led Pin 7 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
	LED_voidOn(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 60; i++)
 436:	21 96       	adiw	r28, 0x01	; 1
 438:	cd 33       	cpi	r28, 0x3D	; 61
 43a:	d1 05       	cpc	r29, r1
 43c:	84 f3       	brlt	.-32     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <main>:

int main(void)
{
	SSD_voidInit();
 444:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SSD_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 99 01 	call	0x332	; 0x332 <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN4);
 450:	64 e0       	ldi	r22, 0x04	; 4
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 99 01 	call	0x332	; 0x332 <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN7);
 458:	67 e0       	ldi	r22, 0x07	; 7
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	0e 94 99 01 	call	0x332	; 0x332 <LED_voidInit>
	while (1)
	{
			RTOS_createTask(0, 1, &leds);
 460:	47 eb       	ldi	r20, 0xB7	; 183
 462:	51 e0       	ldi	r21, 0x01	; 1
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 8a 02 	call	0x514	; 0x514 <RTOS_createTask>

			RTOS_start();
 46e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <RTOS_start>
 472:	f6 cf       	rjmp	.-20     	; 0x460 <main+0x1c>

00000474 <PRV_scheduler>:
	arrayOfTasks[priority].TaskStatus = RTOS_TASK_RESUMED;
}


static void PRV_scheduler(void)
{
 474:	cf 93       	push	r28
	static u16 tickCount = 0;
	tickCount++; 
 476:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 47a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 484:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	
	u8 taskCount;
	for(taskCount=0; taskCount<RTOS_TASK_NUM; taskCount++)
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	32 c0       	rjmp	.+100    	; 0x4f0 <PRV_scheduler+0x7c>
	{
		if(arrayOfTasks[taskCount].TaskStatus==RTOS_TASK_RESUMED)
 48c:	2c 2f       	mov	r18, r28
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	e2 0f       	add	r30, r18
 49c:	f3 1f       	adc	r31, r19
 49e:	e4 59       	subi	r30, 0x94	; 148
 4a0:	ff 4f       	sbci	r31, 0xFF	; 255
 4a2:	84 81       	ldd	r24, Z+4	; 0x04
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	19 f5       	brne	.+70     	; 0x4ee <PRV_scheduler+0x7a>
		{
			if(tickCount%(arrayOfTasks[taskCount].TaskPeriodicity)==0)
 4a8:	f9 01       	movw	r30, r18
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e2 0f       	add	r30, r18
 4b4:	f3 1f       	adc	r31, r19
 4b6:	e4 59       	subi	r30, 0x94	; 148
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	62 81       	ldd	r22, Z+2	; 0x02
 4bc:	73 81       	ldd	r23, Z+3	; 0x03
 4be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 4c2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 4c6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 4ca:	89 2b       	or	r24, r25
 4cc:	81 f4       	brne	.+32     	; 0x4ee <PRV_scheduler+0x7a>
		    {
		    	if(arrayOfTasks[taskCount].pFunTask!=NULL)
 4ce:	f9 01       	movw	r30, r18
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	2e 0f       	add	r18, r30
 4da:	3f 1f       	adc	r19, r31
 4dc:	f9 01       	movw	r30, r18
 4de:	e4 59       	subi	r30, 0x94	; 148
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	01 90       	ld	r0, Z+
 4e4:	f0 81       	ld	r31, Z
 4e6:	e0 2d       	mov	r30, r0
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	09 f0       	breq	.+2      	; 0x4ee <PRV_scheduler+0x7a>
		    	{
		    		arrayOfTasks[taskCount].pFunTask();
 4ec:	09 95       	icall
{
	static u16 tickCount = 0;
	tickCount++; 
	
	u8 taskCount;
	for(taskCount=0; taskCount<RTOS_TASK_NUM; taskCount++)
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
 4f0:	c4 30       	cpi	r28, 0x04	; 4
 4f2:	60 f2       	brcs	.-104    	; 0x48c <PRV_scheduler+0x18>
		    		arrayOfTasks[taskCount].pFunTask();
		    	}
		    }
		}
	}
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <RTOS_start>:

static Task_t arrayOfTasks[RTOS_TASK_NUM];

void RTOS_start(void)
{
	GI_voidEnable();
 4f8:	0e 94 95 01 	call	0x32a	; 0x32a <GI_voidEnable>
	RTOS_TMR_init();
 4fc:	0e 94 ae 02 	call	0x55c	; 0x55c <RTOS_TMR_init>
	RTOS_TMR_setCompareMatchValue(249); // RTOS Tick >> 1ms
 500:	89 ef       	ldi	r24, 0xF9	; 249
 502:	0e 94 c2 02 	call	0x584	; 0x584 <RTOS_TMR_setCompareMatchValue>
	RTOS_TMR_setCallBackCTC(&PRV_scheduler);
 506:	8a e3       	ldi	r24, 0x3A	; 58
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	0e 94 c4 02 	call	0x588	; 0x588 <RTOS_TMR_setCallBackCTC>
	RTOS_TMR_start();
 50e:	0e 94 b8 02 	call	0x570	; 0x570 <RTOS_TMR_start>
 512:	08 95       	ret

00000514 <RTOS_createTask>:
}


void RTOS_createTask(u8 priority ,u16 periodicity, void(*ptrToFun)(void))
{
	if((priority<RTOS_TASK_NUM)&&(ptrToFun!=NULL)&&(arrayOfTasks[priority].pFunTask==NULL))
 514:	84 30       	cpi	r24, 0x04	; 4
 516:	08 f5       	brcc	.+66     	; 0x55a <RTOS_createTask+0x46>
 518:	41 15       	cp	r20, r1
 51a:	51 05       	cpc	r21, r1
 51c:	f1 f0       	breq	.+60     	; 0x55a <RTOS_createTask+0x46>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	e8 0f       	add	r30, r24
 52c:	f9 1f       	adc	r31, r25
 52e:	e4 59       	subi	r30, 0x94	; 148
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	20 81       	ld	r18, Z
 534:	31 81       	ldd	r19, Z+1	; 0x01
 536:	23 2b       	or	r18, r19
 538:	81 f4       	brne	.+32     	; 0x55a <RTOS_createTask+0x46>
	{
		arrayOfTasks[priority].pFunTask        = ptrToFun;
 53a:	fc 01       	movw	r30, r24
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	8e 0f       	add	r24, r30
 546:	9f 1f       	adc	r25, r31
 548:	fc 01       	movw	r30, r24
 54a:	e4 59       	subi	r30, 0x94	; 148
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	51 83       	std	Z+1, r21	; 0x01
 550:	40 83       	st	Z, r20
		arrayOfTasks[priority].TaskPeriodicity = periodicity;
 552:	73 83       	std	Z+3, r23	; 0x03
 554:	62 83       	std	Z+2, r22	; 0x02
		arrayOfTasks[priority].TaskStatus      = RTOS_TASK_RESUMED;
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	84 83       	std	Z+4, r24	; 0x04
 55a:	08 95       	ret

0000055c <RTOS_TMR_init>:

void RTOS_TMR_stop(void)
{
	CLR_BIT(TCCR2,CS20);
	CLR_BIT(TCCR2,CS21);
	CLR_BIT(TCCR2,CS22);
 55c:	85 b5       	in	r24, 0x25	; 37
 55e:	8f 7b       	andi	r24, 0xBF	; 191
 560:	85 bd       	out	0x25, r24	; 37
 562:	85 b5       	in	r24, 0x25	; 37
 564:	88 60       	ori	r24, 0x08	; 8
 566:	85 bd       	out	0x25, r24	; 37
 568:	89 b7       	in	r24, 0x39	; 57
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	89 bf       	out	0x39, r24	; 57
 56e:	08 95       	ret

00000570 <RTOS_TMR_start>:
 570:	85 b5       	in	r24, 0x25	; 37
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	85 bd       	out	0x25, r24	; 37
 576:	85 b5       	in	r24, 0x25	; 37
 578:	8d 7f       	andi	r24, 0xFD	; 253
 57a:	85 bd       	out	0x25, r24	; 37
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	84 60       	ori	r24, 0x04	; 4
 580:	85 bd       	out	0x25, r24	; 37
 582:	08 95       	ret

00000584 <RTOS_TMR_setCompareMatchValue>:
}


void RTOS_TMR_setCompareMatchValue(u8 compareValue)
{
	OCR2 = compareValue;
 584:	83 bd       	out	0x23, r24	; 35
 586:	08 95       	ret

00000588 <RTOS_TMR_setCallBackCTC>:
}


void RTOS_TMR_setCallBackCTC(void(*ptrToFun)(void))
{
	if(ptrToFun!=NULL)
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	21 f0       	breq	.+8      	; 0x594 <RTOS_TMR_setCallBackCTC+0xc>
	{
		private_pCallBackCTC = ptrToFun;
 58c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <private_pCallBackCTC+0x1>
 590:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <private_pCallBackCTC>
 594:	08 95       	ret

00000596 <__vector_4>:


// ISR Timer2 output compare match
void __vector_4 (void) __attribute__ ((signal));
void __vector_4 (void)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	4f 93       	push	r20
 5a6:	5f 93       	push	r21
 5a8:	6f 93       	push	r22
 5aa:	7f 93       	push	r23
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	af 93       	push	r26
 5b2:	bf 93       	push	r27
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
	if(private_pCallBackCTC!=NULL)
 5b8:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <private_pCallBackCTC>
 5bc:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <private_pCallBackCTC+0x1>
 5c0:	30 97       	sbiw	r30, 0x00	; 0
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_4+0x30>
	{
		// Call action
		private_pCallBackCTC();
 5c4:	09 95       	icall
	}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <SSD_voidInit>:
			break;

		    case SSD_TWO:
#if SSD_TYPE == SSD_COM_CATHODE
			DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[copy_u8DesiredNumber]);
			DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_LOW);
 5e8:	6f ef       	ldi	r22, 0xFF	; 255
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_voidSetPortDirection>
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	62 e0       	ldi	r22, 0x02	; 2
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 604:	08 95       	ret

00000606 <SSD_voidDisplayMultiplexedNumber>:
	}
}


void SSD_voidDisplayMultiplexedNumber(u8 copy_u8DesiredNumber)
{
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
	if(copy_u8DesiredNumber<=99)
 60a:	84 36       	cpi	r24, 0x64	; 100
 60c:	08 f0       	brcs	.+2      	; 0x610 <SSD_voidDisplayMultiplexedNumber+0xa>
 60e:	4e c0       	rjmp	.+156    	; 0x6ac <SSD_voidDisplayMultiplexedNumber+0xa6>
	{
		u8 local_u8Ones = copy_u8DesiredNumber%10;
 610:	9d ec       	ldi	r25, 0xCD	; 205
 612:	89 9f       	mul	r24, r25
 614:	91 2d       	mov	r25, r1
 616:	11 24       	eor	r1, r1
 618:	c9 2f       	mov	r28, r25
 61a:	c6 95       	lsr	r28
 61c:	c6 95       	lsr	r28
 61e:	c6 95       	lsr	r28
 620:	ec 2f       	mov	r30, r28
 622:	ee 0f       	add	r30, r30
 624:	ce 2f       	mov	r28, r30
 626:	cc 0f       	add	r28, r28
 628:	cc 0f       	add	r28, r28
 62a:	ec 0f       	add	r30, r28
 62c:	c8 2f       	mov	r28, r24
 62e:	ce 1b       	sub	r28, r30
		u8 local_u8Tens = copy_u8DesiredNumber/10;
 630:	d9 2f       	mov	r29, r25
 632:	d6 95       	lsr	r29
 634:	d6 95       	lsr	r29
 636:	d6 95       	lsr	r29

#if SSD_TYPE == SSD_COM_CATHODE
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_HIGH);
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_HIGH);
 642:	41 e0       	ldi	r20, 0x01	; 1
 644:	62 e0       	ldi	r22, 0x02	; 2
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
		DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Tens]);
 64c:	ed 2f       	mov	r30, r29
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	e0 5a       	subi	r30, 0xA0	; 160
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	60 81       	ld	r22, Z
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 83 01 	call	0x306	; 0x306 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
 666:	8f e3       	ldi	r24, 0x3F	; 63
 668:	9c e9       	ldi	r25, 0x9C	; 156
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <SSD_voidDisplayMultiplexedNumber+0x64>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <SSD_voidDisplayMultiplexedNumber+0x6a>
 670:	00 00       	nop
		_delay_ms(10);
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_HIGH);
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>

		DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Ones]);
 67c:	ec 2f       	mov	r30, r28
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	e0 5a       	subi	r30, 0xA0	; 160
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	60 81       	ld	r22, Z
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 83 01 	call	0x306	; 0x306 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_LOW);
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
 696:	8f e3       	ldi	r24, 0x3F	; 63
 698:	9c e9       	ldi	r25, 0x9C	; 156
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <SSD_voidDisplayMultiplexedNumber+0x94>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <SSD_voidDisplayMultiplexedNumber+0x9a>
 6a0:	00 00       	nop
		_delay_ms(10);
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_HIGH);
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	62 e0       	ldi	r22, 0x02	; 2
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	}
	else
	{
		// return Error state
	}
}
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <__udivmodhi4>:
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	51 e1       	ldi	r21, 0x11	; 17
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__udivmodhi4_ep>

000006ba <__udivmodhi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	a6 17       	cp	r26, r22
 6c0:	b7 07       	cpc	r27, r23
 6c2:	10 f0       	brcs	.+4      	; 0x6c8 <__udivmodhi4_ep>
 6c4:	a6 1b       	sub	r26, r22
 6c6:	b7 0b       	sbc	r27, r23

000006c8 <__udivmodhi4_ep>:
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	5a 95       	dec	r21
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__udivmodhi4_loop>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
