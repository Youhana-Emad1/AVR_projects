
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000004ec  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d2  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a98  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00002c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000646  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa7  00000000  00000000  000034aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4b 02 	call	0x496	; 0x496 <main>
  7a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinDirection<=DIO_PIN_OUTPUT))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_voidSetPinDirection+0x6>
  86:	7e c0       	rjmp	.+252    	; 0x184 <DIO_voidSetPinDirection+0x102>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_voidSetPinDirection+0xc>
  8c:	7b c0       	rjmp	.+246    	; 0x184 <DIO_voidSetPinDirection+0x102>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_voidSetPinDirection+0x12>
  92:	78 c0       	rjmp	.+240    	; 0x184 <DIO_voidSetPinDirection+0x102>
	{
		switch(copy_u8PortId)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	19 f1       	breq	.+70     	; 0xde <DIO_voidSetPinDirection+0x5c>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_voidSetPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	e1 f1       	breq	.+120    	; 0x116 <DIO_voidSetPinDirection+0x94>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_voidSetPinDirection+0x22>
  a2:	55 c0       	rjmp	.+170    	; 0x14e <DIO_voidSetPinDirection+0xcc>
  a4:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinDirection)
  a6:	44 23       	and	r20, r20
  a8:	19 f0       	breq	.+6      	; 0xb0 <DIO_voidSetPinDirection+0x2e>
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	69 f0       	breq	.+26     	; 0xc8 <DIO_voidSetPinDirection+0x46>
  ae:	08 95       	ret
			{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG, copy_u8PinId);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_voidSetPinDirection+0x3a>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_voidSetPinDirection+0x36>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	8a bb       	out	0x1a, r24	; 26
				break;
  c6:	08 95       	ret

			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG, copy_u8PinId);
  c8:	2a b3       	in	r18, 0x1a	; 26
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	8a bb       	out	0x1a, r24	; 26
				break;
  dc:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinDirection)
  de:	44 23       	and	r20, r20
  e0:	19 f0       	breq	.+6      	; 0xe8 <DIO_voidSetPinDirection+0x66>
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f0       	breq	.+26     	; 0x100 <DIO_voidSetPinDirection+0x7e>
  e6:	08 95       	ret
				{
				case DIO_PIN_INPUT:
					CLR_BIT(DDRB_REG, copy_u8PinId);
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDirection+0x72>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDirection+0x6e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
					break;
  fe:	08 95       	ret

				case DIO_PIN_OUTPUT:
					SET_BIT(DDRB_REG, copy_u8PinId);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x8a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x86>
 110:	82 2b       	or	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
					break;
 114:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinDirection)
 116:	44 23       	and	r20, r20
 118:	19 f0       	breq	.+6      	; 0x120 <DIO_voidSetPinDirection+0x9e>
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	69 f0       	breq	.+26     	; 0x138 <DIO_voidSetPinDirection+0xb6>
 11e:	08 95       	ret
					{
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG, copy_u8PinId);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0xa6>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
						break;
 136:	08 95       	ret

					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG, copy_u8PinId);
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0xbe>
 148:	82 2b       	or	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
						break;
 14c:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinDirection)
 14e:	44 23       	and	r20, r20
 150:	19 f0       	breq	.+6      	; 0x158 <DIO_voidSetPinDirection+0xd6>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	69 f0       	breq	.+26     	; 0x170 <DIO_voidSetPinDirection+0xee>
 156:	08 95       	ret
						{
						case DIO_PIN_INPUT:
							CLR_BIT(DDRD_REG, copy_u8PinId);
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinDirection+0xe2>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinDirection+0xde>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
							break;
 16e:	08 95       	ret

						case DIO_PIN_OUTPUT:
							SET_BIT(DDRD_REG, copy_u8PinId);
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDirection+0xfa>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDirection+0xf6>
 180:	82 2b       	or	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
 184:	08 95       	ret

00000186 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinValue<=DIO_PIN_HIGH))
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_voidSetPinValue+0x6>
 18a:	7e c0       	rjmp	.+252    	; 0x288 <DIO_voidSetPinValue+0x102>
 18c:	68 30       	cpi	r22, 0x08	; 8
 18e:	08 f0       	brcs	.+2      	; 0x192 <DIO_voidSetPinValue+0xc>
 190:	7b c0       	rjmp	.+246    	; 0x288 <DIO_voidSetPinValue+0x102>
 192:	42 30       	cpi	r20, 0x02	; 2
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_voidSetPinValue+0x12>
 196:	78 c0       	rjmp	.+240    	; 0x288 <DIO_voidSetPinValue+0x102>
	{
		switch(copy_u8PortId)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	19 f1       	breq	.+70     	; 0x1e2 <DIO_voidSetPinValue+0x5c>
 19c:	30 f0       	brcs	.+12     	; 0x1aa <DIO_voidSetPinValue+0x24>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	e1 f1       	breq	.+120    	; 0x21a <DIO_voidSetPinValue+0x94>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_voidSetPinValue+0x22>
 1a6:	55 c0       	rjmp	.+170    	; 0x252 <DIO_voidSetPinValue+0xcc>
 1a8:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinValue)
 1aa:	44 23       	and	r20, r20
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <DIO_voidSetPinValue+0x2e>
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	69 f0       	breq	.+26     	; 0x1cc <DIO_voidSetPinValue+0x46>
 1b2:	08 95       	ret
			{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
 1b4:	2b b3       	in	r18, 0x1b	; 27
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_voidSetPinValue+0x3a>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_voidSetPinValue+0x36>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	8b bb       	out	0x1b, r24	; 27
				break;
 1ca:	08 95       	ret

			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_voidSetPinValue+0x52>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_voidSetPinValue+0x4e>
 1dc:	82 2b       	or	r24, r18
 1de:	8b bb       	out	0x1b, r24	; 27
				break;
 1e0:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinValue)
 1e2:	44 23       	and	r20, r20
 1e4:	19 f0       	breq	.+6      	; 0x1ec <DIO_voidSetPinValue+0x66>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	69 f0       	breq	.+26     	; 0x204 <DIO_voidSetPinValue+0x7e>
 1ea:	08 95       	ret
				{
				case DIO_PIN_LOW:
					CLR_BIT(PORTB_REG, copy_u8PinId);
 1ec:	28 b3       	in	r18, 0x18	; 24
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_voidSetPinValue+0x72>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_voidSetPinValue+0x6e>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
					break;
 202:	08 95       	ret

				case DIO_PIN_HIGH:
					SET_BIT(PORTB_REG, copy_u8PinId);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_voidSetPinValue+0x8a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_voidSetPinValue+0x86>
 214:	82 2b       	or	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
					break;
 218:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinValue)
 21a:	44 23       	and	r20, r20
 21c:	19 f0       	breq	.+6      	; 0x224 <DIO_voidSetPinValue+0x9e>
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	69 f0       	breq	.+26     	; 0x23c <DIO_voidSetPinValue+0xb6>
 222:	08 95       	ret
					{
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG, copy_u8PinId);
 224:	25 b3       	in	r18, 0x15	; 21
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_voidSetPinValue+0xaa>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_voidSetPinValue+0xa6>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
						break;
 23a:	08 95       	ret

					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG, copy_u8PinId);
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_voidSetPinValue+0xc2>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_voidSetPinValue+0xbe>
 24c:	82 2b       	or	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
						break;
 250:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinValue)
 252:	44 23       	and	r20, r20
 254:	19 f0       	breq	.+6      	; 0x25c <DIO_voidSetPinValue+0xd6>
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	69 f0       	breq	.+26     	; 0x274 <DIO_voidSetPinValue+0xee>
 25a:	08 95       	ret
						{
						case DIO_PIN_LOW:
							CLR_BIT(PORTD_REG, copy_u8PinId);
 25c:	22 b3       	in	r18, 0x12	; 18
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidSetPinValue+0xe2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidSetPinValue+0xde>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	82 bb       	out	0x12, r24	; 18
							break;
 272:	08 95       	ret

						case DIO_PIN_HIGH:
							SET_BIT(PORTD_REG, copy_u8PinId);
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_voidSetPinValue+0xfa>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_voidSetPinValue+0xf6>
 284:	82 2b       	or	r24, r18
 286:	82 bb       	out	0x12, r24	; 18
 288:	08 95       	ret

0000028a <PRV_voidWriteHalfPort>:
		{
			LCD_voidDisplayChar((local_u32ReversedNumber%10) + '0');
			local_u32ReversedNumber /= 10;
		} while (local_u32ReversedNumber != 1);
	}
}
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	80 fd       	sbrc	r24, 0
 290:	06 c0       	rjmp	.+12     	; 0x29e <PRV_voidWriteHalfPort+0x14>
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	64 e0       	ldi	r22, 0x04	; 4
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <PRV_voidWriteHalfPort+0x1e>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2a8:	c1 fd       	sbrc	r28, 1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <PRV_voidWriteHalfPort+0x2e>
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <PRV_voidWriteHalfPort+0x38>
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2c2:	c2 fd       	sbrc	r28, 2
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <PRV_voidWriteHalfPort+0x48>
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	66 e0       	ldi	r22, 0x06	; 6
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <PRV_voidWriteHalfPort+0x52>
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2dc:	c3 fd       	sbrc	r28, 3
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <PRV_voidWriteHalfPort+0x62>
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	67 e0       	ldi	r22, 0x07	; 7
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <PRV_voidWriteHalfPort+0x6c>
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <PRV_voidEnableTriggerWrite>:
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <PRV_voidEnableTriggerWrite+0xe>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <PRV_voidEnableTriggerWrite+0x14>
 30e:	00 00       	nop
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 31a:	08 95       	ret

0000031c <LCD_voidDisplayChar>:
 31c:	cf 93       	push	r28
 31e:	c8 2f       	mov	r28, r24
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 334:	8c 2f       	mov	r24, r28
 336:	82 95       	swap	r24
 338:	8f 70       	andi	r24, 0x0F	; 15
 33a:	0e 94 45 01 	call	0x28a	; 0x28a <PRV_voidWriteHalfPort>
 33e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PRV_voidEnableTriggerWrite>
 342:	8c 2f       	mov	r24, r28
 344:	0e 94 45 01 	call	0x28a	; 0x28a <PRV_voidWriteHalfPort>
 348:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PRV_voidEnableTriggerWrite>
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <LCD_voidSendCommand>:
 350:	cf 93       	push	r28
 352:	c8 2f       	mov	r28, r24
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 368:	8c 2f       	mov	r24, r28
 36a:	82 95       	swap	r24
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	0e 94 45 01 	call	0x28a	; 0x28a <PRV_voidWriteHalfPort>
 372:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PRV_voidEnableTriggerWrite>
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 45 01 	call	0x28a	; 0x28a <PRV_voidWriteHalfPort>
 37c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PRV_voidEnableTriggerWrite>
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <LCD_voidInit>:
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	65 e0       	ldi	r22, 0x05	; 5
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	67 e0       	ldi	r22, 0x07	; 7
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
 3ca:	2f e7       	ldi	r18, 0x7F	; 127
 3cc:	85 eb       	ldi	r24, 0xB5	; 181
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <LCD_voidInit+0x4c>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_voidInit+0x56>
 3da:	00 00       	nop
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_voidSetPinValue>
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 45 01 	call	0x28a	; 0x28a <PRV_voidWriteHalfPort>
 3f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <PRV_voidEnableTriggerWrite>
 3fa:	88 e2       	ldi	r24, 0x28	; 40
 3fc:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 400:	20 ef       	ldi	r18, 0xF0	; 240
 402:	2a 95       	dec	r18
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 40c:	80 ef       	ldi	r24, 0xF0	; 240
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 418:	8f e3       	ldi	r24, 0x3F	; 63
 41a:	9f e1       	ldi	r25, 0x1F	; 31
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 42a:	08 95       	ret

0000042c <LCD_voidDisplayString>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	00 97       	sbiw	r24, 0x00	; 0
 434:	29 f4       	brne	.+10     	; 0x440 <LCD_voidDisplayString+0x14>
 436:	0c c0       	rjmp	.+24     	; 0x450 <LCD_voidDisplayString+0x24>
 438:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_voidDisplayChar>
 43c:	cf 5f       	subi	r28, 0xFF	; 255
 43e:	02 c0       	rjmp	.+4      	; 0x444 <LCD_voidDisplayString+0x18>
 440:	8c 01       	movw	r16, r24
 442:	c0 e0       	ldi	r28, 0x00	; 0
 444:	f8 01       	movw	r30, r16
 446:	ec 0f       	add	r30, r28
 448:	f1 1d       	adc	r31, r1
 44a:	80 81       	ld	r24, Z
 44c:	81 11       	cpse	r24, r1
 44e:	f4 cf       	rjmp	.-24     	; 0x438 <LCD_voidDisplayString+0xc>
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <LCD_voidClear>:
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 45e:	8f e3       	ldi	r24, 0x3F	; 63
 460:	9f e1       	ldi	r25, 0x1F	; 31
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <LCD_voidClear+0xa>
 466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_voidClear+0x10>
 468:	00 00       	nop
 46a:	08 95       	ret

0000046c <LCD_voidGoToSpecificPosition>:


void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
{
	switch(copy_u8LineNumber)
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <LCD_voidGoToSpecificPosition+0xa>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	49 f0       	breq	.+18     	; 0x486 <LCD_voidGoToSpecificPosition+0x1a>
 474:	08 95       	ret
	{
	case LCD_LINE_ONE:
		LCD_voidSendCommand(0b10000000+copy_u8Position); //0x80+copy_u8Position
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	86 0f       	add	r24, r22
 47a:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47e:	80 ef       	ldi	r24, 0xF0	; 240
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <LCD_voidGoToSpecificPosition+0x14>
 484:	08 95       	ret
		_delay_us(45);
		break;

	case LCD_LINE_TWO:
		LCD_voidSendCommand(0b11000000+copy_u8Position); //0xC0+copy_u8Position
 486:	80 ec       	ldi	r24, 0xC0	; 192
 488:	86 0f       	add	r24, r22
 48a:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_voidSendCommand>
 48e:	80 ef       	ldi	r24, 0xF0	; 240
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <LCD_voidGoToSpecificPosition+0x24>
 494:	08 95       	ret

00000496 <main>:
#include "LCD_config.h"
#include "LCD_private.h"

int main(void)
{
LCD_voidInit();
 496:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_voidInit>
    while (1) 
    {
		LCD_voidClear();
 49a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_voidClear>
		LCD_voidDisplayString("Hello World");
 49e:	80 e6       	ldi	r24, 0x60	; 96
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	83 e2       	ldi	r24, 0x23	; 35
 4aa:	94 ef       	ldi	r25, 0xF4	; 244
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0x16>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0x20>
 4b6:	00 00       	nop
		_delay_ms(5000);
		LCD_voidClear();
 4b8:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_voidClear>
		LCD_voidDisplayString("Trust me I'm an:");
 4bc:	8c e6       	ldi	r24, 0x6C	; 108
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(LCD_LINE_TWO,0);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 36 02 	call	0x46c	; 0x46c <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("' Engineer !!! '");
 4cc:	8d e7       	ldi	r24, 0x7D	; 125
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_voidDisplayString>
 4d4:	2f ef       	ldi	r18, 0xFF	; 255
 4d6:	83 e2       	ldi	r24, 0x23	; 35
 4d8:	94 ef       	ldi	r25, 0xF4	; 244
 4da:	21 50       	subi	r18, 0x01	; 1
 4dc:	80 40       	sbci	r24, 0x00	; 0
 4de:	90 40       	sbci	r25, 0x00	; 0
 4e0:	e1 f7       	brne	.-8      	; 0x4da <main+0x44>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <main+0x4e>
 4e4:	00 00       	nop
 4e6:	d9 cf       	rjmp	.-78     	; 0x49a <main+0x4>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
