
free_rtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002454  000024e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800072  00800072  000024fa  2**0
                  ALLOC
  3 .stab         00001d04  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da9  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000050e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 11 	call	0x2368	; 0x2368 <main>
      8a:	0c 94 28 12 	jmp	0x2450	; 0x2450 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinDirection<=DIO_PIN_OUTPUT))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_voidSetPinDirection+0x22>
     b66:	09 c1       	rjmp	.+530    	; 0xd7a <DIO_voidSetPinDirection+0x234>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <DIO_voidSetPinDirection+0x2a>
     b6e:	05 c1       	rjmp	.+522    	; 0xd7a <DIO_voidSetPinDirection+0x234>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	08 f0       	brcs	.+2      	; 0xb78 <DIO_voidSetPinDirection+0x32>
     b76:	01 c1       	rjmp	.+514    	; 0xd7a <DIO_voidSetPinDirection+0x234>
	{
		switch(copy_u8PortId)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	8c 85       	ldd	r24, Y+12	; 0x0c
     b84:	9d 85       	ldd	r25, Y+13	; 0x0d
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_voidSetPinDirection+0x48>
     b8c:	4f c0       	rjmp	.+158    	; 0xc2c <DIO_voidSetPinDirection+0xe6>
     b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     b90:	3d 85       	ldd	r19, Y+13	; 0x0d
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <DIO_voidSetPinDirection+0x5c>
     b98:	8c 85       	ldd	r24, Y+12	; 0x0c
     b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	71 f0       	breq	.+28     	; 0xbbc <DIO_voidSetPinDirection+0x76>
     ba0:	ec c0       	rjmp	.+472    	; 0xd7a <DIO_voidSetPinDirection+0x234>
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <DIO_voidSetPinDirection+0x68>
     bac:	77 c0       	rjmp	.+238    	; 0xc9c <DIO_voidSetPinDirection+0x156>
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <DIO_voidSetPinDirection+0x74>
     bb8:	a9 c0       	rjmp	.+338    	; 0xd0c <DIO_voidSetPinDirection+0x1c6>
     bba:	df c0       	rjmp	.+446    	; 0xd7a <DIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch(copy_u8PinDirection)
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3b 87       	std	Y+11, r19	; 0x0b
     bc4:	2a 87       	std	Y+10, r18	; 0x0a
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	31 f0       	breq	.+12     	; 0xbda <DIO_voidSetPinDirection+0x94>
     bce:	2a 85       	ldd	r18, Y+10	; 0x0a
     bd0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bd2:	21 30       	cpi	r18, 0x01	; 1
     bd4:	31 05       	cpc	r19, r1
     bd6:	b1 f0       	breq	.+44     	; 0xc04 <DIO_voidSetPinDirection+0xbe>
     bd8:	d0 c0       	rjmp	.+416    	; 0xd7a <DIO_voidSetPinDirection+0x234>
			{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG, copy_u8PinId);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_voidSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_voidSetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	bb c0       	rjmp	.+374    	; 0xd7a <DIO_voidSetPinDirection+0x234>
				break;

			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG, copy_u8PinId);
     c04:	aa e3       	ldi	r26, 0x3A	; 58
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_voidSetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_voidSetPinDirection+0xd8>
     c26:	84 2b       	or	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	a7 c0       	rjmp	.+334    	; 0xd7a <DIO_voidSetPinDirection+0x234>
				break;
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinDirection)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	39 87       	std	Y+9, r19	; 0x09
     c34:	28 87       	std	Y+8, r18	; 0x08
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	31 f0       	breq	.+12     	; 0xc4a <DIO_voidSetPinDirection+0x104>
     c3e:	28 85       	ldd	r18, Y+8	; 0x08
     c40:	39 85       	ldd	r19, Y+9	; 0x09
     c42:	21 30       	cpi	r18, 0x01	; 1
     c44:	31 05       	cpc	r19, r1
     c46:	b1 f0       	breq	.+44     	; 0xc74 <DIO_voidSetPinDirection+0x12e>
     c48:	98 c0       	rjmp	.+304    	; 0xd7a <DIO_voidSetPinDirection+0x234>
				{
				case DIO_PIN_INPUT:
					CLR_BIT(DDRB_REG, copy_u8PinId);
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_voidSetPinDirection+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_voidSetPinDirection+0x11e>
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8c 93       	st	X, r24
     c72:	83 c0       	rjmp	.+262    	; 0xd7a <DIO_voidSetPinDirection+0x234>
					break;

				case DIO_PIN_OUTPUT:
					SET_BIT(DDRB_REG, copy_u8PinId);
     c74:	a7 e3       	ldi	r26, 0x37	; 55
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e3       	ldi	r30, 0x37	; 55
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_voidSetPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_voidSetPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6f c0       	rjmp	.+222    	; 0xd7a <DIO_voidSetPinDirection+0x234>
					break;
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinDirection)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	31 f0       	breq	.+12     	; 0xcba <DIO_voidSetPinDirection+0x174>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	b1 f0       	breq	.+44     	; 0xce4 <DIO_voidSetPinDirection+0x19e>
     cb8:	60 c0       	rjmp	.+192    	; 0xd7a <DIO_voidSetPinDirection+0x234>
					{
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG, copy_u8PinId);
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_voidSetPinDirection+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_voidSetPinDirection+0x18e>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	4b c0       	rjmp	.+150    	; 0xd7a <DIO_voidSetPinDirection+0x234>
						break;

					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG, copy_u8PinId);
     ce4:	a4 e3       	ldi	r26, 0x34	; 52
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e4 e3       	ldi	r30, 0x34	; 52
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_voidSetPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_voidSetPinDirection+0x1b8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	37 c0       	rjmp	.+110    	; 0xd7a <DIO_voidSetPinDirection+0x234>
						break;
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinDirection)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	31 f0       	breq	.+12     	; 0xd2a <DIO_voidSetPinDirection+0x1e4>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	b1 f0       	breq	.+44     	; 0xd54 <DIO_voidSetPinDirection+0x20e>
     d28:	28 c0       	rjmp	.+80     	; 0xd7a <DIO_voidSetPinDirection+0x234>
						{
						case DIO_PIN_INPUT:
							CLR_BIT(DDRD_REG, copy_u8PinId);
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_voidSetPinDirection+0x202>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_voidSetPinDirection+0x1fe>
     d4c:	80 95       	com	r24
     d4e:	84 23       	and	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <DIO_voidSetPinDirection+0x234>
							break;

						case DIO_PIN_OUTPUT:
							SET_BIT(DDRD_REG, copy_u8PinId);
     d54:	a1 e3       	ldi	r26, 0x31	; 49
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e1 e3       	ldi	r30, 0x31	; 49
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_voidSetPinDirection+0x22c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_voidSetPinDirection+0x228>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
	}
	else
	{
		// return Error State
	}
}
     d7a:	2d 96       	adiw	r28, 0x0d	; 13
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <DIO_voidSetPinValue>:


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2d 97       	sbiw	r28, 0x0d	; 13
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6a 83       	std	Y+2, r22	; 0x02
     da4:	4b 83       	std	Y+3, r20	; 0x03
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinValue<=DIO_PIN_HIGH))
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	08 f0       	brcs	.+2      	; 0xdae <DIO_voidSetPinValue+0x22>
     dac:	09 c1       	rjmp	.+530    	; 0xfc0 <DIO_voidSetPinValue+0x234>
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <DIO_voidSetPinValue+0x2a>
     db4:	05 c1       	rjmp	.+522    	; 0xfc0 <DIO_voidSetPinValue+0x234>
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	08 f0       	brcs	.+2      	; 0xdbe <DIO_voidSetPinValue+0x32>
     dbc:	01 c1       	rjmp	.+514    	; 0xfc0 <DIO_voidSetPinValue+0x234>
	{
		switch(copy_u8PortId)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 87       	std	Y+13, r19	; 0x0d
     dc6:	2c 87       	std	Y+12, r18	; 0x0c
     dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dca:	9d 85       	ldd	r25, Y+13	; 0x0d
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DIO_voidSetPinValue+0x48>
     dd2:	4f c0       	rjmp	.+158    	; 0xe72 <DIO_voidSetPinValue+0xe6>
     dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <DIO_voidSetPinValue+0x5c>
     dde:	8c 85       	ldd	r24, Y+12	; 0x0c
     de0:	9d 85       	ldd	r25, Y+13	; 0x0d
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	71 f0       	breq	.+28     	; 0xe02 <DIO_voidSetPinValue+0x76>
     de6:	ec c0       	rjmp	.+472    	; 0xfc0 <DIO_voidSetPinValue+0x234>
     de8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dea:	3d 85       	ldd	r19, Y+13	; 0x0d
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <DIO_voidSetPinValue+0x68>
     df2:	77 c0       	rjmp	.+238    	; 0xee2 <DIO_voidSetPinValue+0x156>
     df4:	8c 85       	ldd	r24, Y+12	; 0x0c
     df6:	9d 85       	ldd	r25, Y+13	; 0x0d
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <DIO_voidSetPinValue+0x74>
     dfe:	a9 c0       	rjmp	.+338    	; 0xf52 <DIO_voidSetPinValue+0x1c6>
     e00:	df c0       	rjmp	.+446    	; 0xfc0 <DIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch(copy_u8PinValue)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3b 87       	std	Y+11, r19	; 0x0b
     e0a:	2a 87       	std	Y+10, r18	; 0x0a
     e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	31 f0       	breq	.+12     	; 0xe20 <DIO_voidSetPinValue+0x94>
     e14:	2a 85       	ldd	r18, Y+10	; 0x0a
     e16:	3b 85       	ldd	r19, Y+11	; 0x0b
     e18:	21 30       	cpi	r18, 0x01	; 1
     e1a:	31 05       	cpc	r19, r1
     e1c:	b1 f0       	breq	.+44     	; 0xe4a <DIO_voidSetPinValue+0xbe>
     e1e:	d0 c0       	rjmp	.+416    	; 0xfc0 <DIO_voidSetPinValue+0x234>
			{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
     e20:	ab e3       	ldi	r26, 0x3B	; 59
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e3       	ldi	r30, 0x3B	; 59
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_voidSetPinValue+0xb2>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_voidSetPinValue+0xae>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	bb c0       	rjmp	.+374    	; 0xfc0 <DIO_voidSetPinValue+0x234>
				break;

			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
     e4a:	ab e3       	ldi	r26, 0x3B	; 59
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	eb e3       	ldi	r30, 0x3B	; 59
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_voidSetPinValue+0xdc>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_voidSetPinValue+0xd8>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	a7 c0       	rjmp	.+334    	; 0xfc0 <DIO_voidSetPinValue+0x234>
				break;
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinValue)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	39 87       	std	Y+9, r19	; 0x09
     e7a:	28 87       	std	Y+8, r18	; 0x08
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	99 85       	ldd	r25, Y+9	; 0x09
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	31 f0       	breq	.+12     	; 0xe90 <DIO_voidSetPinValue+0x104>
     e84:	28 85       	ldd	r18, Y+8	; 0x08
     e86:	39 85       	ldd	r19, Y+9	; 0x09
     e88:	21 30       	cpi	r18, 0x01	; 1
     e8a:	31 05       	cpc	r19, r1
     e8c:	b1 f0       	breq	.+44     	; 0xeba <DIO_voidSetPinValue+0x12e>
     e8e:	98 c0       	rjmp	.+304    	; 0xfc0 <DIO_voidSetPinValue+0x234>
				{
				case DIO_PIN_LOW:
					CLR_BIT(PORTB_REG, copy_u8PinId);
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinValue+0x122>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinValue+0x11e>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	83 c0       	rjmp	.+262    	; 0xfc0 <DIO_voidSetPinValue+0x234>
					break;

				case DIO_PIN_HIGH:
					SET_BIT(PORTB_REG, copy_u8PinId);
     eba:	a8 e3       	ldi	r26, 0x38	; 56
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e8 e3       	ldi	r30, 0x38	; 56
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_voidSetPinValue+0x14c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_voidSetPinValue+0x148>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	6f c0       	rjmp	.+222    	; 0xfc0 <DIO_voidSetPinValue+0x234>
					break;
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinValue)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	3f 83       	std	Y+7, r19	; 0x07
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	31 f0       	breq	.+12     	; 0xf00 <DIO_voidSetPinValue+0x174>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	21 30       	cpi	r18, 0x01	; 1
     efa:	31 05       	cpc	r19, r1
     efc:	b1 f0       	breq	.+44     	; 0xf2a <DIO_voidSetPinValue+0x19e>
     efe:	60 c0       	rjmp	.+192    	; 0xfc0 <DIO_voidSetPinValue+0x234>
					{
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG, copy_u8PinId);
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_voidSetPinValue+0x192>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_voidSetPinValue+0x18e>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	4b c0       	rjmp	.+150    	; 0xfc0 <DIO_voidSetPinValue+0x234>
						break;

					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG, copy_u8PinId);
     f2a:	a5 e3       	ldi	r26, 0x35	; 53
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e3       	ldi	r30, 0x35	; 53
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_voidSetPinValue+0x1bc>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_voidSetPinValue+0x1b8>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	37 c0       	rjmp	.+110    	; 0xfc0 <DIO_voidSetPinValue+0x234>
						break;
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinValue)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	31 f0       	breq	.+12     	; 0xf70 <DIO_voidSetPinValue+0x1e4>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	31 05       	cpc	r19, r1
     f6c:	b1 f0       	breq	.+44     	; 0xf9a <DIO_voidSetPinValue+0x20e>
     f6e:	28 c0       	rjmp	.+80     	; 0xfc0 <DIO_voidSetPinValue+0x234>
						{
						case DIO_PIN_LOW:
							CLR_BIT(PORTD_REG, copy_u8PinId);
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_voidSetPinValue+0x202>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_voidSetPinValue+0x1fe>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	13 c0       	rjmp	.+38     	; 0xfc0 <DIO_voidSetPinValue+0x234>
							break;

						case DIO_PIN_HIGH:
							SET_BIT(PORTD_REG, copy_u8PinId);
     f9a:	a2 e3       	ldi	r26, 0x32	; 50
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e2 e3       	ldi	r30, 0x32	; 50
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_voidSetPinValue+0x22c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_voidSetPinValue+0x228>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
	}
	else
	{
		// return Error State
	}
}
     fc0:	2d 96       	adiw	r28, 0x0d	; 13
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <DIO_voidGetPinValue>:


void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_voidGetPinValue+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_voidGetPinValue+0x8>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <DIO_voidGetPinValue+0xa>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	6a 83       	std	Y+2, r22	; 0x02
     fe4:	5c 83       	std	Y+4, r21	; 0x04
     fe6:	4b 83       	std	Y+3, r20	; 0x03
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_pu8PinValue != NULL))
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	84 30       	cpi	r24, 0x04	; 4
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_voidGetPinValue+0x1e>
     fee:	79 c0       	rjmp	.+242    	; 0x10e2 <DIO_voidGetPinValue+0x110>
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 30       	cpi	r24, 0x08	; 8
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <DIO_voidGetPinValue+0x26>
     ff6:	75 c0       	rjmp	.+234    	; 0x10e2 <DIO_voidGetPinValue+0x110>
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_voidGetPinValue+0x30>
    1000:	70 c0       	rjmp	.+224    	; 0x10e2 <DIO_voidGetPinValue+0x110>
	{
		switch(copy_u8PortId)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	3e 83       	std	Y+6, r19	; 0x06
    100a:	2d 83       	std	Y+5, r18	; 0x05
    100c:	4d 81       	ldd	r20, Y+5	; 0x05
    100e:	5e 81       	ldd	r21, Y+6	; 0x06
    1010:	41 30       	cpi	r20, 0x01	; 1
    1012:	51 05       	cpc	r21, r1
    1014:	59 f1       	breq	.+86     	; 0x106c <DIO_voidGetPinValue+0x9a>
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	91 05       	cpc	r25, r1
    101e:	34 f4       	brge	.+12     	; 0x102c <DIO_voidGetPinValue+0x5a>
    1020:	2d 81       	ldd	r18, Y+5	; 0x05
    1022:	3e 81       	ldd	r19, Y+6	; 0x06
    1024:	21 15       	cp	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	69 f0       	breq	.+26     	; 0x1044 <DIO_voidGetPinValue+0x72>
    102a:	5b c0       	rjmp	.+182    	; 0x10e2 <DIO_voidGetPinValue+0x110>
    102c:	4d 81       	ldd	r20, Y+5	; 0x05
    102e:	5e 81       	ldd	r21, Y+6	; 0x06
    1030:	42 30       	cpi	r20, 0x02	; 2
    1032:	51 05       	cpc	r21, r1
    1034:	79 f1       	breq	.+94     	; 0x1094 <DIO_voidGetPinValue+0xc2>
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <DIO_voidGetPinValue+0x70>
    1040:	3d c0       	rjmp	.+122    	; 0x10bc <DIO_voidGetPinValue+0xea>
    1042:	4f c0       	rjmp	.+158    	; 0x10e2 <DIO_voidGetPinValue+0x110>
		{
		case DIO_PORTA:
			*copy_pu8PinValue = GET_BIT(PINA_REG, copy_u8PinId);
    1044:	e9 e3       	ldi	r30, 0x39	; 57
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_voidGetPinValue+0x8a>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_voidGetPinValue+0x86>
    1060:	ca 01       	movw	r24, r20
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	80 83       	st	Z, r24
    106a:	3b c0       	rjmp	.+118    	; 0x10e2 <DIO_voidGetPinValue+0x110>
			break;

		case DIO_PORTB:
			*copy_pu8PinValue = GET_BIT(PINB_REG, copy_u8PinId);
    106c:	e6 e3       	ldi	r30, 0x36	; 54
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_voidGetPinValue+0xb2>
    1080:	55 95       	asr	r21
    1082:	47 95       	ror	r20
    1084:	8a 95       	dec	r24
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_voidGetPinValue+0xae>
    1088:	ca 01       	movw	r24, r20
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	eb 81       	ldd	r30, Y+3	; 0x03
    108e:	fc 81       	ldd	r31, Y+4	; 0x04
    1090:	80 83       	st	Z, r24
    1092:	27 c0       	rjmp	.+78     	; 0x10e2 <DIO_voidGetPinValue+0x110>
			break;

		case DIO_PORTC:
			*copy_pu8PinValue = GET_BIT(PINC_REG, copy_u8PinId);
    1094:	e3 e3       	ldi	r30, 0x33	; 51
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a9 01       	movw	r20, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_voidGetPinValue+0xda>
    10a8:	55 95       	asr	r21
    10aa:	47 95       	ror	r20
    10ac:	8a 95       	dec	r24
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_voidGetPinValue+0xd6>
    10b0:	ca 01       	movw	r24, r20
    10b2:	81 70       	andi	r24, 0x01	; 1
    10b4:	eb 81       	ldd	r30, Y+3	; 0x03
    10b6:	fc 81       	ldd	r31, Y+4	; 0x04
    10b8:	80 83       	st	Z, r24
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <DIO_voidGetPinValue+0x110>
			break;

		case DIO_PORTD:
			*copy_pu8PinValue = GET_BIT(PIND_REG, copy_u8PinId);
    10bc:	e0 e3       	ldi	r30, 0x30	; 48
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_voidGetPinValue+0x102>
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_voidGetPinValue+0xfe>
    10d8:	ca 01       	movw	r24, r20
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	eb 81       	ldd	r30, Y+3	; 0x03
    10de:	fc 81       	ldd	r31, Y+4	; 0x04
    10e0:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    10e2:	26 96       	adiw	r28, 0x06	; 6
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <DIO_voidTogglePinValue+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <DIO_voidTogglePinValue+0x8>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	08 f0       	brcs	.+2      	; 0x110c <DIO_voidTogglePinValue+0x18>
    110a:	72 c0       	rjmp	.+228    	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	08 f0       	brcs	.+2      	; 0x1114 <DIO_voidTogglePinValue+0x20>
    1112:	6e c0       	rjmp	.+220    	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
	{
		switch(copy_u8PortId)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3c 83       	std	Y+4, r19	; 0x04
    111c:	2b 83       	std	Y+3, r18	; 0x03
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	49 f1       	breq	.+82     	; 0x117a <DIO_voidTogglePinValue+0x86>
    1128:	2b 81       	ldd	r18, Y+3	; 0x03
    112a:	3c 81       	ldd	r19, Y+4	; 0x04
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	2c f4       	brge	.+10     	; 0x113c <DIO_voidTogglePinValue+0x48>
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	61 f0       	breq	.+24     	; 0x1152 <DIO_voidTogglePinValue+0x5e>
    113a:	5a c0       	rjmp	.+180    	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
    113c:	2b 81       	ldd	r18, Y+3	; 0x03
    113e:	3c 81       	ldd	r19, Y+4	; 0x04
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	71 f1       	breq	.+92     	; 0x11a2 <DIO_voidTogglePinValue+0xae>
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	e9 f1       	breq	.+122    	; 0x11ca <DIO_voidTogglePinValue+0xd6>
    1150:	4f c0       	rjmp	.+158    	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG, copy_u8PinId);
    1152:	ab e3       	ldi	r26, 0x3B	; 59
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_voidTogglePinValue+0x7c>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_voidTogglePinValue+0x78>
    1174:	84 27       	eor	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	3b c0       	rjmp	.+118    	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
			break;

		case DIO_PORTB:
			TOG_BIT(PORTB_REG, copy_u8PinId);
    117a:	a8 e3       	ldi	r26, 0x38	; 56
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e8 e3       	ldi	r30, 0x38	; 56
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_voidTogglePinValue+0xa4>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_voidTogglePinValue+0xa0>
    119c:	84 27       	eor	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	27 c0       	rjmp	.+78     	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
			break;

		case DIO_PORTC:
			TOG_BIT(PORTC_REG, copy_u8PinId);
    11a2:	a5 e3       	ldi	r26, 0x35	; 53
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_voidTogglePinValue+0xcc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_voidTogglePinValue+0xc8>
    11c4:	84 27       	eor	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <DIO_voidTogglePinValue+0xfc>
			break;

		case DIO_PORTD:
			TOG_BIT(PORTD_REG, copy_u8PinId);
    11ca:	a2 e3       	ldi	r26, 0x32	; 50
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e2 e3       	ldi	r30, 0x32	; 50
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_voidTogglePinValue+0xf4>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_voidTogglePinValue+0xf0>
    11ec:	84 27       	eor	r24, r20
    11ee:	8c 93       	st	X, r24
	}
	else
	{
		// return Error State
	}
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_voidActivePinInPullUpResistance>:


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_voidActivePinInPullUpResistance+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_voidActivePinInPullUpResistance+0x8>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	08 f0       	brcs	.+2      	; 0x1216 <DIO_voidActivePinInPullUpResistance+0x18>
    1214:	72 c0       	rjmp	.+228    	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	88 30       	cpi	r24, 0x08	; 8
    121a:	08 f0       	brcs	.+2      	; 0x121e <DIO_voidActivePinInPullUpResistance+0x20>
    121c:	6e c0       	rjmp	.+220    	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
	{
		switch(copy_u8PortId)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 83       	std	Y+4, r19	; 0x04
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	49 f1       	breq	.+82     	; 0x1284 <DIO_voidActivePinInPullUpResistance+0x86>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	2c f4       	brge	.+10     	; 0x1246 <DIO_voidActivePinInPullUpResistance+0x48>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	61 f0       	breq	.+24     	; 0x125c <DIO_voidActivePinInPullUpResistance+0x5e>
    1244:	5a c0       	rjmp	.+180    	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	71 f1       	breq	.+92     	; 0x12ac <DIO_voidActivePinInPullUpResistance+0xae>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	91 05       	cpc	r25, r1
    1258:	e9 f1       	breq	.+122    	; 0x12d4 <DIO_voidActivePinInPullUpResistance+0xd6>
    125a:	4f c0       	rjmp	.+158    	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
		{
		case DIO_PORTA:
			SET_BIT(PORTA_REG, copy_u8PinId);
    125c:	ab e3       	ldi	r26, 0x3B	; 59
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e3       	ldi	r30, 0x3B	; 59
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_voidActivePinInPullUpResistance+0x7c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_voidActivePinInPullUpResistance+0x78>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	3b c0       	rjmp	.+118    	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
			break;

		case DIO_PORTB:
			SET_BIT(PORTB_REG, copy_u8PinId);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_voidActivePinInPullUpResistance+0xa4>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_voidActivePinInPullUpResistance+0xa0>
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	27 c0       	rjmp	.+78     	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
			break;

		case DIO_PORTC:
			SET_BIT(PORTC_REG, copy_u8PinId);
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_voidActivePinInPullUpResistance+0xcc>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_voidActivePinInPullUpResistance+0xc8>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <DIO_voidActivePinInPullUpResistance+0xfc>
			break;

		case DIO_PORTD:
			SET_BIT(PORTD_REG, copy_u8PinId);
    12d4:	a2 e3       	ldi	r26, 0x32	; 50
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e2 e3       	ldi	r30, 0x32	; 50
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_voidActivePinInPullUpResistance+0xf4>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_voidActivePinInPullUpResistance+0xf0>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
	}
	else
	{
		// return Error State
	}
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <DIO_voidSetPortDirection>:


/* PORTS API's */
void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	2c 97       	sbiw	r28, 0x0c	; 12
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8PortId <= DIO_PORTD)&&((copy_u8PortDirection == DIO_PORT_OUTPUT) || (copy_u8PortDirection == DIO_PORT_INPUT)))
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	08 f0       	brcs	.+2      	; 0x1328 <DIO_voidSetPortDirection+0x20>
    1326:	86 c0       	rjmp	.+268    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	8f 3f       	cpi	r24, 0xFF	; 255
    132c:	21 f0       	breq	.+8      	; 0x1336 <DIO_voidSetPortDirection+0x2e>
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	09 f0       	breq	.+2      	; 0x1336 <DIO_voidSetPortDirection+0x2e>
    1334:	7f c0       	rjmp	.+254    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
	{
		switch(copy_u8PortId)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 87       	std	Y+12, r19	; 0x0c
    133e:	2b 87       	std	Y+11, r18	; 0x0b
    1340:	8b 85       	ldd	r24, Y+11	; 0x0b
    1342:	9c 85       	ldd	r25, Y+12	; 0x0c
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	71 f1       	breq	.+92     	; 0x13a6 <DIO_voidSetPortDirection+0x9e>
    134a:	2b 85       	ldd	r18, Y+11	; 0x0b
    134c:	3c 85       	ldd	r19, Y+12	; 0x0c
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <DIO_voidSetPortDirection+0x56>
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f0       	breq	.+26     	; 0x1376 <DIO_voidSetPortDirection+0x6e>
    135c:	6b c0       	rjmp	.+214    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
    135e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1360:	3c 85       	ldd	r19, Y+12	; 0x0c
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	b9 f1       	breq	.+110    	; 0x13d6 <DIO_voidSetPortDirection+0xce>
    1368:	8b 85       	ldd	r24, Y+11	; 0x0b
    136a:	9c 85       	ldd	r25, Y+12	; 0x0c
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_voidSetPortDirection+0x6c>
    1372:	49 c0       	rjmp	.+146    	; 0x1406 <DIO_voidSetPortDirection+0xfe>
    1374:	5f c0       	rjmp	.+190    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
		{
		case DIO_PORTA:
			switch(copy_u8PortDirection)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3a 87       	std	Y+10, r19	; 0x0a
    137e:	29 87       	std	Y+9, r18	; 0x09
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	31 f0       	breq	.+12     	; 0x1394 <DIO_voidSetPortDirection+0x8c>
    1388:	29 85       	ldd	r18, Y+9	; 0x09
    138a:	3a 85       	ldd	r19, Y+10	; 0x0a
    138c:	2f 3f       	cpi	r18, 0xFF	; 255
    138e:	31 05       	cpc	r19, r1
    1390:	29 f0       	breq	.+10     	; 0x139c <DIO_voidSetPortDirection+0x94>
    1392:	50 c0       	rjmp	.+160    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
			{
			case DIO_PORT_INPUT:
				DDRA_REG = 0x00;
    1394:	ea e3       	ldi	r30, 0x3A	; 58
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	10 82       	st	Z, r1
    139a:	4c c0       	rjmp	.+152    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
				break;

			case DIO_PORT_OUTPUT:
				DDRA_REG = 0xFF;
    139c:	ea e3       	ldi	r30, 0x3A	; 58
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	80 83       	st	Z, r24
    13a4:	47 c0       	rjmp	.+142    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
				break;
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PortDirection)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	38 87       	std	Y+8, r19	; 0x08
    13ae:	2f 83       	std	Y+7, r18	; 0x07
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <DIO_voidSetPortDirection+0xbc>
    13b8:	2f 81       	ldd	r18, Y+7	; 0x07
    13ba:	38 85       	ldd	r19, Y+8	; 0x08
    13bc:	2f 3f       	cpi	r18, 0xFF	; 255
    13be:	31 05       	cpc	r19, r1
    13c0:	29 f0       	breq	.+10     	; 0x13cc <DIO_voidSetPortDirection+0xc4>
    13c2:	38 c0       	rjmp	.+112    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
				{
				case DIO_PORT_INPUT:
					DDRB_REG = 0x00;
    13c4:	e7 e3       	ldi	r30, 0x37	; 55
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	10 82       	st	Z, r1
    13ca:	34 c0       	rjmp	.+104    	; 0x1434 <DIO_voidSetPortDirection+0x12c>
					break;

				case DIO_PORT_OUTPUT:
					DDRB_REG = 0xFF;
    13cc:	e7 e3       	ldi	r30, 0x37	; 55
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	2f c0       	rjmp	.+94     	; 0x1434 <DIO_voidSetPortDirection+0x12c>
					break;
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PortDirection)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3e 83       	std	Y+6, r19	; 0x06
    13de:	2d 83       	std	Y+5, r18	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	31 f0       	breq	.+12     	; 0x13f4 <DIO_voidSetPortDirection+0xec>
    13e8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ea:	3e 81       	ldd	r19, Y+6	; 0x06
    13ec:	2f 3f       	cpi	r18, 0xFF	; 255
    13ee:	31 05       	cpc	r19, r1
    13f0:	29 f0       	breq	.+10     	; 0x13fc <DIO_voidSetPortDirection+0xf4>
    13f2:	20 c0       	rjmp	.+64     	; 0x1434 <DIO_voidSetPortDirection+0x12c>
					{
					case DIO_PORT_INPUT:
						DDRC_REG = 0x00;
    13f4:	e4 e3       	ldi	r30, 0x34	; 52
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	10 82       	st	Z, r1
    13fa:	1c c0       	rjmp	.+56     	; 0x1434 <DIO_voidSetPortDirection+0x12c>
						break;

					case DIO_PORT_OUTPUT:
						DDRC_REG = 0xFF;
    13fc:	e4 e3       	ldi	r30, 0x34	; 52
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	80 83       	st	Z, r24
    1404:	17 c0       	rjmp	.+46     	; 0x1434 <DIO_voidSetPortDirection+0x12c>
						break;
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PortDirection)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	31 f0       	breq	.+12     	; 0x1424 <DIO_voidSetPortDirection+0x11c>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	2f 3f       	cpi	r18, 0xFF	; 255
    141e:	31 05       	cpc	r19, r1
    1420:	29 f0       	breq	.+10     	; 0x142c <DIO_voidSetPortDirection+0x124>
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <DIO_voidSetPortDirection+0x12c>
						{
						case DIO_PORT_INPUT:
							DDRD_REG = 0x00;
    1424:	e1 e3       	ldi	r30, 0x31	; 49
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	10 82       	st	Z, r1
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <DIO_voidSetPortDirection+0x12c>
							break;

						case DIO_PORT_OUTPUT:
							DDRD_REG = 0xFF;
    142c:	e1 e3       	ldi	r30, 0x31	; 49
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    1434:	2c 96       	adiw	r28, 0x0c	; 12
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <DIO_voidSetPortValue+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_voidSetPortValue+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8PortId <= DIO_PORTD))
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	90 f5       	brcc	.+100    	; 0x14c0 <DIO_voidSetPortValue+0x7a>
	{
		switch(copy_u8PortId)
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3c 83       	std	Y+4, r19	; 0x04
    1464:	2b 83       	std	Y+3, r18	; 0x03
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	d1 f0       	breq	.+52     	; 0x14a4 <DIO_voidSetPortValue+0x5e>
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <DIO_voidSetPortValue+0x3e>
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	61 f0       	breq	.+24     	; 0x149a <DIO_voidSetPortValue+0x54>
    1482:	1e c0       	rjmp	.+60     	; 0x14c0 <DIO_voidSetPortValue+0x7a>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	81 f0       	breq	.+32     	; 0x14ae <DIO_voidSetPortValue+0x68>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	81 f0       	breq	.+32     	; 0x14b8 <DIO_voidSetPortValue+0x72>
    1498:	13 c0       	rjmp	.+38     	; 0x14c0 <DIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = copy_u8PortValue;
    149a:	eb e3       	ldi	r30, 0x3B	; 59
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 83       	st	Z, r24
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <DIO_voidSetPortValue+0x7a>
			break;

		case DIO_PORTB:
			PORTB_REG = copy_u8PortValue;
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	80 83       	st	Z, r24
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <DIO_voidSetPortValue+0x7a>
			break;

		case DIO_PORTC:
			PORTC_REG = copy_u8PortValue;
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 83       	st	Z, r24
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <DIO_voidSetPortValue+0x7a>
			break;

		case DIO_PORTD:
			PORTD_REG = copy_u8PortValue;
    14b8:	e2 e3       	ldi	r30, 0x32	; 50
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_voidGetPortValue>:


void DIO_voidGetPortValue(u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_voidGetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_voidGetPortValue+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	7b 83       	std	Y+3, r23	; 0x03
    14e0:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8PortId <= DIO_PORTD) && (copy_pu8PortValue != NULL))
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_voidGetPortValue+0x1c>
    14e8:	3e c0       	rjmp	.+124    	; 0x1566 <DIO_voidGetPortValue+0x98>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	d1 f1       	breq	.+116    	; 0x1566 <DIO_voidGetPortValue+0x98>
	{
		switch(copy_u8PortId)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3d 83       	std	Y+5, r19	; 0x05
    14fa:	2c 83       	std	Y+4, r18	; 0x04
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e1 f0       	breq	.+56     	; 0x153e <DIO_voidGetPortValue+0x70>
    1506:	2c 81       	ldd	r18, Y+4	; 0x04
    1508:	3d 81       	ldd	r19, Y+5	; 0x05
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_voidGetPortValue+0x4c>
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_voidGetPortValue+0x62>
    1518:	26 c0       	rjmp	.+76     	; 0x1566 <DIO_voidGetPortValue+0x98>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	a1 f0       	breq	.+40     	; 0x154c <DIO_voidGetPortValue+0x7e>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	b1 f0       	breq	.+44     	; 0x155a <DIO_voidGetPortValue+0x8c>
    152e:	1b c0       	rjmp	.+54     	; 0x1566 <DIO_voidGetPortValue+0x98>
		{
		case DIO_PORTA:
			*copy_pu8PortValue = PINA_REG;
    1530:	e9 e3       	ldi	r30, 0x39	; 57
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	ea 81       	ldd	r30, Y+2	; 0x02
    1538:	fb 81       	ldd	r31, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <DIO_voidGetPortValue+0x98>
			break;

		case DIO_PORTB:
			*copy_pu8PortValue = PINB_REG;
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	ea 81       	ldd	r30, Y+2	; 0x02
    1546:	fb 81       	ldd	r31, Y+3	; 0x03
    1548:	80 83       	st	Z, r24
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <DIO_voidGetPortValue+0x98>
			break;

		case DIO_PORTC:
			*copy_pu8PortValue = PINC_REG;
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	ea 81       	ldd	r30, Y+2	; 0x02
    1554:	fb 81       	ldd	r31, Y+3	; 0x03
    1556:	80 83       	st	Z, r24
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <DIO_voidGetPortValue+0x98>
			break;

		case DIO_PORTD:
			*copy_pu8PortValue = PIND_REG;
    155a:	e0 e3       	ldi	r30, 0x30	; 48
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	ea 81       	ldd	r30, Y+2	; 0x02
    1562:	fb 81       	ldd	r31, Y+3	; 0x03
    1564:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <DIO_voidTogglePortValue>:


void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <DIO_voidTogglePortValue+0x6>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD)
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	08 f0       	brcs	.+2      	; 0x158c <DIO_voidTogglePortValue+0x16>
    158a:	3e c0       	rjmp	.+124    	; 0x1608 <DIO_voidTogglePortValue+0x92>
	{
		switch(copy_u8PortId)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3b 83       	std	Y+3, r19	; 0x03
    1594:	2a 83       	std	Y+2, r18	; 0x02
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	9b 81       	ldd	r25, Y+3	; 0x03
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	e9 f0       	breq	.+58     	; 0x15da <DIO_voidTogglePortValue+0x64>
    15a0:	2a 81       	ldd	r18, Y+2	; 0x02
    15a2:	3b 81       	ldd	r19, Y+3	; 0x03
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <DIO_voidTogglePortValue+0x3e>
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	9b 81       	ldd	r25, Y+3	; 0x03
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <DIO_voidTogglePortValue+0x54>
    15b2:	2a c0       	rjmp	.+84     	; 0x1608 <DIO_voidTogglePortValue+0x92>
    15b4:	2a 81       	ldd	r18, Y+2	; 0x02
    15b6:	3b 81       	ldd	r19, Y+3	; 0x03
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	b1 f0       	breq	.+44     	; 0x15ea <DIO_voidTogglePortValue+0x74>
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	9b 81       	ldd	r25, Y+3	; 0x03
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	c9 f0       	breq	.+50     	; 0x15fa <DIO_voidTogglePortValue+0x84>
    15c8:	1f c0       	rjmp	.+62     	; 0x1608 <DIO_voidTogglePortValue+0x92>
		{
		case DIO_PORTA:
			PORTA_REG = (~PORTA_REG);
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 95       	com	r24
    15d6:	8c 93       	st	X, r24
    15d8:	17 c0       	rjmp	.+46     	; 0x1608 <DIO_voidTogglePortValue+0x92>
			/* PORTA_REG ^= 0xFF; */
			break;

		case DIO_PORTB:
			PORTB_REG = (~PORTB_REG);
    15da:	a8 e3       	ldi	r26, 0x38	; 56
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 95       	com	r24
    15e6:	8c 93       	st	X, r24
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <DIO_voidTogglePortValue+0x92>
			break;

		case DIO_PORTC:
			PORTC_REG = (~PORTC_REG);
    15ea:	a5 e3       	ldi	r26, 0x35	; 53
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e3       	ldi	r30, 0x35	; 53
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	80 95       	com	r24
    15f6:	8c 93       	st	X, r24
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <DIO_voidTogglePortValue+0x92>
			break;

		case DIO_PORTD:
			PORTD_REG = (~PORTD_REG);
    15fa:	a2 e3       	ldi	r26, 0x32	; 50
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e2 e3       	ldi	r30, 0x32	; 50
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 95       	com	r24
    1606:	8c 93       	st	X, r24
	}
	else
	{
		// return Error State
	}
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <DIO_voidActivePortInPullUpResistance>:


void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <DIO_voidActivePortInPullUpResistance+0x6>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	90 f5       	brcc	.+100    	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
	{
		switch(copy_u8PortId)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3b 83       	std	Y+3, r19	; 0x03
    1630:	2a 83       	std	Y+2, r18	; 0x02
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	d1 f0       	breq	.+52     	; 0x1670 <DIO_voidActivePortInPullUpResistance+0x5c>
    163c:	2a 81       	ldd	r18, Y+2	; 0x02
    163e:	3b 81       	ldd	r19, Y+3	; 0x03
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	2c f4       	brge	.+10     	; 0x1650 <DIO_voidActivePortInPullUpResistance+0x3c>
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	61 f0       	breq	.+24     	; 0x1666 <DIO_voidActivePortInPullUpResistance+0x52>
    164e:	1e c0       	rjmp	.+60     	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
    1650:	2a 81       	ldd	r18, Y+2	; 0x02
    1652:	3b 81       	ldd	r19, Y+3	; 0x03
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <DIO_voidActivePortInPullUpResistance+0x66>
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	9b 81       	ldd	r25, Y+3	; 0x03
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	81 f0       	breq	.+32     	; 0x1684 <DIO_voidActivePortInPullUpResistance+0x70>
    1664:	13 c0       	rjmp	.+38     	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
		{
		case DIO_PORTA:
			PORTA_REG = 0xFF;
    1666:	eb e3       	ldi	r30, 0x3B	; 59
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	0e c0       	rjmp	.+28     	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
			break;

		case DIO_PORTB:
			PORTB_REG = 0xFF;
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 83       	st	Z, r24
    1678:	09 c0       	rjmp	.+18     	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
			break;

		case DIO_PORTC:
			PORTC_REG = 0xFF;
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	80 83       	st	Z, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <DIO_voidActivePortInPullUpResistance+0x78>
			break;

		case DIO_PORTD:
			PORTD_REG = 0xFF;
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <GI_voidEnable>:
#include "GI_interface.h"
#include "GI_register.h"


void GI_voidEnable(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, I);
    16a0:	af e5       	ldi	r26, 0x5F	; 95
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ef e5       	ldi	r30, 0x5F	; 95
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	8c 93       	st	X, r24
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <GI_voidDisable>:

void GI_voidDisable(void)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, I);
    16bc:	af e5       	ldi	r26, 0x5F	; 95
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e5       	ldi	r30, 0x5F	; 95
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 77       	andi	r24, 0x7F	; 127
    16c8:	8c 93       	st	X, r24
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <LED_voidInit>:
/* HAL */
#include "LED_interface.h"


void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <LED_voidInit+0x6>
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(copy_u8LedPort, copy_u8LedPin, DIO_PIN_OUTPUT);
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	6a 81       	ldd	r22, Y+2	; 0x02
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <LED_voidOn>:


void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <LED_voidOn+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <LED_voidOn+0x8>
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6a 83       	std	Y+2, r22	; 0x02
    1704:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3d 83       	std	Y+5, r19	; 0x05
    170e:	2c 83       	std	Y+4, r18	; 0x04
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	31 f0       	breq	.+12     	; 0x1726 <LED_voidOn+0x34>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	39 f0       	breq	.+14     	; 0x1732 <LED_voidOn+0x40>
    1724:	0b c0       	rjmp	.+22     	; 0x173c <LED_voidOn+0x4a>
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	6a 81       	ldd	r22, Y+2	; 0x02
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    1730:	05 c0       	rjmp	.+10     	; 0x173c <LED_voidOn+0x4a>
		break;

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	6a 81       	ldd	r22, Y+2	; 0x02
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	default :
		// return Error State
		break;
	}
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <LED_voidOff>:


void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <LED_voidOff+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <LED_voidOff+0x8>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	6a 83       	std	Y+2, r22	; 0x02
    175e:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3d 83       	std	Y+5, r19	; 0x05
    1768:	2c 83       	std	Y+4, r18	; 0x04
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	91 05       	cpc	r25, r1
    1772:	31 f0       	breq	.+12     	; 0x1780 <LED_voidOff+0x34>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	22 30       	cpi	r18, 0x02	; 2
    177a:	31 05       	cpc	r19, r1
    177c:	39 f0       	breq	.+14     	; 0x178c <LED_voidOff+0x40>
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <LED_voidOff+0x4a>
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	6a 81       	ldd	r22, Y+2	; 0x02
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <LED_voidOff+0x4a>
		break;

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	6a 81       	ldd	r22, Y+2	; 0x02
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	default :
		// return Error State
		break;
	}
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <LED_voidToggle>:


void LED_voidToggle(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <LED_voidToggle+0x6>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(copy_u8LedPort, copy_u8LedPin);
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	6a 81       	ldd	r22, Y+2	; 0x02
    17b8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_voidTogglePinValue>
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <RTOS_TMR_init>:


static void(*private_pCallBackCTC)(void)=NULL;

void RTOS_TMR_init(void)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
	// Select Mode = CTC Mode
	CLR_BIT(TCCR2,WGM20);
    17ce:	a5 e4       	ldi	r26, 0x45	; 69
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e4       	ldi	r30, 0x45	; 69
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 7b       	andi	r24, 0xBF	; 191
    17da:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    17dc:	a5 e4       	ldi	r26, 0x45	; 69
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e4       	ldi	r30, 0x45	; 69
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 60       	ori	r24, 0x08	; 8
    17e8:	8c 93       	st	X, r24
	
	// Enable CTC Interrupt
	SET_BIT(TIMSK,OCIE2);
    17ea:	a9 e5       	ldi	r26, 0x59	; 89
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e9 e5       	ldi	r30, 0x59	; 89
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	8c 93       	st	X, r24
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <RTOS_TMR_start>:


void RTOS_TMR_start(void)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	// Select Prescaler Value = 64
	CLR_BIT(TCCR2,CS20);
    1806:	a5 e4       	ldi	r26, 0x45	; 69
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e4       	ldi	r30, 0x45	; 69
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	8e 7f       	andi	r24, 0xFE	; 254
    1812:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    1814:	a5 e4       	ldi	r26, 0x45	; 69
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e4       	ldi	r30, 0x45	; 69
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8d 7f       	andi	r24, 0xFD	; 253
    1820:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    1822:	a5 e4       	ldi	r26, 0x45	; 69
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e4       	ldi	r30, 0x45	; 69
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	8c 93       	st	X, r24
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <RTOS_TMR_stop>:


void RTOS_TMR_stop(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,CS20);
    183e:	a5 e4       	ldi	r26, 0x45	; 69
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e4       	ldi	r30, 0x45	; 69
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8e 7f       	andi	r24, 0xFE	; 254
    184a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS21);
    184c:	a5 e4       	ldi	r26, 0x45	; 69
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e4       	ldi	r30, 0x45	; 69
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8d 7f       	andi	r24, 0xFD	; 253
    1858:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS22);
    185a:	a5 e4       	ldi	r26, 0x45	; 69
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e5 e4       	ldi	r30, 0x45	; 69
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8b 7f       	andi	r24, 0xFB	; 251
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <RTOS_TMR_setCompareMatchValue>:


void RTOS_TMR_setCompareMatchValue(u8 compareValue)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = compareValue;
    187a:	e3 e4       	ldi	r30, 0x43	; 67
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	80 83       	st	Z, r24
}
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <RTOS_TMR_setCallBackCTC>:


void RTOS_TMR_setCallBackCTC(void(*ptrToFun)(void))
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <RTOS_TMR_setCallBackCTC+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if(ptrToFun!=NULL)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <RTOS_TMR_setCallBackCTC+0x22>
	{
		private_pCallBackCTC = ptrToFun;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	90 93 73 00 	sts	0x0073, r25
    18a8:	80 93 72 00 	sts	0x0072, r24
	}
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <__vector_4>:


// ISR Timer2 output compare match
void __vector_4 (void) __attribute__ ((signal));
void __vector_4 (void)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	if(private_pCallBackCTC!=NULL)
    18e0:	80 91 72 00 	lds	r24, 0x0072
    18e4:	90 91 73 00 	lds	r25, 0x0073
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	29 f0       	breq	.+10     	; 0x18f6 <__vector_4+0x40>
	{
		// Call action
		private_pCallBackCTC();
    18ec:	e0 91 72 00 	lds	r30, 0x0072
    18f0:	f0 91 73 00 	lds	r31, 0x0073
    18f4:	09 95       	icall
	}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <RTOS_start>:
#include "RTOS_private.h"

static Task_t arrayOfTasks[RTOS_TASK_NUM];

void RTOS_start(void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	GI_voidEnable();
    1924:	0e 94 4c 0b 	call	0x1698	; 0x1698 <GI_voidEnable>
	RTOS_TMR_init();
    1928:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <RTOS_TMR_init>
	RTOS_TMR_setCompareMatchValue(249); // RTOS Tick >> 1ms
    192c:	89 ef       	ldi	r24, 0xF9	; 249
    192e:	0e 94 37 0c 	call	0x186e	; 0x186e <RTOS_TMR_setCompareMatchValue>
	RTOS_TMR_setCallBackCTC(&PRV_scheduler);
    1932:	8c e4       	ldi	r24, 0x4C	; 76
    1934:	9d e0       	ldi	r25, 0x0D	; 13
    1936:	0e 94 45 0c 	call	0x188a	; 0x188a <RTOS_TMR_setCallBackCTC>
	RTOS_TMR_start();
    193a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <RTOS_TMR_start>
}
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <RTOS_createTask>:


void RTOS_createTask(u8 priority ,u16 periodicity, void(*ptrToFun)(void))
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <RTOS_createTask+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <RTOS_createTask+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	7b 83       	std	Y+3, r23	; 0x03
    1956:	6a 83       	std	Y+2, r22	; 0x02
    1958:	5d 83       	std	Y+5, r21	; 0x05
    195a:	4c 83       	std	Y+4, r20	; 0x04
	if((priority<RTOS_TASK_NUM)&&(ptrToFun!=NULL)&&(arrayOfTasks[priority].pFunTask==NULL))
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	08 f0       	brcs	.+2      	; 0x1964 <RTOS_createTask+0x20>
    1962:	47 c0       	rjmp	.+142    	; 0x19f2 <RTOS_createTask+0xae>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	09 f4       	brne	.+2      	; 0x196e <RTOS_createTask+0x2a>
    196c:	42 c0       	rjmp	.+132    	; 0x19f2 <RTOS_createTask+0xae>
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
    1982:	fc 01       	movw	r30, r24
    1984:	ea 58       	subi	r30, 0x8A	; 138
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	89 f5       	brne	.+98     	; 0x19f2 <RTOS_createTask+0xae>
	{
		arrayOfTasks[priority].pFunTask        = ptrToFun;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	c9 01       	movw	r24, r18
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	82 0f       	add	r24, r18
    19a2:	93 1f       	adc	r25, r19
    19a4:	fc 01       	movw	r30, r24
    19a6:	ea 58       	subi	r30, 0x8A	; 138
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
		arrayOfTasks[priority].TaskPeriodicity = periodicity;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	c9 01       	movw	r24, r18
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	fc 01       	movw	r30, r24
    19c8:	e8 58       	subi	r30, 0x88	; 136
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
		arrayOfTasks[priority].TaskStatus      = RTOS_TASK_RESUMED;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	c9 01       	movw	r24, r18
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	fc 01       	movw	r30, r24
    19ea:	e6 58       	subi	r30, 0x86	; 134
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <RTOS_deleteTask>:


void RTOS_deleteTask(u8 priority)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	arrayOfTasks[priority].pFunTask = NULL;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	c9 01       	movw	r24, r18
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	fc 01       	movw	r30, r24
    1a24:	ea 58       	subi	r30, 0x8A	; 138
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	11 82       	std	Z+1, r1	; 0x01
    1a2a:	10 82       	st	Z, r1
}
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <RTOS_suspendTask>:


void RTOS_suspendTask(u8 priority)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	0f 92       	push	r0
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	arrayOfTasks[priority].TaskStatus = RTOS_TASK_SUSPENDED;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	c9 01       	movw	r24, r18
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	fc 01       	movw	r30, r24
    1a56:	e6 58       	subi	r30, 0x86	; 134
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 83       	st	Z, r24
}
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <RTOS_resumeTask>:


void RTOS_resumeTask(u8 priority)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	0f 92       	push	r0
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
	arrayOfTasks[priority].TaskStatus = RTOS_TASK_RESUMED;
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	c9 01       	movw	r24, r18
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	82 0f       	add	r24, r18
    1a84:	93 1f       	adc	r25, r19
    1a86:	fc 01       	movw	r30, r24
    1a88:	e6 58       	subi	r30, 0x86	; 134
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	80 83       	st	Z, r24
}
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <PRV_scheduler>:


static void PRV_scheduler(void)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	static u16 tickCount = 0;
	tickCount++; 
    1aa2:	80 91 74 00 	lds	r24, 0x0074
    1aa6:	90 91 75 00 	lds	r25, 0x0075
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	90 93 75 00 	sts	0x0075, r25
    1ab0:	80 93 74 00 	sts	0x0074, r24
	
	u8 taskCount;
	for(taskCount=0; taskCount<RTOS_TASK_NUM; taskCount++)
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	4e c0       	rjmp	.+156    	; 0x1b54 <PRV_scheduler+0xbc>
	{
		if(arrayOfTasks[taskCount].TaskStatus==RTOS_TASK_RESUMED)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	c9 01       	movw	r24, r18
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	fc 01       	movw	r30, r24
    1ace:	e6 58       	subi	r30, 0x86	; 134
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	d9 f5       	brne	.+118    	; 0x1b4e <PRV_scheduler+0xb6>
		{
			if(tickCount%(arrayOfTasks[taskCount].TaskPeriodicity)==0)
    1ad8:	40 91 74 00 	lds	r20, 0x0074
    1adc:	50 91 75 00 	lds	r21, 0x0075
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	c9 01       	movw	r24, r18
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	fc 01       	movw	r30, r24
    1af6:	e8 58       	subi	r30, 0x88	; 136
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	20 81       	ld	r18, Z
    1afc:	31 81       	ldd	r19, Z+1	; 0x01
    1afe:	ca 01       	movw	r24, r20
    1b00:	b9 01       	movw	r22, r18
    1b02:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__udivmodhi4>
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	11 f5       	brne	.+68     	; 0x1b4e <PRV_scheduler+0xb6>
		    {
		    	if(arrayOfTasks[taskCount].pFunTask!=NULL)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	c9 01       	movw	r24, r18
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	fc 01       	movw	r30, r24
    1b20:	ea 58       	subi	r30, 0x8A	; 138
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	89 f0       	breq	.+34     	; 0x1b4e <PRV_scheduler+0xb6>
		    	{
		    		arrayOfTasks[taskCount].pFunTask();
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	c9 01       	movw	r24, r18
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	82 0f       	add	r24, r18
    1b3e:	93 1f       	adc	r25, r19
    1b40:	fc 01       	movw	r30, r24
    1b42:	ea 58       	subi	r30, 0x8A	; 138
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	01 90       	ld	r0, Z+
    1b48:	f0 81       	ld	r31, Z
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	09 95       	icall
{
	static u16 tickCount = 0;
	tickCount++; 
	
	u8 taskCount;
	for(taskCount=0; taskCount<RTOS_TASK_NUM; taskCount++)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	8f 5f       	subi	r24, 0xFF	; 255
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <PRV_scheduler+0xc4>
    1b5a:	ae cf       	rjmp	.-164    	; 0x1ab8 <PRV_scheduler+0x20>
		    		arrayOfTasks[taskCount].pFunTask();
		    	}
		    }
		}
	}
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <SSD_voidInit>:
#include "SSD_private.h"

static u8 PRV_u8Numbers[10]= {SSD_ZERO, SSD_ONE, SSD_TWO, SSD_THREE, SSD_FOUR, SSD_FIVE, SSD_SEX, SSD_SEVEN, SSD_EIGHT, SSD_NINE};

void SSD_voidInit(void)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SSD_DATA_PORT, DIO_PORT_OUTPUT);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	6f ef       	ldi	r22, 0xFF	; 255
    1b70:	0e 94 84 09 	call	0x1308	; 0x1308 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_OUTPUT);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_OUTPUT);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <SSD_voidDisplayNumber>:


void SSD_voidDisplayNumber(u8 copy_u8DesiredNumber, u8 copy_u8Id)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <SSD_voidDisplayNumber+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <SSD_voidDisplayNumber+0x8>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8DesiredNumber<=9)
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	8a 30       	cpi	r24, 0x0A	; 10
    1ba2:	88 f5       	brcc	.+98     	; 0x1c06 <SSD_voidDisplayNumber+0x78>
	{
		switch(copy_u8Id)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	86 30       	cpi	r24, 0x06	; 6
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <SSD_voidDisplayNumber+0x36>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	2b 35       	cpi	r18, 0x5B	; 91
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	91 f0       	breq	.+36     	; 0x1be6 <SSD_voidDisplayNumber+0x58>
    1bc2:	21 c0       	rjmp	.+66     	; 0x1c06 <SSD_voidDisplayNumber+0x78>
		{
		    case SSD_ONE:
#if SSD_TYPE == SSD_COM_CATHODE
			DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[copy_u8DesiredNumber]);
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e8 59       	subi	r30, 0x98	; 152
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	90 81       	ld	r25, Z
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	69 2f       	mov	r22, r25
    1bd6:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
			DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_LOW);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    1be4:	10 c0       	rjmp	.+32     	; 0x1c06 <SSD_voidDisplayNumber+0x78>
#endif
			break;

		    case SSD_TWO:
#if SSD_TYPE == SSD_COM_CATHODE
			DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[copy_u8DesiredNumber]);
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fc 01       	movw	r30, r24
    1bee:	e8 59       	subi	r30, 0x98	; 152
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	90 81       	ld	r25, Z
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	69 2f       	mov	r22, r25
    1bf8:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
			DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_LOW);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	}
	else
	{
		// return Error state
	}
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <SSD_voidDisplayMultiplexedNumber>:


void SSD_voidDisplayMultiplexedNumber(u8 copy_u8DesiredNumber)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	6f 97       	sbiw	r28, 0x1f	; 31
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	8f 8f       	std	Y+31, r24	; 0x1f
	if(copy_u8DesiredNumber<=99)
    1c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2c:	84 36       	cpi	r24, 0x64	; 100
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <SSD_voidDisplayMultiplexedNumber+0x1e>
    1c30:	25 c1       	rjmp	.+586    	; 0x1e7c <SSD_voidDisplayMultiplexedNumber+0x268>
	{
		u8 local_u8Ones = copy_u8DesiredNumber%10;
    1c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c34:	9a e0       	ldi	r25, 0x0A	; 10
    1c36:	69 2f       	mov	r22, r25
    1c38:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__udivmodqi4>
    1c3c:	89 2f       	mov	r24, r25
    1c3e:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 local_u8Tens = copy_u8DesiredNumber/10;
    1c40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c42:	9a e0       	ldi	r25, 0x0A	; 10
    1c44:	69 2f       	mov	r22, r25
    1c46:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__udivmodqi4>
    1c4a:	8d 8f       	std	Y+29, r24	; 0x1d

#if SSD_TYPE == SSD_COM_CATHODE
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_HIGH);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_HIGH);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	62 e0       	ldi	r22, 0x02	; 2
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
		DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Tens]);
    1c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	fc 01       	movw	r30, r24
    1c68:	e8 59       	subi	r30, 0x98	; 152
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	90 81       	ld	r25, Z
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	69 2f       	mov	r22, r25
    1c72:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_LOW);
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e2       	ldi	r26, 0x20	; 32
    1c86:	b1 e4       	ldi	r27, 0x41	; 65
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a e7       	ldi	r20, 0x7A	; 122
    1c9e:	55 e4       	ldi	r21, 0x45	; 69
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
    1caa:	9e 8b       	std	Y+22, r25	; 0x16
    1cac:	af 8b       	std	Y+23, r26	; 0x17
    1cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <SSD_voidDisplayMultiplexedNumber+0xbe>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <SSD_voidDisplayMultiplexedNumber+0x13c>
	else if (__tmp > 65535)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <SSD_voidDisplayMultiplexedNumber+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <SSD_voidDisplayMultiplexedNumber+0x11e>
    1d14:	80 e9       	ldi	r24, 0x90	; 144
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <SSD_voidDisplayMultiplexedNumber+0x10c>
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <SSD_voidDisplayMultiplexedNumber+0x100>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <SSD_voidDisplayMultiplexedNumber+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <SSD_voidDisplayMultiplexedNumber+0x148>
    1d60:	98 8b       	std	Y+16, r25	; 0x10
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, DIO_PIN_HIGH);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

		DIO_voidSetPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Ones]);
    1d6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	e8 59       	subi	r30, 0x98	; 152
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	90 81       	ld	r25, Z
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	69 2f       	mov	r22, r25
    1d80:	0e 94 23 0a 	call	0x1446	; 0x1446 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_LOW);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	62 e0       	ldi	r22, 0x02	; 2
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e2       	ldi	r26, 0x20	; 32
    1d94:	b1 e4       	ldi	r27, 0x41	; 65
    1d96:	8b 87       	std	Y+11, r24	; 0x0b
    1d98:	9c 87       	std	Y+12, r25	; 0x0c
    1d9a:	ad 87       	std	Y+13, r26	; 0x0d
    1d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a e7       	ldi	r20, 0x7A	; 122
    1dac:	55 e4       	ldi	r21, 0x45	; 69
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8f 83       	std	Y+7, r24	; 0x07
    1db8:	98 87       	std	Y+8, r25	; 0x08
    1dba:	a9 87       	std	Y+9, r26	; 0x09
    1dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <SSD_voidDisplayMultiplexedNumber+0x1cc>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <SSD_voidDisplayMultiplexedNumber+0x24a>
	else if (__tmp > 65535)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <SSD_voidDisplayMultiplexedNumber+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <SSD_voidDisplayMultiplexedNumber+0x22c>
    1e22:	80 e9       	ldi	r24, 0x90	; 144
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <SSD_voidDisplayMultiplexedNumber+0x21a>
    1e32:	9c 83       	std	Y+4, r25	; 0x04
    1e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <SSD_voidDisplayMultiplexedNumber+0x20e>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <SSD_voidDisplayMultiplexedNumber+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <SSD_voidDisplayMultiplexedNumber+0x256>
    1e6e:	9a 83       	std	Y+2, r25	; 0x02
    1e70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_voidSetPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, DIO_PIN_HIGH);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	}
	else
	{
		// return Error state
	}
}
    1e7c:	6f 96       	adiw	r28, 0x1f	; 31
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <leds>:




void leds(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	c0 54       	subi	r28, 0x40	; 64
    1e98:	d0 40       	sbci	r29, 0x00	; 0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
	// ------------Red Led Pin 0 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	64 e0       	ldi	r22, 0x04	; 4
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	67 e0       	ldi	r22, 0x07	; 7
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION);
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LED_voidOn>
	for (int i = 1; i <= 60; i++)
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ff 96       	adiw	r30, 0x3f	; 63
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
    1ece:	7e c0       	rjmp	.+252    	; 0x1fcc <leds+0x13e>
	{
		SSD_voidDisplayMultiplexedNumber(i);
    1ed0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ed2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SSD_voidDisplayMultiplexedNumber>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e4       	ldi	r25, 0x40	; 64
    1eda:	ac e9       	ldi	r26, 0x9C	; 156
    1edc:	b5 e4       	ldi	r27, 0x45	; 69
    1ede:	8d ab       	std	Y+53, r24	; 0x35
    1ee0:	9e ab       	std	Y+54, r25	; 0x36
    1ee2:	af ab       	std	Y+55, r26	; 0x37
    1ee4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eea:	8f a9       	ldd	r24, Y+55	; 0x37
    1eec:	98 ad       	ldd	r25, Y+56	; 0x38
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	4a e7       	ldi	r20, 0x7A	; 122
    1ef4:	53 e4       	ldi	r21, 0x43	; 67
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	89 ab       	std	Y+49, r24	; 0x31
    1f00:	9a ab       	std	Y+50, r25	; 0x32
    1f02:	ab ab       	std	Y+51, r26	; 0x33
    1f04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f06:	69 a9       	ldd	r22, Y+49	; 0x31
    1f08:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <leds+0x9a>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	3f c0       	rjmp	.+126    	; 0x1fa6 <leds+0x118>
	else if (__tmp > 65535)
    1f28:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	4c f5       	brge	.+82     	; 0x1f92 <leds+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	6d a9       	ldd	r22, Y+53	; 0x35
    1f42:	7e a9       	ldd	r23, Y+54	; 0x36
    1f44:	8f a9       	ldd	r24, Y+55	; 0x37
    1f46:	98 ad       	ldd	r25, Y+56	; 0x38
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	51 e4       	ldi	r21, 0x41	; 65
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	98 ab       	std	Y+48, r25	; 0x30
    1f66:	8f a7       	std	Y+47, r24	; 0x2f
    1f68:	0f c0       	rjmp	.+30     	; 0x1f88 <leds+0xfa>
    1f6a:	89 e1       	ldi	r24, 0x19	; 25
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9e a7       	std	Y+46, r25	; 0x2e
    1f70:	8d a7       	std	Y+45, r24	; 0x2d
    1f72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <leds+0xe8>
    1f7a:	9e a7       	std	Y+46, r25	; 0x2e
    1f7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f80:	98 a9       	ldd	r25, Y+48	; 0x30
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	98 ab       	std	Y+48, r25	; 0x30
    1f86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	69 f7       	brne	.-38     	; 0x1f6a <leds+0xdc>
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <leds+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f92:	69 a9       	ldd	r22, Y+49	; 0x31
    1f94:	7a a9       	ldd	r23, Y+50	; 0x32
    1f96:	8b a9       	ldd	r24, Y+51	; 0x33
    1f98:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	98 ab       	std	Y+48, r25	; 0x30
    1fa4:	8f a7       	std	Y+47, r24	; 0x2f
    1fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1faa:	9c a7       	std	Y+44, r25	; 0x2c
    1fac:	8b a7       	std	Y+43, r24	; 0x2b
    1fae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <leds+0x124>
    1fb6:	9c a7       	std	Y+44, r25	; 0x2c
    1fb8:	8b a7       	std	Y+43, r24	; 0x2b
{
	// ------------Red Led Pin 0 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
	LED_voidOn(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 60; i++)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ff 96       	adiw	r30, 0x3f	; 63
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ff 96       	adiw	r30, 0x3f	; 63
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ff 96       	adiw	r30, 0x3f	; 63
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	8d 33       	cpi	r24, 0x3D	; 61
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	0c f4       	brge	.+2      	; 0x1fdc <leds+0x14e>
    1fda:	7a cf       	rjmp	.-268    	; 0x1ed0 <leds+0x42>
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}

	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	67 e0       	ldi	r22, 0x07	; 7
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	64 e0       	ldi	r22, 0x04	; 4
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LED_voidOn>
	for (int i = 1; i <= 5; i++)
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9e af       	std	Y+62, r25	; 0x3e
    2000:	8d af       	std	Y+61, r24	; 0x3d
    2002:	7a c0       	rjmp	.+244    	; 0x20f8 <leds+0x26a>
	{
		SSD_voidDisplayMultiplexedNumber(i);
    2004:	8d ad       	ldd	r24, Y+61	; 0x3d
    2006:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SSD_voidDisplayMultiplexedNumber>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e4       	ldi	r25, 0x40	; 64
    200e:	ac e9       	ldi	r26, 0x9C	; 156
    2010:	b5 e4       	ldi	r27, 0x45	; 69
    2012:	8f a3       	std	Y+39, r24	; 0x27
    2014:	98 a7       	std	Y+40, r25	; 0x28
    2016:	a9 a7       	std	Y+41, r26	; 0x29
    2018:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201a:	6f a1       	ldd	r22, Y+39	; 0x27
    201c:	78 a5       	ldd	r23, Y+40	; 0x28
    201e:	89 a5       	ldd	r24, Y+41	; 0x29
    2020:	9a a5       	ldd	r25, Y+42	; 0x2a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8b a3       	std	Y+35, r24	; 0x23
    2034:	9c a3       	std	Y+36, r25	; 0x24
    2036:	ad a3       	std	Y+37, r26	; 0x25
    2038:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <leds+0x1ce>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9a a3       	std	Y+34, r25	; 0x22
    2058:	89 a3       	std	Y+33, r24	; 0x21
    205a:	3f c0       	rjmp	.+126    	; 0x20da <leds+0x24c>
	else if (__tmp > 65535)
    205c:	6b a1       	ldd	r22, Y+35	; 0x23
    205e:	7c a1       	ldd	r23, Y+36	; 0x24
    2060:	8d a1       	ldd	r24, Y+37	; 0x25
    2062:	9e a1       	ldd	r25, Y+38	; 0x26
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	4c f5       	brge	.+82     	; 0x20c6 <leds+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	6f a1       	ldd	r22, Y+39	; 0x27
    2076:	78 a5       	ldd	r23, Y+40	; 0x28
    2078:	89 a5       	ldd	r24, Y+41	; 0x29
    207a:	9a a5       	ldd	r25, Y+42	; 0x2a
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9a a3       	std	Y+34, r25	; 0x22
    209a:	89 a3       	std	Y+33, r24	; 0x21
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <leds+0x22e>
    209e:	89 e1       	ldi	r24, 0x19	; 25
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	98 a3       	std	Y+32, r25	; 0x20
    20a4:	8f 8f       	std	Y+31, r24	; 0x1f
    20a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a8:	98 a1       	ldd	r25, Y+32	; 0x20
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <leds+0x21c>
    20ae:	98 a3       	std	Y+32, r25	; 0x20
    20b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	89 a1       	ldd	r24, Y+33	; 0x21
    20b4:	9a a1       	ldd	r25, Y+34	; 0x22
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	89 a1       	ldd	r24, Y+33	; 0x21
    20be:	9a a1       	ldd	r25, Y+34	; 0x22
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	69 f7       	brne	.-38     	; 0x209e <leds+0x210>
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <leds+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6b a1       	ldd	r22, Y+35	; 0x23
    20c8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ca:	8d a1       	ldd	r24, Y+37	; 0x25
    20cc:	9e a1       	ldd	r25, Y+38	; 0x26
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9a a3       	std	Y+34, r25	; 0x22
    20d8:	89 a3       	std	Y+33, r24	; 0x21
    20da:	89 a1       	ldd	r24, Y+33	; 0x21
    20dc:	9a a1       	ldd	r25, Y+34	; 0x22
    20de:	9e 8f       	std	Y+30, r25	; 0x1e
    20e0:	8d 8f       	std	Y+29, r24	; 0x1d
    20e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <leds+0x258>
    20ea:	9e 8f       	std	Y+30, r25	; 0x1e
    20ec:	8d 8f       	std	Y+29, r24	; 0x1d

	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 5; i++)
    20ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f2:	01 96       	adiw	r24, 0x01	; 1
    20f4:	9e af       	std	Y+62, r25	; 0x3e
    20f6:	8d af       	std	Y+61, r24	; 0x3d
    20f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fc:	86 30       	cpi	r24, 0x06	; 6
    20fe:	91 05       	cpc	r25, r1
    2100:	0c f4       	brge	.+2      	; 0x2104 <leds+0x276>
    2102:	80 cf       	rjmp	.-256    	; 0x2004 <leds+0x176>
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}

	// ------------Green Led Pin 7 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	67 e0       	ldi	r22, 0x07	; 7
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LED_voidOn>
	for (int i = 1; i <= 60; i++)
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c af       	std	Y+60, r25	; 0x3c
    2128:	8b af       	std	Y+59, r24	; 0x3b
    212a:	7a c0       	rjmp	.+244    	; 0x2220 <leds+0x392>
	{
		SSD_voidDisplayMultiplexedNumber(i);
    212c:	8b ad       	ldd	r24, Y+59	; 0x3b
    212e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SSD_voidDisplayMultiplexedNumber>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e4       	ldi	r25, 0x40	; 64
    2136:	ac e9       	ldi	r26, 0x9C	; 156
    2138:	b5 e4       	ldi	r27, 0x45	; 69
    213a:	89 8f       	std	Y+25, r24	; 0x19
    213c:	9a 8f       	std	Y+26, r25	; 0x1a
    213e:	ab 8f       	std	Y+27, r26	; 0x1b
    2140:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	69 8d       	ldd	r22, Y+25	; 0x19
    2144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8d 8b       	std	Y+21, r24	; 0x15
    215c:	9e 8b       	std	Y+22, r25	; 0x16
    215e:	af 8b       	std	Y+23, r26	; 0x17
    2160:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2162:	6d 89       	ldd	r22, Y+21	; 0x15
    2164:	7e 89       	ldd	r23, Y+22	; 0x16
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	98 8d       	ldd	r25, Y+24	; 0x18
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <leds+0x2f6>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9c 8b       	std	Y+20, r25	; 0x14
    2180:	8b 8b       	std	Y+19, r24	; 0x13
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <leds+0x374>
	else if (__tmp > 65535)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <leds+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	69 8d       	ldd	r22, Y+25	; 0x19
    219e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <leds+0x356>
    21c6:	89 e1       	ldi	r24, 0x19	; 25
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
    21ce:	89 89       	ldd	r24, Y+17	; 0x11
    21d0:	9a 89       	ldd	r25, Y+18	; 0x12
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <leds+0x344>
    21d6:	9a 8b       	std	Y+18, r25	; 0x12
    21d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <leds+0x338>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <leds+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	9c 89       	ldd	r25, Y+20	; 0x14
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	98 89       	ldd	r25, Y+16	; 0x10
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <leds+0x380>
    2212:	98 8b       	std	Y+16, r25	; 0x10
    2214:	8f 87       	std	Y+15, r24	; 0x0f

	// ------------Green Led Pin 7 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
	LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION); // led yellow off
	LED_voidOn(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 60; i++)
    2216:	8b ad       	ldd	r24, Y+59	; 0x3b
    2218:	9c ad       	ldd	r25, Y+60	; 0x3c
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	9c af       	std	Y+60, r25	; 0x3c
    221e:	8b af       	std	Y+59, r24	; 0x3b
    2220:	8b ad       	ldd	r24, Y+59	; 0x3b
    2222:	9c ad       	ldd	r25, Y+60	; 0x3c
    2224:	8d 33       	cpi	r24, 0x3D	; 61
    2226:	91 05       	cpc	r25, r1
    2228:	0c f4       	brge	.+2      	; 0x222c <leds+0x39e>
    222a:	80 cf       	rjmp	.-256    	; 0x212c <leds+0x29e>
	{
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}
	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	67 e0       	ldi	r22, 0x07	; 7
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 a6 0b 	call	0x174c	; 0x174c <LED_voidOff>
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <LED_voidOn>
	for (int i = 1; i <= 5; i++)
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9a af       	std	Y+58, r25	; 0x3a
    2250:	89 af       	std	Y+57, r24	; 0x39
    2252:	7a c0       	rjmp	.+244    	; 0x2348 <leds+0x4ba>
	{
		SSD_voidDisplayMultiplexedNumber(i);
    2254:	89 ad       	ldd	r24, Y+57	; 0x39
    2256:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SSD_voidDisplayMultiplexedNumber>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e4       	ldi	r25, 0x40	; 64
    225e:	ac e9       	ldi	r26, 0x9C	; 156
    2260:	b5 e4       	ldi	r27, 0x45	; 69
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a e7       	ldi	r20, 0x7A	; 122
    2278:	53 e4       	ldi	r21, 0x43	; 67
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	a9 87       	std	Y+9, r26	; 0x09
    2288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <leds+0x41e>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <leds+0x49c>
	else if (__tmp > 65535)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <leds+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <leds+0x47e>
    22ee:	89 e1       	ldi	r24, 0x19	; 25
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <leds+0x46c>
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <leds+0x460>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <leds+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <leds+0x4a8>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	}
	// ------------ Yellow Led Pin 4 Port D ------------------
	LED_voidOff(DIO_PORTD, DIO_PIN0, LED_FORWARD_CONNECTION); // led red off
	LED_voidOff(DIO_PORTD, DIO_PIN7, LED_FORWARD_CONNECTION); // led green off
	LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
	for (int i = 1; i <= 5; i++)
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	9a ad       	ldd	r25, Y+58	; 0x3a
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	9a af       	std	Y+58, r25	; 0x3a
    2346:	89 af       	std	Y+57, r24	; 0x39
    2348:	89 ad       	ldd	r24, Y+57	; 0x39
    234a:	9a ad       	ldd	r25, Y+58	; 0x3a
    234c:	86 30       	cpi	r24, 0x06	; 6
    234e:	91 05       	cpc	r25, r1
    2350:	0c f4       	brge	.+2      	; 0x2354 <leds+0x4c6>
    2352:	80 cf       	rjmp	.-256    	; 0x2254 <leds+0x3c6>
	{
		SSD_voidDisplayMultiplexedNumber(i);
		_delay_ms(5000);
	}
}
    2354:	c0 5c       	subi	r28, 0xC0	; 192
    2356:	df 4f       	sbci	r29, 0xFF	; 255
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <main>:

//--------------main function -----------------------------
int main(void)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	SSD_voidInit();
    2370:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <SSD_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN0);
    2374:	83 e0       	ldi	r24, 0x03	; 3
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN4);
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	64 e0       	ldi	r22, 0x04	; 4
    2380:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN7);
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	67 e0       	ldi	r22, 0x07	; 7
    2388:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LED_voidInit>
	while (1)
	{
			RTOS_createTask(0, 1, &leds);
    238c:	27 e4       	ldi	r18, 0x47	; 71
    238e:	3f e0       	ldi	r19, 0x0F	; 15
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	0e 94 a2 0c 	call	0x1944	; 0x1944 <RTOS_createTask>

			RTOS_start();
    239c:	0e 94 8e 0c 	call	0x191c	; 0x191c <RTOS_start>
    23a0:	f5 cf       	rjmp	.-22     	; 0x238c <main+0x24>

000023a2 <__udivmodqi4>:
    23a2:	99 1b       	sub	r25, r25
    23a4:	79 e0       	ldi	r23, 0x09	; 9
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <__udivmodqi4_ep>

000023a8 <__udivmodqi4_loop>:
    23a8:	99 1f       	adc	r25, r25
    23aa:	96 17       	cp	r25, r22
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <__udivmodqi4_ep>
    23ae:	96 1b       	sub	r25, r22

000023b0 <__udivmodqi4_ep>:
    23b0:	88 1f       	adc	r24, r24
    23b2:	7a 95       	dec	r23
    23b4:	c9 f7       	brne	.-14     	; 0x23a8 <__udivmodqi4_loop>
    23b6:	80 95       	com	r24
    23b8:	08 95       	ret

000023ba <__udivmodhi4>:
    23ba:	aa 1b       	sub	r26, r26
    23bc:	bb 1b       	sub	r27, r27
    23be:	51 e1       	ldi	r21, 0x11	; 17
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <__udivmodhi4_ep>

000023c2 <__udivmodhi4_loop>:
    23c2:	aa 1f       	adc	r26, r26
    23c4:	bb 1f       	adc	r27, r27
    23c6:	a6 17       	cp	r26, r22
    23c8:	b7 07       	cpc	r27, r23
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__udivmodhi4_ep>
    23cc:	a6 1b       	sub	r26, r22
    23ce:	b7 0b       	sbc	r27, r23

000023d0 <__udivmodhi4_ep>:
    23d0:	88 1f       	adc	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	5a 95       	dec	r21
    23d6:	a9 f7       	brne	.-22     	; 0x23c2 <__udivmodhi4_loop>
    23d8:	80 95       	com	r24
    23da:	90 95       	com	r25
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	08 95       	ret

000023e2 <__prologue_saves__>:
    23e2:	2f 92       	push	r2
    23e4:	3f 92       	push	r3
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	ca 1b       	sub	r28, r26
    240c:	db 0b       	sbc	r29, r27
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	09 94       	ijmp

0000241a <__epilogue_restores__>:
    241a:	2a 88       	ldd	r2, Y+18	; 0x12
    241c:	39 88       	ldd	r3, Y+17	; 0x11
    241e:	48 88       	ldd	r4, Y+16	; 0x10
    2420:	5f 84       	ldd	r5, Y+15	; 0x0f
    2422:	6e 84       	ldd	r6, Y+14	; 0x0e
    2424:	7d 84       	ldd	r7, Y+13	; 0x0d
    2426:	8c 84       	ldd	r8, Y+12	; 0x0c
    2428:	9b 84       	ldd	r9, Y+11	; 0x0b
    242a:	aa 84       	ldd	r10, Y+10	; 0x0a
    242c:	b9 84       	ldd	r11, Y+9	; 0x09
    242e:	c8 84       	ldd	r12, Y+8	; 0x08
    2430:	df 80       	ldd	r13, Y+7	; 0x07
    2432:	ee 80       	ldd	r14, Y+6	; 0x06
    2434:	fd 80       	ldd	r15, Y+5	; 0x05
    2436:	0c 81       	ldd	r16, Y+4	; 0x04
    2438:	1b 81       	ldd	r17, Y+3	; 0x03
    243a:	aa 81       	ldd	r26, Y+2	; 0x02
    243c:	b9 81       	ldd	r27, Y+1	; 0x01
    243e:	ce 0f       	add	r28, r30
    2440:	d1 1d       	adc	r29, r1
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	ed 01       	movw	r28, r26
    244e:	08 95       	ret

00002450 <_exit>:
    2450:	f8 94       	cli

00002452 <__stop_program>:
    2452:	ff cf       	rjmp	.-2      	; 0x2452 <__stop_program>
