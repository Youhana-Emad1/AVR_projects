
Day1_A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000556  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e78  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c9  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c6  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00002608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060a  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088c  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  64:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinDirection<=DIO_PIN_OUTPUT))
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	7e c0       	rjmp	.+252    	; 0x16e <DIO_voidSetPinDirection+0x102>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	7b c0       	rjmp	.+246    	; 0x16e <DIO_voidSetPinDirection+0x102>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_voidSetPinDirection+0x12>
  7c:	78 c0       	rjmp	.+240    	; 0x16e <DIO_voidSetPinDirection+0x102>
	{
		switch(copy_u8PortId)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	19 f1       	breq	.+70     	; 0xc8 <DIO_voidSetPinDirection+0x5c>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_voidSetPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	e1 f1       	breq	.+120    	; 0x100 <DIO_voidSetPinDirection+0x94>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_voidSetPinDirection+0x22>
  8c:	55 c0       	rjmp	.+170    	; 0x138 <DIO_voidSetPinDirection+0xcc>
  8e:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinDirection)
  90:	44 23       	and	r20, r20
  92:	19 f0       	breq	.+6      	; 0x9a <DIO_voidSetPinDirection+0x2e>
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	69 f0       	breq	.+26     	; 0xb2 <DIO_voidSetPinDirection+0x46>
  98:	08 95       	ret
			{
			case DIO_PIN_INPUT:
				CLR_BIT(DDRA_REG, copy_u8PinId);
  9a:	2a b3       	in	r18, 0x1a	; 26
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_voidSetPinDirection+0x3a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_voidSetPinDirection+0x36>
  aa:	80 95       	com	r24
  ac:	82 23       	and	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
				break;
  b0:	08 95       	ret

			case DIO_PIN_OUTPUT:
				SET_BIT(DDRA_REG, copy_u8PinId);
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	8a bb       	out	0x1a, r24	; 26
				break;
  c6:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinDirection)
  c8:	44 23       	and	r20, r20
  ca:	19 f0       	breq	.+6      	; 0xd2 <DIO_voidSetPinDirection+0x66>
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f0       	breq	.+26     	; 0xea <DIO_voidSetPinDirection+0x7e>
  d0:	08 95       	ret
				{
				case DIO_PIN_INPUT:
					CLR_BIT(DDRB_REG, copy_u8PinId);
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDirection+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDirection+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
					break;
  e8:	08 95       	ret

				case DIO_PIN_OUTPUT:
					SET_BIT(DDRB_REG, copy_u8PinId);
  ea:	27 b3       	in	r18, 0x17	; 23
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetPinDirection+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetPinDirection+0x86>
  fa:	82 2b       	or	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
					break;
  fe:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinDirection)
 100:	44 23       	and	r20, r20
 102:	19 f0       	breq	.+6      	; 0x10a <DIO_voidSetPinDirection+0x9e>
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	69 f0       	breq	.+26     	; 0x122 <DIO_voidSetPinDirection+0xb6>
 108:	08 95       	ret
					{
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG, copy_u8PinId);
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_voidSetPinDirection+0xaa>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_voidSetPinDirection+0xa6>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
						break;
 120:	08 95       	ret

					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG, copy_u8PinId);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_voidSetPinDirection+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_voidSetPinDirection+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
						break;
 136:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinDirection)
 138:	44 23       	and	r20, r20
 13a:	19 f0       	breq	.+6      	; 0x142 <DIO_voidSetPinDirection+0xd6>
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	69 f0       	breq	.+26     	; 0x15a <DIO_voidSetPinDirection+0xee>
 140:	08 95       	ret
						{
						case DIO_PIN_INPUT:
							CLR_BIT(DDRD_REG, copy_u8PinId);
 142:	21 b3       	in	r18, 0x11	; 17
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinDirection+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinDirection+0xde>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
							break;
 158:	08 95       	ret

						case DIO_PIN_OUTPUT:
							SET_BIT(DDRD_REG, copy_u8PinId);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDirection+0xfa>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDirection+0xf6>
 16a:	82 2b       	or	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret

00000170 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_u8PinValue<=DIO_PIN_HIGH))
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	08 f0       	brcs	.+2      	; 0x176 <DIO_voidSetPinValue+0x6>
 174:	7e c0       	rjmp	.+252    	; 0x272 <DIO_voidSetPinValue+0x102>
 176:	68 30       	cpi	r22, 0x08	; 8
 178:	08 f0       	brcs	.+2      	; 0x17c <DIO_voidSetPinValue+0xc>
 17a:	7b c0       	rjmp	.+246    	; 0x272 <DIO_voidSetPinValue+0x102>
 17c:	42 30       	cpi	r20, 0x02	; 2
 17e:	08 f0       	brcs	.+2      	; 0x182 <DIO_voidSetPinValue+0x12>
 180:	78 c0       	rjmp	.+240    	; 0x272 <DIO_voidSetPinValue+0x102>
	{
		switch(copy_u8PortId)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	19 f1       	breq	.+70     	; 0x1cc <DIO_voidSetPinValue+0x5c>
 186:	30 f0       	brcs	.+12     	; 0x194 <DIO_voidSetPinValue+0x24>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	e1 f1       	breq	.+120    	; 0x204 <DIO_voidSetPinValue+0x94>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	09 f4       	brne	.+2      	; 0x192 <DIO_voidSetPinValue+0x22>
 190:	55 c0       	rjmp	.+170    	; 0x23c <DIO_voidSetPinValue+0xcc>
 192:	08 95       	ret
		{
		case DIO_PORTA:
			switch(copy_u8PinValue)
 194:	44 23       	and	r20, r20
 196:	19 f0       	breq	.+6      	; 0x19e <DIO_voidSetPinValue+0x2e>
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	69 f0       	breq	.+26     	; 0x1b6 <DIO_voidSetPinValue+0x46>
 19c:	08 95       	ret
			{
			case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_voidSetPinValue+0x3a>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_voidSetPinValue+0x36>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
				break;
 1b4:	08 95       	ret

			case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_voidSetPinValue+0x52>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_voidSetPinValue+0x4e>
 1c6:	82 2b       	or	r24, r18
 1c8:	8b bb       	out	0x1b, r24	; 27
				break;
 1ca:	08 95       	ret
			}
			break;

			case DIO_PORTB:
				switch(copy_u8PinValue)
 1cc:	44 23       	and	r20, r20
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <DIO_voidSetPinValue+0x66>
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	69 f0       	breq	.+26     	; 0x1ee <DIO_voidSetPinValue+0x7e>
 1d4:	08 95       	ret
				{
				case DIO_PIN_LOW:
					CLR_BIT(PORTB_REG, copy_u8PinId);
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinValue+0x72>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinValue+0x6e>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
					break;
 1ec:	08 95       	ret

				case DIO_PIN_HIGH:
					SET_BIT(PORTB_REG, copy_u8PinId);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x8a>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x86>
 1fe:	82 2b       	or	r24, r18
 200:	88 bb       	out	0x18, r24	; 24
					break;
 202:	08 95       	ret
				}
				break;

				case DIO_PORTC:
					switch(copy_u8PinValue)
 204:	44 23       	and	r20, r20
 206:	19 f0       	breq	.+6      	; 0x20e <DIO_voidSetPinValue+0x9e>
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	69 f0       	breq	.+26     	; 0x226 <DIO_voidSetPinValue+0xb6>
 20c:	08 95       	ret
					{
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG, copy_u8PinId);
 20e:	25 b3       	in	r18, 0x15	; 21
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_voidSetPinValue+0xaa>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_voidSetPinValue+0xa6>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	85 bb       	out	0x15, r24	; 21
						break;
 224:	08 95       	ret

					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG, copy_u8PinId);
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_voidSetPinValue+0xc2>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_voidSetPinValue+0xbe>
 236:	82 2b       	or	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
						break;
 23a:	08 95       	ret
					}
					break;

					case DIO_PORTD:
						switch(copy_u8PinValue)
 23c:	44 23       	and	r20, r20
 23e:	19 f0       	breq	.+6      	; 0x246 <DIO_voidSetPinValue+0xd6>
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	69 f0       	breq	.+26     	; 0x25e <DIO_voidSetPinValue+0xee>
 244:	08 95       	ret
						{
						case DIO_PIN_LOW:
							CLR_BIT(PORTD_REG, copy_u8PinId);
 246:	22 b3       	in	r18, 0x12	; 18
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_voidSetPinValue+0xe2>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_voidSetPinValue+0xde>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
							break;
 25c:	08 95       	ret

						case DIO_PIN_HIGH:
							SET_BIT(PORTD_REG, copy_u8PinId);
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_voidSetPinValue+0xfa>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_voidSetPinValue+0xf6>
 26e:	82 2b       	or	r24, r18
 270:	82 bb       	out	0x12, r24	; 18
 272:	08 95       	ret

00000274 <DIO_voidGetPinValue>:
}


void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7)&&(copy_pu8PinValue != NULL))
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	c0 f5       	brcc	.+112    	; 0x2e8 <DIO_voidGetPinValue+0x74>
 278:	68 30       	cpi	r22, 0x08	; 8
 27a:	b0 f5       	brcc	.+108    	; 0x2e8 <DIO_voidGetPinValue+0x74>
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	99 f1       	breq	.+102    	; 0x2e8 <DIO_voidGetPinValue+0x74>
	{
		switch(copy_u8PortId)
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	89 f0       	breq	.+34     	; 0x2a8 <DIO_voidGetPinValue+0x34>
 286:	28 f0       	brcs	.+10     	; 0x292 <DIO_voidGetPinValue+0x1e>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	c9 f0       	breq	.+50     	; 0x2be <DIO_voidGetPinValue+0x4a>
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	11 f1       	breq	.+68     	; 0x2d4 <DIO_voidGetPinValue+0x60>
 290:	08 95       	ret
		{
		case DIO_PORTA:
			*copy_pu8PinValue = GET_BIT(PINA_REG, copy_u8PinId);
 292:	89 b3       	in	r24, 0x19	; 25
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidGetPinValue+0x28>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidGetPinValue+0x24>
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	fa 01       	movw	r30, r20
 2a4:	80 83       	st	Z, r24
			break;
 2a6:	08 95       	ret

		case DIO_PORTB:
			*copy_pu8PinValue = GET_BIT(PINB_REG, copy_u8PinId);
 2a8:	86 b3       	in	r24, 0x16	; 22
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidGetPinValue+0x3e>
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidGetPinValue+0x3a>
 2b6:	81 70       	andi	r24, 0x01	; 1
 2b8:	fa 01       	movw	r30, r20
 2ba:	80 83       	st	Z, r24
			break;
 2bc:	08 95       	ret

		case DIO_PORTC:
			*copy_pu8PinValue = GET_BIT(PINC_REG, copy_u8PinId);
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_voidGetPinValue+0x54>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_voidGetPinValue+0x50>
 2cc:	81 70       	andi	r24, 0x01	; 1
 2ce:	fa 01       	movw	r30, r20
 2d0:	80 83       	st	Z, r24
			break;
 2d2:	08 95       	ret

		case DIO_PORTD:
			*copy_pu8PinValue = GET_BIT(PIND_REG, copy_u8PinId);
 2d4:	80 b3       	in	r24, 0x10	; 16
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_voidGetPinValue+0x6a>
 2da:	95 95       	asr	r25
 2dc:	87 95       	ror	r24
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_voidGetPinValue+0x66>
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	fa 01       	movw	r30, r20
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <DIO_voidTogglePinValue>:
}


void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	a8 f5       	brcc	.+106    	; 0x358 <DIO_voidTogglePinValue+0x6e>
 2ee:	68 30       	cpi	r22, 0x08	; 8
 2f0:	98 f5       	brcc	.+102    	; 0x358 <DIO_voidTogglePinValue+0x6e>
	{
		switch(copy_u8PortId)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	89 f0       	breq	.+34     	; 0x318 <DIO_voidTogglePinValue+0x2e>
 2f6:	28 f0       	brcs	.+10     	; 0x302 <DIO_voidTogglePinValue+0x18>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	c9 f0       	breq	.+50     	; 0x32e <DIO_voidTogglePinValue+0x44>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	11 f1       	breq	.+68     	; 0x344 <DIO_voidTogglePinValue+0x5a>
 300:	08 95       	ret
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG, copy_u8PinId);
 302:	2b b3       	in	r18, 0x1b	; 27
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_voidTogglePinValue+0x24>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_voidTogglePinValue+0x20>
 312:	82 27       	eor	r24, r18
 314:	8b bb       	out	0x1b, r24	; 27
			break;
 316:	08 95       	ret

		case DIO_PORTB:
			TOG_BIT(PORTB_REG, copy_u8PinId);
 318:	28 b3       	in	r18, 0x18	; 24
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_voidTogglePinValue+0x3a>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_voidTogglePinValue+0x36>
 328:	82 27       	eor	r24, r18
 32a:	88 bb       	out	0x18, r24	; 24
			break;
 32c:	08 95       	ret

		case DIO_PORTC:
			TOG_BIT(PORTC_REG, copy_u8PinId);
 32e:	25 b3       	in	r18, 0x15	; 21
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_voidTogglePinValue+0x50>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_voidTogglePinValue+0x4c>
 33e:	82 27       	eor	r24, r18
 340:	85 bb       	out	0x15, r24	; 21
			break;
 342:	08 95       	ret

		case DIO_PORTD:
			TOG_BIT(PORTD_REG, copy_u8PinId);
 344:	22 b3       	in	r18, 0x12	; 18
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_voidTogglePinValue+0x66>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_voidTogglePinValue+0x62>
 354:	82 27       	eor	r24, r18
 356:	82 bb       	out	0x12, r24	; 18
 358:	08 95       	ret

0000035a <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	a8 f5       	brcc	.+106    	; 0x3c8 <DIO_voidActivePinInPullUpResistance+0x6e>
 35e:	68 30       	cpi	r22, 0x08	; 8
 360:	98 f5       	brcc	.+102    	; 0x3c8 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	89 f0       	breq	.+34     	; 0x388 <DIO_voidActivePinInPullUpResistance+0x2e>
 366:	28 f0       	brcs	.+10     	; 0x372 <DIO_voidActivePinInPullUpResistance+0x18>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	c9 f0       	breq	.+50     	; 0x39e <DIO_voidActivePinInPullUpResistance+0x44>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	11 f1       	breq	.+68     	; 0x3b4 <DIO_voidActivePinInPullUpResistance+0x5a>
 370:	08 95       	ret
		{
		case DIO_PORTA:
			SET_BIT(PORTA_REG, copy_u8PinId);
 372:	2b b3       	in	r18, 0x1b	; 27
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_voidActivePinInPullUpResistance+0x24>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_voidActivePinInPullUpResistance+0x20>
 382:	82 2b       	or	r24, r18
 384:	8b bb       	out	0x1b, r24	; 27
			break;
 386:	08 95       	ret

		case DIO_PORTB:
			SET_BIT(PORTB_REG, copy_u8PinId);
 388:	28 b3       	in	r18, 0x18	; 24
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidActivePinInPullUpResistance+0x3a>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidActivePinInPullUpResistance+0x36>
 398:	82 2b       	or	r24, r18
 39a:	88 bb       	out	0x18, r24	; 24
			break;
 39c:	08 95       	ret

		case DIO_PORTC:
			SET_BIT(PORTC_REG, copy_u8PinId);
 39e:	25 b3       	in	r18, 0x15	; 21
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_voidActivePinInPullUpResistance+0x50>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_voidActivePinInPullUpResistance+0x4c>
 3ae:	82 2b       	or	r24, r18
 3b0:	85 bb       	out	0x15, r24	; 21
			break;
 3b2:	08 95       	ret

		case DIO_PORTD:
			SET_BIT(PORTD_REG, copy_u8PinId);
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_voidActivePinInPullUpResistance+0x66>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_voidActivePinInPullUpResistance+0x62>
 3c4:	82 2b       	or	r24, r18
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	08 95       	ret

000003ca <LED_voidInit>:
#include "LED_interface.h"


void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
	DIO_voidSetPinDirection(copy_u8LedPort, copy_u8LedPin, DIO_PIN_OUTPUT);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 3d0:	08 95       	ret

000003d2 <LED_voidOn>:
}


void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	19 f0       	breq	.+6      	; 0x3dc <LED_voidOn+0xa>
 3d6:	42 30       	cpi	r20, 0x02	; 2
 3d8:	29 f0       	breq	.+10     	; 0x3e4 <LED_voidOn+0x12>
 3da:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_voidSetPinValue>
		break;
 3e2:	08 95       	ret

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_voidSetPinValue>
 3ea:	08 95       	ret

000003ec <LED_voidOff>:
}


void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
 3ec:	41 30       	cpi	r20, 0x01	; 1
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <LED_voidOff+0xa>
 3f0:	42 30       	cpi	r20, 0x02	; 2
 3f2:	29 f0       	breq	.+10     	; 0x3fe <LED_voidOff+0x12>
 3f4:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_LOW);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_voidSetPinValue>
		break;
 3fc:	08 95       	ret

	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue(copy_u8LedPort, copy_u8LedPin, DIO_PIN_HIGH);
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_voidSetPinValue>
 404:	08 95       	ret

00000406 <LED_voidToggle>:
}


void LED_voidToggle(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
	DIO_voidTogglePinValue(copy_u8LedPort, copy_u8LedPin);
 406:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_voidTogglePinValue>
 40a:	08 95       	ret

0000040c <main>:
#include "LED_interface.h"
#include "SWITCH_interface.h"


int main(void)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <main+0x6>
 412:	1f 92       	push	r1
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8SW0, local_u8SW1, local_u8SW2;
    LED_voidInit(DIO_PORTC, DIO_PIN2); //LED0
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LED_voidInit>
	LED_voidInit(DIO_PORTC, DIO_PIN7); //LED1
 420:	67 e0       	ldi	r22, 0x07	; 7
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LED_voidInit>
	LED_voidInit(DIO_PORTD, DIO_PIN3); //LED2
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LED_voidInit>
	
	SWITCH_voidInit(DIO_PORTB, DIO_PIN0);//SW0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 6d 02 	call	0x4da	; 0x4da <SWITCH_voidInit>
	SWITCH_voidInit(DIO_PORTD, DIO_PIN6);//SW1
 438:	66 e0       	ldi	r22, 0x06	; 6
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 6d 02 	call	0x4da	; 0x4da <SWITCH_voidInit>
	DIO_voidActivePinInPullUpResistance(DIO_PORTD, DIO_PIN6);
 440:	66 e0       	ldi	r22, 0x06	; 6
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidActivePinInPullUpResistance>
	SWITCH_voidInit(DIO_PORTD, DIO_PIN2);//SW2
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 6d 02 	call	0x4da	; 0x4da <SWITCH_voidInit>
	
    while (1) 
    {
		SWITCH_voidGetState(DIO_PORTB, DIO_PIN0, SWITCH_FORWARD_CONNECTION, &local_u8SW0);
 450:	9e 01       	movw	r18, r28
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SWITCH_voidGetState>
		SWITCH_voidGetState(DIO_PORTD, DIO_PIN6, SWITCH_REVERSE_CONNECTION, &local_u8SW1);
 460:	9e 01       	movw	r18, r28
 462:	2e 5f       	subi	r18, 0xFE	; 254
 464:	3f 4f       	sbci	r19, 0xFF	; 255
 466:	42 e0       	ldi	r20, 0x02	; 2
 468:	66 e0       	ldi	r22, 0x06	; 6
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SWITCH_voidGetState>
		SWITCH_voidGetState(DIO_PORTD, DIO_PIN2, SWITCH_REVERSE_CONNECTION, &local_u8SW2);
 470:	9e 01       	movw	r18, r28
 472:	2d 5f       	subi	r18, 0xFD	; 253
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	42 e0       	ldi	r20, 0x02	; 2
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SWITCH_voidGetState>
		
		if(local_u8SW0 == SWITCH_PRESSED)
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	31 f4       	brne	.+12     	; 0x492 <main+0x86>
		{
			LED_voidOn(DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION);
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_voidOn>
 490:	05 c0       	rjmp	.+10     	; 0x49c <main+0x90>
		}
		else
		{
			LED_voidOff(DIO_PORTC, DIO_PIN2, LED_FORWARD_CONNECTION);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	62 e0       	ldi	r22, 0x02	; 2
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_voidOff>
		}
		
		if(local_u8SW1 == SWITCH_PRESSED)
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	69 f4       	brne	.+26     	; 0x4bc <main+0xb0>
		{
			LED_voidToggle(DIO_PORTC, DIO_PIN7);
 4a2:	67 e0       	ldi	r22, 0x07	; 7
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 03 02 	call	0x406	; 0x406 <LED_voidToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	83 ed       	ldi	r24, 0xD3	; 211
 4ae:	90 e3       	ldi	r25, 0x30	; 48
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <main+0xa4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0xae>
 4ba:	00 00       	nop
			_delay_ms(1000);
		}
		
		if(local_u8SW2 == SWITCH_PRESSED)
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	31 f4       	brne	.+12     	; 0x4ce <main+0xc2>
		{
			LED_voidOn(DIO_PORTD, DIO_PIN3, LED_REVERSE_CONNECTION);
 4c2:	42 e0       	ldi	r20, 0x02	; 2
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LED_voidOn>
 4cc:	c1 cf       	rjmp	.-126    	; 0x450 <main+0x44>
		}
		else
		{
			LED_voidOff(DIO_PORTD, DIO_PIN3, LED_REVERSE_CONNECTION);
 4ce:	42 e0       	ldi	r20, 0x02	; 2
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_voidOff>
 4d8:	bb cf       	rjmp	.-138    	; 0x450 <main+0x44>

000004da <SWITCH_voidInit>:
#include "SWITCH_interface.h"


void SWITCH_voidInit(u8 copy_u8SwitchPort, u8 copy_u8SwitchPin)
{
	DIO_voidSetPinDirection(copy_u8SwitchPort, copy_u8SwitchPin, DIO_PIN_INPUT);
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 4e0:	08 95       	ret

000004e2 <SWITCH_voidGetState>:
}


void SWITCH_voidGetState(u8 copy_u8SwitchPort, u8 copy_u8SwitchPin, u8 copy_u8SwitchConnectionType, u8* copy_pu8SwitchState)
{
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	1f 92       	push	r1
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
	if(copy_pu8SwitchState != NULL)
 4f0:	21 15       	cp	r18, r1
 4f2:	31 05       	cpc	r19, r1
 4f4:	41 f1       	breq	.+80     	; 0x546 <SWITCH_voidGetState+0x64>
 4f6:	89 01       	movw	r16, r18
	{
		u8 local_u8SwitchVal;
		switch(copy_u8SwitchConnectionType)
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	19 f0       	breq	.+6      	; 0x502 <SWITCH_voidGetState+0x20>
 4fc:	42 30       	cpi	r20, 0x02	; 2
 4fe:	91 f0       	breq	.+36     	; 0x524 <SWITCH_voidGetState+0x42>
 500:	22 c0       	rjmp	.+68     	; 0x546 <SWITCH_voidGetState+0x64>
		{
		case SWITCH_FORWARD_CONNECTION:
			DIO_voidGetPinValue(copy_u8SwitchPort, copy_u8SwitchPin, &local_u8SwitchVal);
 502:	ae 01       	movw	r20, r28
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	0e 94 3a 01 	call	0x274	; 0x274 <DIO_voidGetPinValue>
			switch(local_u8SwitchVal)
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	88 23       	and	r24, r24
 510:	29 f0       	breq	.+10     	; 0x51c <SWITCH_voidGetState+0x3a>
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	c1 f4       	brne	.+48     	; 0x546 <SWITCH_voidGetState+0x64>
			{
			case DIO_PIN_HIGH:
				*copy_pu8SwitchState = SWITCH_PRESSED;
 516:	f8 01       	movw	r30, r16
 518:	80 83       	st	Z, r24
				break;
 51a:	15 c0       	rjmp	.+42     	; 0x546 <SWITCH_voidGetState+0x64>

			case DIO_PIN_LOW:
				*copy_pu8SwitchState = SWITCH_NOT_PRESSED;
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	f8 01       	movw	r30, r16
 520:	80 83       	st	Z, r24
				break;
 522:	11 c0       	rjmp	.+34     	; 0x546 <SWITCH_voidGetState+0x64>
			}
			break;

			case SWITCH_REVERSE_CONNECTION:
				DIO_voidGetPinValue(copy_u8SwitchPort, copy_u8SwitchPin, &local_u8SwitchVal);
 524:	ae 01       	movw	r20, r28
 526:	4f 5f       	subi	r20, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	0e 94 3a 01 	call	0x274	; 0x274 <DIO_voidGetPinValue>
				switch(local_u8SwitchVal)
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	88 23       	and	r24, r24
 532:	31 f0       	breq	.+12     	; 0x540 <SWITCH_voidGetState+0x5e>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	39 f4       	brne	.+14     	; 0x546 <SWITCH_voidGetState+0x64>
				{
				case DIO_PIN_HIGH:
					*copy_pu8SwitchState = SWITCH_NOT_PRESSED;
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	f8 01       	movw	r30, r16
 53c:	80 83       	st	Z, r24
					break;
 53e:	03 c0       	rjmp	.+6      	; 0x546 <SWITCH_voidGetState+0x64>

				case DIO_PIN_LOW:
					*copy_pu8SwitchState = SWITCH_PRESSED;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	f8 01       	movw	r30, r16
 544:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
